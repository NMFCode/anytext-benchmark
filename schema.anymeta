
namespace CIM ( cim ) = http://iec.ch/TC57/2009/CIM-schema-cim14
{

  namespace IEC61970 ( cimIEC61970 ) = http://iec.ch/TC57/2009/CIM-schema-cim14#IEC61970
  {

    namespace OperationalLimits ( cimOperationalLimits ) = http://iec.ch/TC57/2009/CIM-schema-cim14#OperationalLimits
    {
      class BranchGroupTerminal : Element
      {
        unique ordered positiveFlowIn : nmeta.Boolean [1 ]
        unique ordered reference Terminal : cimCore.Terminal [0..1] opposite BranchGroupTerminal
        unique ordered reference BranchGroup : BranchGroup [0..1] opposite BranchGroupTerminal
      }
      class OperationalLimit : cimCore.IdentifiedObject
      {
        unique ordered type : nmeta.String [1 ]
        unique ordered reference OperationalLimitSet : OperationalLimitSet [0..1] opposite OperationalLimitValue
        unique ordered reference OperationalLimitType : OperationalLimitType [0..1] opposite OperationalLimit
      }
      class BranchGroup : cimCore.IdentifiedObject
      {
        unique ordered monitorReactivePower : nmeta.Boolean [1 ]
        unique ordered minimumReactivePower : nmeta.Float [1 ]
        unique ordered monitorActivePower : nmeta.Boolean [1 ]
        unique ordered maximumReactivePower : nmeta.Float [1 ]
        unique ordered maximumActivePower : nmeta.Float [1 ]
        unique ordered minimumActivePower : nmeta.Float [1 ]
        unique ordered reference BranchGroupTerminal : BranchGroupTerminal [0..*] opposite BranchGroup
      }
      class VoltageLimit : OperationalLimit
      {
        unique ordered value : nmeta.Float [1 ]
      }
      class ApparentPowerLimit : OperationalLimit
      {
        unique ordered value : nmeta.Float [1 ]
      }
      enum OperationalLimitDirectionKind
      {
        high
        absoluteValue = 1
        low = 2
      }
      class CurrentLimit : OperationalLimit
      {
        unique ordered value : nmeta.Float [1 ]
      }
      class OperationalLimitSet : cimCore.IdentifiedObject
      {
        unique ordered reference OperationalLimitValue : OperationalLimit [0..*] opposite OperationalLimitSet
        unique ordered reference Terminal : cimCore.Terminal [0..1] opposite OperationalLimitSet
        unique ordered reference Equipment : cimCore.Equipment [0..1] opposite OperationalLimitSet
      }
      class ActivePowerLimit : OperationalLimit
      {
        unique ordered value : nmeta.Float [1 ]
      }
      class OperationalLimitType : cimCore.IdentifiedObject
      {
        unique ordered acceptableDuration : nmeta.Float [1 ]
        unique ordered direction : OperationalLimitDirectionKind [0..1]
        unique ordered reference OperationalLimit : OperationalLimit [0..*] opposite OperationalLimitType
      }

    }

    namespace Informative ( cimInformative ) = http://iec.ch/TC57/2009/CIM-schema-cim14#Informative
    {

      namespace EnergyScheduling ( cimEnergyScheduling ) = http://iec.ch/TC57/2009/CIM-schema-cim14#EnergyScheduling
      {
        class LossProfile : Profile
        {
          unique ordered reference HasLoss_ : cimFinancial.TransmissionProvider [0..1] opposite For
          unique ordered reference EnergyTransaction : EnergyTransaction [0..1] opposite LossProfiles
        }
        class SubControlArea : cimControlArea.ControlArea
        {
          unique ordered reference SideA_TieLines : TieLine [0..*] opposite SideA_SubControlArea
          unique ordered reference GeneratingUnits : cimProduction.GeneratingUnit [0..*] opposite SubControlArea
          unique ordered reference Export_EnergyTransactions : EnergyTransaction [0..*] opposite Export_SubControlArea
          unique ordered reference Import_EnergyTransactions : EnergyTransaction [0..*] opposite Import_SubControlArea
          unique ordered reference HostControlArea : HostControlArea [0..1] opposite SubControlAreas
          unique ordered reference PartOf : cimReservation.ServicePoint [0..*] opposite MemberOf
          unique ordered reference Flowgate : cimMarketOperations.Flowgate [0..*] opposite SubControlArea
          unique ordered reference SideB_TieLines : TieLine [0..*] opposite SideB_SubControlArea
        }
        class Reserve : EnergyTransaction
        {
          unique ordered reference AreaReserveSpec : AreaReserveSpec [0..*] opposite ReserveEnergyTransaction
        }
        class EnergyTransaction : cimCommon.Document
        {
          unique ordered state : nmeta.Object [1 ]
          unique ordered firmInterchangeFlag : nmeta.Boolean [1 ]
          unique ordered deliveryPointP : nmeta.Float [1 ]
          unique ordered receiptPointP : nmeta.Float [1 ]
          unique ordered congestChargeMax : nmeta.Float [1 ]
          unique ordered energyMin : nmeta.Float [1 ]
          unique ordered reason : nmeta.String [1 ]
          unique ordered reference EnergyPriceCurves : cimMarketOperations.EnergyPriceCurve [0..*] opposite EnergyTransactions
          unique ordered reference EnergyTransId : cimMarketOperations.TransactionBid [0..*]
          unique ordered reference EnergyProduct : EnergyProduct [0..1] opposite EnergyTransactions
          unique ordered reference Export_SubControlArea : SubControlArea [0..1] opposite Export_EnergyTransactions
          unique ordered reference Import_SubControlArea : SubControlArea [0..1] opposite Import_EnergyTransactions
          unique ordered reference EnergyProfiles : EnergyProfile [0..*] opposite EnergyTransaction
          unique ordered reference CurtailmentProfiles : CurtailmentProfile [0..*] opposite EnergyTransaction
          unique ordered reference LossProfiles : LossProfile [0..*] opposite EnergyTransaction
        }
        class Profile : cimCore.IdentifiedObject
        {
          unique ordered reference ProfileDatas : ProfileData [0..*] opposite Profile
        }
        class TransmissionRightOfWay : cimCore.PowerSystemResource
        {
          unique ordered reference TransmissionCorridor : TransmissionCorridor [0..1] opposite TransmissionRightOfWays
          unique ordered reference Lines : cimWires.Line [0..*] opposite TransmissionRightOfWay
        }
        class Dynamic : EnergyTransaction
        {
          unique ordered reference TieLines : TieLine [0..*] opposite DynamicEnergyTransaction
        }
        class EnergySchedulingVersion : Element
        {
          unique ordered date : nmeta.DateTime [1 ]
          unique ordered version : nmeta.String [1 ]
        }
        class DynamicSchedule : cimCore.RegularIntervalSchedule
        {
          unique ordered dynSchedStatus : nmeta.String [1 ]
          unique ordered dynSchedSignRev : nmeta.Boolean [1 ]
          unique ordered reference Receive_HostControlArea : HostControlArea [0..1] opposite Receive_DynamicSchedules
          unique ordered reference Measurement : cimMeas.Measurement [0..1] opposite DynamicSchedules
          unique ordered reference Send_HostControlArea : HostControlArea [0..1] opposite Send_DynamicSchedules
        }
        class AreaReserveSpec : Element
        {
          unique ordered raiseRegMarginReqt : nmeta.Float [1 ]
          unique ordered areaReserveSpecName : nmeta.String [1 ]
          unique ordered opReserveReqt : nmeta.Float [1 ]
          unique ordered lowerRegMarginReqt : nmeta.Float [1 ]
          unique ordered primaryReserveReqt : nmeta.Float [1 ]
          unique ordered spinningReserveReqt : nmeta.Float [1 ]
          unique ordered reference ReserveEnergyTransaction : Reserve [0..1] opposite AreaReserveSpec
          unique ordered reference HostControlAreas : HostControlArea [0..*] opposite AreaReserveSpec
        }
        class ProfileData : Element
        {
          unique ordered capacityLevel : nmeta.Float [1 ]
          unique ordered startDateTime : nmeta.DateTime [1 ]
          unique ordered sequenceNumber : nmeta.Integer [1 ]
          unique ordered stopDateTime : nmeta.DateTime [1 ]
          unique ordered energyLevel : nmeta.Float [1 ]
          unique ordered reference Profile : Profile [0..*] opposite ProfileDatas
        }
        class EnergyProduct : cimCommon.Agreement
        {
          unique ordered reference GenerationProvider : cimFinancial.GenerationProvider [0..1] opposite EnergyProducts
          unique ordered reference TitleHeldBy_Marketer : cimFinancial.Marketer [0..1] opposite HoldsTitleTo_EnergyProducts
          unique ordered reference EnergyTransactions : EnergyTransaction [0..*] opposite EnergyProduct
          unique ordered reference ResoldBy_Marketers : cimFinancial.Marketer [0..*] opposite Resells_EnergyProduct
          unique ordered reference ServicePoint : cimReservation.ServicePoint [0..*] opposite EnergyProducts
        }
        class TransmissionCorridor : cimCore.PowerSystemResource
        {
          unique ordered reference TransmissionRightOfWays : TransmissionRightOfWay [0..*] opposite TransmissionCorridor
          unique ordered reference ContainedIn : cimReservation.TransmissionPath [0..*] opposite For
        }
        class InadvertentAccount : cimCore.Curve
        {
          unique ordered reference HostControlArea : HostControlArea [0..1] opposite InadvertentAccounts
        }
        class AvailableTransmissionCapacity : cimCore.Curve
        {
          unique ordered reference ScheduleFor : cimReservation.TransmissionService [0..*] opposite ScheduledBy
        }
        class TieLine : Element
        {
          unique ordered reference DynamicEnergyTransaction : Dynamic [0..1] opposite TieLines
          unique ordered reference CustomerConsumer : cimFinancial.CustomerConsumer [0..1] opposite TieLines
          unique ordered reference SideA_SubControlArea : SubControlArea [0..1] opposite SideA_TieLines
          unique ordered reference SideB_HostControlArea : HostControlArea [0..1] opposite SideB_TieLines
          unique ordered reference SideB_SubControlArea : SubControlArea [0..1] opposite SideB_TieLines
          unique ordered reference SideA_HostControlArea : HostControlArea [0..1] opposite SideA_TieLines
          unique ordered reference ControlAreaOperators : cimFinancial.ControlAreaOperator [0..*] opposite TieLines
        }
        class EnergyProfile : Profile
        {
          unique ordered reference TransactionBid : cimMarketOperations.TransactionBid [0..1] opposite EnergyProfiles
          unique ordered reference EnergyTransaction : EnergyTransaction [0..1] opposite EnergyProfiles
        }
        class Block : EnergyTransaction
        {
        }
        enum AreaControlMode
        {
          TLB
          CF = 1
          OFF = 2
          CTL = 3
        }
        class CurtailmentProfile : Profile
        {
          unique ordered reference EnergyTransaction : EnergyTransaction [0..1] opposite CurtailmentProfiles
        }
        class HostControlArea : cimCore.IdentifiedObject
        {
          unique ordered frequencyBiasFactor : nmeta.Object [1 ]
          unique ordered freqSetPoint : nmeta.Float [1 ]
          unique ordered areaControlMode : AreaControlMode [0..1]
          unique ordered reference SubControlAreas : SubControlArea [0..*] opposite HostControlArea
          unique ordered reference SideA_TieLines : TieLine [0..*] opposite SideA_HostControlArea
          unique ordered reference Controls : cimFinancial.ControlAreaOperator [0..1] opposite ControlledBy
          unique ordered reference InadvertentAccounts : InadvertentAccount [0..*] opposite HostControlArea
          unique ordered reference SideB_TieLines : TieLine [0..*] opposite SideB_HostControlArea
          unique ordered reference Receive_DynamicSchedules : DynamicSchedule [0..*] opposite Receive_HostControlArea
          unique ordered reference AreaReserveSpec : AreaReserveSpec [0..1] opposite HostControlAreas
          unique ordered reference Send_DynamicSchedules : DynamicSchedule [0..*] opposite Send_HostControlArea
        }

      }

      namespace InfERPSupport ( cimInfERPSupport ) = http://iec.ch/TC57/2009/CIM-schema-cim14#InfERPSupport
      {
        class ErpInventoryCount : cimCore.IdentifiedObject
        {
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference MaterialItem : cimInfWork.MaterialItem [0..1] opposite ErpInventoryCounts
          unique ordered reference AssetModel : cimAssetModels.AssetModel [0..1] opposite ErpInventoryCounts
        }
        class ErpPersonnel : cimCore.IdentifiedObject
        {
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference ErpPersons : ErpPerson [0..*] opposite ErpPersonnel
        }
        class ErpInvoiceLineItem : cimCommon.Document
        {
          unique ordered netAmount : nmeta.Float [1 ]
          unique ordered lineAmount : nmeta.Float [1 ]
          unique ordered previousAmount : nmeta.Float [1 ]
          unique ordered kind : ErpInvoiceLineItemKind [0..1]
          unique ordered glDateTime : nmeta.DateTime [1 ]
          unique ordered glAccount : nmeta.String [1 ]
          unique ordered lineNumber : nmeta.String [1 ]
          unique ordered lineVersion : nmeta.String [1 ]
          unique ordered reference ErpQuoteLineItem : ErpQuoteLineItem [0..1] opposite ErpInvoiceLineItem
          unique ordered reference ErpPayableLineItem : ErpPayableLineItem [0..1] opposite ErpInvoiceLineItem
          unique ordered reference ErpRecLineItem : ErpRecLineItem [0..1] opposite ErpInvoiceLineItem
          unique ordered reference Settlements : cimMarketOperations.Settlement [0..*] opposite ErpInvoiceLineItems
          unique ordered reference WorkBillingInfos : cimInfCustomers.WorkBillingInfo [0..*] opposite ErpLineItems
          unique ordered reference MarketFactors : cimMarketOperations.MarketFactors [0..*] opposite ErpInvoices
          unique ordered reference ErpPayments : ErpPayment [0..*] opposite ErpInvoiceLineItems
          unique ordered reference ContainerErpInvoiceLineItem : ErpInvoiceLineItem [0..1] opposite ComponentErpInvoiceLineItems
          unique ordered reference ErpRecDelvLineItem : ErpRecDelvLineItem [0..1] opposite ErpInvoiceLineItem
          unique ordered reference billPeriod : cimCommon.DateTimeInterval [0..1]
          unique ordered reference UserAttributes : cimCommon.UserAttribute [0..*] opposite ErpInvoiceLineItems
          unique ordered reference ErpInvoice : ErpInvoice [0..1] opposite ErpInvoiceLineItems
          unique ordered reference CustomerBillingInfos : cimInfCustomers.CustomerBillingInfo [0..*] opposite ErpInvoiceLineItems
          unique ordered reference ComponentErpInvoiceLineItems : ErpInvoiceLineItem [0..*] opposite ContainerErpInvoiceLineItem
          unique ordered reference ErpJournalEntries : ErpJournalEntry [0..*] opposite ErpInvoiceLineItem
        }
        class ErpChartOfAccounts : cimCommon.Document
        {
        }
        class ErpProjectAccounting : cimCommon.Document
        {
          unique ordered reference Projects : cimInfWork.Project [0..*] opposite ErpProjectAccounting
          unique ordered reference WorkCostDetails : cimInfWork.WorkCostDetail [0..*] opposite ErpProjectAccounting
          unique ordered reference ErpTimeEntries : ErpTimeEntry [0..*] opposite ErpProjectAccounting
          unique ordered reference Works : cimWork.Work [0..*] opposite ErpProjectAccounting
        }
        class ErpReceiveDelivery : cimCommon.Document
        {
          unique ordered reference ErpRecDelvLineItems : ErpRecDelvLineItem [0..*] opposite ErpReceiveDelivery
        }
        class ErpEngChangeOrder : cimCommon.Document
        {
        }
        class ErpJournal : cimCommon.Document
        {
          unique ordered reference ErpJournalEntries : ErpJournalEntry [0..*] opposite ErpJournal
        }
        class ErpReqLineItem : cimCore.IdentifiedObject
        {
          unique ordered deliveryDate : nmeta.String [1 ]
          unique ordered quantity : nmeta.Integer [1 ]
          unique ordered code : nmeta.String [1 ]
          unique ordered cost : nmeta.Float [1 ]
          unique ordered reference TypeMaterial : cimInfWork.TypeMaterial [0..1] opposite ErpReqLineItems
          unique ordered reference ErpQuoteLineItem : ErpQuoteLineItem [0..1] opposite ErpReqLineItem
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference ErpRequisition : ErpRequisition [0..1] opposite ErpReqLineItems
          unique ordered reference TypeAsset : cimInfTypeAsset.TypeAsset [0..1] opposite ErpReqLineItems
          unique ordered reference ErpPOLineItem : ErpPOLineItem [0..1] opposite ErpReqLineItem
        }
        enum ErpInvoiceLineItemKind
        {
          recalculation
          initial = 1
          other = 2
        }
        class ErpOrganisation : cimCommon.Organisation
        {
          unique ordered mode : nmeta.String [1 ]
          unique ordered optOut : nmeta.Boolean [1 ]
          unique ordered isProfitCenter : nmeta.Boolean [1 ]
          unique ordered isCostCenter : nmeta.Boolean [1 ]
          unique ordered code : nmeta.String [1 ]
          unique ordered industryID : nmeta.String [1 ]
          unique ordered category : nmeta.String [1 ]
          unique ordered governmentID : nmeta.String [1 ]
          unique ordered reference Crews : cimInfWork.Crew [0..*] opposite Organisations
          unique ordered reference Requests : cimInfWork.Request [0..*] opposite Organisation
          unique ordered reference RegisteredResources : cimMarketOperations.RegisteredResource [0..*] opposite Organisation
          unique ordered reference PowerSystemResourceRoles : cimInfOperations.OrgPsrRole [0..*] opposite ErpOrganisation
          unique ordered reference DocumentRoles : DocOrgRole [0..*] opposite ErpOrganisation
          unique ordered reference AssetRoles : cimInfAssets.OrgAssetRole [0..*] opposite ErpOrganisation
          unique ordered reference ViolationLimits : cimMarketOperations.ViolationLimit [0..*] opposite Organisations
          unique ordered reference ParentOrganisationRoles : OrgOrgRole [0..*] opposite ChildOrganisation
          unique ordered reference LandPropertyRoles : cimInfLocations.OrgPropertyRole [0..*] opposite ErpOrganisation
          unique ordered reference ErpPersonRoles : OrgErpPersonRole [0..*] opposite ErpOrganisation
          unique ordered reference ChildOrganisationRoles : OrgOrgRole [0..*] opposite ParentOrganisation
          unique ordered reference ChangeItems : cimInfOperations.ChangeItem [0..*] opposite Organisation
          unique ordered reference Locations : cimCommon.Location [0..*] opposite ErpOrganisations
          unique ordered reference IntSchedAgreement : cimFinancial.IntSchedAgreement [0..*] opposite Organisations
          unique ordered reference ActivityRecords : cimCommon.ActivityRecord [0..*] opposite Organisations
        }
        class DocOrgRole : cimInfCommon.Role
        {
          unique ordered reference Document : cimCommon.Document [0..1] opposite ErpOrganisationRoles
          unique ordered reference ErpOrganisation : ErpOrganisation [0..1] opposite DocumentRoles
        }
        class ErpLedgerEntry : cimCore.IdentifiedObject
        {
          unique ordered transactionDateTime : nmeta.DateTime [1 ]
          unique ordered accountID : nmeta.String [1 ]
          unique ordered amount : nmeta.Float [1 ]
          unique ordered postedDateTime : nmeta.DateTime [1 ]
          unique ordered accountKind : ErpAccountKind [0..1]
          unique ordered reference ErpJounalEntry : ErpJournalEntry [0..1] opposite ErpLedgerEntry
          unique ordered reference ErpLedgerEntry : ErpLedBudLineItem [0..1] opposite ErpLedBudLineItem
          unique ordered reference UserAttributes : cimCommon.UserAttribute [0..*] opposite ErpLedgerEntries
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference Settlements : cimMarketOperations.Settlement [0..*] opposite ErpLedgerEntries
          unique ordered reference ErpLedger : ErpLedger [0..1] opposite ErpLedgerEntries
        }
        class ErpReceivable : cimCommon.Document
        {
          unique ordered reference ErpRecLineItems : ErpRecLineItem [0..*] opposite ErpReceivable
        }
        class ErpPerson : cimCore.IdentifiedObject
        {
          unique ordered category : nmeta.String [1 ]
          unique ordered firstName : nmeta.String [1 ]
          unique ordered lastName : nmeta.String [1 ]
          unique ordered mName : nmeta.String [1 ]
          unique ordered governmentID : nmeta.String [1 ]
          unique ordered specialNeed : nmeta.String [1 ]
          unique ordered prefix : nmeta.String [1 ]
          unique ordered suffix : nmeta.String [1 ]
          unique ordered reference CallBacks : cimInfOperations.CallBack [0..*] opposite ErpPersons
          unique ordered reference ServiceLocation : cimCustomers.ServiceLocation [0..1] opposite ErpPersons
          unique ordered reference DocumentRoles : DocErpPersonRole [0..*] opposite ErpPerson
          unique ordered reference SwitchingStepRoles : cimInfOperations.ErpPersonScheduleStepRole [0..*] opposite ErpPerson
          unique ordered reference ChangeItems : cimInfOperations.ChangeItem [0..*] opposite ErpPerson
          unique ordered reference Skills : cimInfCommon.Skill [0..*] opposite ErpPerson
          unique ordered reference electronicAddress : cimCommon.ElectronicAddress [0..1]
          unique ordered reference ErpOrganisationRoles : OrgErpPersonRole [0..*] opposite ErpPerson
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference LaborItems : cimInfWork.LaborItem [0..*] opposite ErpPersons
          unique ordered reference Crafts : cimInfCommon.Craft [0..*] opposite ErpPersons
          unique ordered reference mobilePhone : cimCommon.TelephoneNumber [0..1]
          unique ordered reference ErpCompetency : ErpCompetency [0..1] opposite ErpPersons
          unique ordered reference LandPropertyRoles : cimInfLocations.PersonPropertyRole [0..*] opposite ErpPerson
          unique ordered reference landlinePhone : cimCommon.TelephoneNumber [0..1]
          unique ordered reference MeasurementValues : cimMeas.MeasurementValue [0..*] opposite ErpPerson
          unique ordered reference ActivityRecords : cimCommon.ActivityRecord [0..*] opposite ErpPersons
          unique ordered reference Crews : cimInfWork.Crew [0..*] opposite CrewMembers
          unique ordered reference Appointments : cimInfWork.Appointment [0..*] opposite ErpPersons
          unique ordered reference ErpPersonnel : ErpPersonnel [0..1] opposite ErpPersons
          unique ordered reference CustomerData : cimCustomers.Customer [0..1] opposite ErpPersons
        }
        class OrgErpPersonRole : cimInfCommon.Role
        {
          unique ordered clientID : nmeta.String [1 ]
          unique ordered reference ErpOrganisation : ErpOrganisation [0..1] opposite ErpPersonRoles
          unique ordered reference ErpPerson : ErpPerson [0..1] opposite ErpOrganisationRoles
        }
        class ErpCompetency : cimCore.IdentifiedObject
        {
          unique ordered reference ErpPersons : ErpPerson [0..*] opposite ErpCompetency
        }
        class ErpLedger : cimCommon.Document
        {
          unique ordered reference ErpLedgerEntries : ErpLedgerEntry [0..*] opposite ErpLedger
        }
        class ErpSalesOrder : cimCommon.Document
        {
        }
        class ErpQuoteLineItem : cimCore.IdentifiedObject
        {
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference Request : cimInfWork.Request [0..1] opposite ErpQuoteLineItem
          unique ordered reference Design : cimInfWork.Design [0..1] opposite ErpQuoteLineItem
          unique ordered reference ErpInvoiceLineItem : ErpInvoiceLineItem [0..1] opposite ErpQuoteLineItem
          unique ordered reference ErpReqLineItem : ErpReqLineItem [0..1] opposite ErpQuoteLineItem
          unique ordered reference ErpQuote : ErpQuote [0..1] opposite ErpQuoteLineItems
          unique ordered reference AssetModelCatalogueItem : cimInfAssetModels.AssetModelCatalogueItem [0..1] opposite ErpQuoteLineItems
        }
        class ErpPurchaseOrder : cimCommon.Document
        {
          unique ordered reference ErpPOLineItems : ErpPOLineItem [0..*] opposite ErpPurchaseOrder
        }
        class ErpPayableLineItem : cimCore.IdentifiedObject
        {
          unique ordered reference ErpInvoiceLineItem : ErpInvoiceLineItem [0..1] opposite ErpPayableLineItem
          unique ordered reference ErpPayments : ErpPayment [0..*] opposite ErpPayableLineItems
          unique ordered reference ErpPayable : ErpPayable [0..1] opposite ErpPayableLineItems
          unique ordered reference ErpJournalEntries : ErpJournalEntry [0..*] opposite ErpPayableLineItems
          unique ordered reference status : cimCommon.Status [0..1]
        }
        class ErpLedgerBudget : cimCommon.Document
        {
          unique ordered reference ErpLedBudLineItems : ErpLedBudLineItem [0..*] opposite ErpLedgerBudget
        }
        class ErpBomItemData : cimCore.IdentifiedObject
        {
          unique ordered reference DesignLocation : cimInfWork.DesignLocation [0..1] opposite ErpBomItemDatas
          unique ordered reference ErpBOM : ErpBOM [0..1] opposite ErpBomItemDatas
          unique ordered reference TypeAsset : cimInfTypeAsset.TypeAsset [0..1] opposite ErpBomItemDatas
        }
        enum ErpAccountKind
        {
          normal
          statistical = 1
          reversal = 2
          estimate = 3
        }
        class ErpInventory : cimCore.IdentifiedObject
        {
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference Asset : cimAssets.Asset [0..1] opposite ErpInventory
        }
        class DocErpPersonRole : cimInfCommon.Role
        {
          unique ordered reference ErpPerson : ErpPerson [0..1] opposite DocumentRoles
          unique ordered reference Document : cimCommon.Document [0..1] opposite ErpPersonRoles
        }
        enum ErpInvoiceKind
        {
          purchase
          sales = 1
        }
        class ErpItemMaster : cimCore.IdentifiedObject
        {
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference Asset : cimAssets.Asset [0..1] opposite ErpItemMaster
        }
        class ErpBankAccount : cimInfCommon.BankAccount
        {
          unique ordered bankABA : nmeta.String [1 ]
        }
        class ErpRecDelvLineItem : cimCore.IdentifiedObject
        {
          unique ordered reference ErpPOLineItem : ErpPOLineItem [0..1] opposite ErpRecDelLineItem
          unique ordered reference ErpInvoiceLineItem : ErpInvoiceLineItem [0..1] opposite ErpRecDelvLineItem
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference ErpReceiveDelivery : ErpReceiveDelivery [0..1] opposite ErpRecDelvLineItems
          unique ordered reference MaterialItems : cimInfWork.MaterialItem [0..*] opposite ErpRecDelvLineItems
          unique ordered reference Assets : cimAssets.Asset [0..*] opposite ErpRecDeliveryItems
        }
        class OrgOrgRole : cimInfCommon.Role
        {
          unique ordered clientID : nmeta.String [1 ]
          unique ordered reference ChildOrganisation : ErpOrganisation [0..1] opposite ParentOrganisationRoles
          unique ordered reference ParentOrganisation : ErpOrganisation [0..1] opposite ChildOrganisationRoles
        }
        class ErpSiteLevelData : cimCore.IdentifiedObject
        {
          unique ordered reference LandProperty : cimInfLocations.LandProperty [0..1] opposite ErpSiteLevelDatas
          unique ordered reference status : cimCommon.Status [0..1]
        }
        class ErpPOLineItem : cimCommon.Document
        {
          unique ordered reference ErpPurchaseOrder : ErpPurchaseOrder [0..1] opposite ErpPOLineItems
          unique ordered reference MaterialItem : cimInfWork.MaterialItem [0..1] opposite ErpPOLineItems
          unique ordered reference ErpReqLineItem : ErpReqLineItem [0..1] opposite ErpPOLineItem
          unique ordered reference AssetModelCatalogueItem : cimInfAssetModels.AssetModelCatalogueItem [0..1] opposite ErpPOLineItems
          unique ordered reference ErpRecDelLineItem : ErpRecDelvLineItem [0..1] opposite ErpPOLineItem
        }
        class ErpIssueInventory : cimCore.IdentifiedObject
        {
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference TypeMaterial : cimInfWork.TypeMaterial [0..1] opposite ErpIssueInventories
          unique ordered reference TypeAsset : cimInfTypeAsset.TypeAsset [0..1] opposite ErpInventoryIssues
        }
        class ErpPayment : cimCommon.Document
        {
          unique ordered termsPayment : nmeta.String [1 ]
          unique ordered reference ErpPayableLineItems : ErpPayableLineItem [0..*] opposite ErpPayments
          unique ordered reference ErpInvoiceLineItems : ErpInvoiceLineItem [0..*] opposite ErpPayments
          unique ordered reference ErpRecLineItems : ErpRecLineItem [0..*] opposite ErpPayments
        }
        class ErpQuote : cimCommon.Document
        {
          unique ordered reference ErpQuoteLineItems : ErpQuoteLineItem [0..*] opposite ErpQuote
        }
        class ErpPayable : cimCommon.Document
        {
          unique ordered reference ContractorItems : cimInfWork.ContractorItem [0..*] opposite ErpPayables
          unique ordered reference ErpPayableLineItems : ErpPayableLineItem [0..*] opposite ErpPayable
        }
        class ErpRequisition : cimCommon.Document
        {
          unique ordered reference ErpReqLineItems : ErpReqLineItem [0..*] opposite ErpRequisition
        }
        class ErpLedBudLineItem : cimCore.IdentifiedObject
        {
          unique ordered reference ErpLedgerBudget : ErpLedgerBudget [0..1] opposite ErpLedBudLineItems
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference ErpLedBudLineItem : ErpLedgerEntry [0..1] opposite ErpLedgerEntry
        }
        class ErpInvoice : cimCommon.Document
        {
          unique ordered amount : nmeta.Float [1 ]
          unique ordered kind : ErpInvoiceKind [0..1]
          unique ordered transactionDateTime : nmeta.DateTime [1 ]
          unique ordered referenceNumber : nmeta.String [1 ]
          unique ordered dueDate : nmeta.String [1 ]
          unique ordered mailedDate : nmeta.String [1 ]
          unique ordered transferType : nmeta.String [1 ]
          unique ordered proForma : nmeta.Boolean [1 ]
          unique ordered billMediaKind : BillMediaKind [0..1]
          unique ordered reference CustomerAccount : cimCustomers.CustomerAccount [0..1] opposite ErpInvoicees
          unique ordered reference ErpInvoiceLineItems : ErpInvoiceLineItem [0..*] opposite ErpInvoice
        }
        class ErpTimeEntry : cimCore.IdentifiedObject
        {
          unique ordered reference ErpProjectAccounting : ErpProjectAccounting [0..1] opposite ErpTimeEntries
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference ErpTimeSheet : ErpTimeSheet [0..1] opposite ErpTimeEntries
        }
        class ErpBOM : cimCommon.Document
        {
          unique ordered reference ErpBomItemDatas : ErpBomItemData [0..*] opposite ErpBOM
          unique ordered reference Design : cimInfWork.Design [0..1] opposite ErpBOMs
        }
        enum BillMediaKind
        {
          paper
          electronic = 1
          other = 2
        }
        class ErpJournalEntry : cimCore.IdentifiedObject
        {
          unique ordered accountID : nmeta.String [1 ]
          unique ordered amount : nmeta.Float [1 ]
          unique ordered postingDateTime : nmeta.DateTime [1 ]
          unique ordered transactionDateTime : nmeta.DateTime [1 ]
          unique ordered sourceID : nmeta.String [1 ]
          unique ordered reference ErpLedgerEntry : ErpLedgerEntry [0..1] opposite ErpJounalEntry
          unique ordered reference ErpJournal : ErpJournal [0..1] opposite ErpJournalEntries
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference CostTypes : cimInfWork.CostType [0..*] opposite ErpJournalEntries
          unique ordered reference ErpInvoiceLineItem : ErpInvoiceLineItem [0..1] opposite ErpJournalEntries
          unique ordered reference ErpPayableLineItems : ErpPayableLineItem [0..*] opposite ErpJournalEntries
          unique ordered reference ErpRecLineItems : ErpRecLineItem [0..*] opposite ErpJournalEntries
        }
        class ErpRecLineItem : cimCore.IdentifiedObject
        {
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference ErpJournalEntries : ErpJournalEntry [0..*] opposite ErpRecLineItems
          unique ordered reference ErpReceivable : ErpReceivable [0..1] opposite ErpRecLineItems
          unique ordered reference ErpInvoiceLineItem : ErpInvoiceLineItem [0..1] opposite ErpRecLineItem
          unique ordered reference ErpPayments : ErpPayment [0..*] opposite ErpRecLineItems
        }
        class ErpTimeSheet : cimCommon.Document
        {
          unique ordered reference ErpTimeEntries : ErpTimeEntry [0..*] opposite ErpTimeSheet
        }

      }

      namespace InfAssetModels ( cimInfAssetModels ) = http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssetModels
      {
        enum TransformerConstructionKind
        {
          valut
          subway = 1
          aerial = 2
          padmountFeedThrough = 3
          padmountLoopThrough = 4
          padmountDeadFront = 5
          padmounted = 6
          threePhase = 7
          padmountLiveFront = 8
          overhead = 9
          unknown = 10
          vaultThreePhase = 11
          network = 12
          underground = 13
          onePhase = 14
          dryType = 15
        }
        enum WindingInsulationKind
        {
          paper
          nomex = 1
          other = 2
          thermallyUpgradedPaper = 3
        }
        enum OilPreservationKind
        {
          nitrogenBlanket
          freeBreathing = 1
          conservator = 2
          other = 3
        }
        class MeterAssetModel : ElectricalAssetModel
        {
          unique ordered kH : nmeta.Float [1 ]
          unique ordered intervalDataMeter : nmeta.Boolean [1 ]
          unique ordered maxRegisterCount : nmeta.Integer [1 ]
          unique ordered kVAhMeter : nmeta.Boolean [1 ]
          unique ordered wireCount : nmeta.Integer [1 ]
          unique ordered timeOfUseMeter : nmeta.Boolean [1 ]
          unique ordered demandMeter : nmeta.Boolean [1 ]
          unique ordered reactiveMeter : nmeta.Boolean [1 ]
          unique ordered form : nmeta.String [1 ]
          unique ordered registerRatio : nmeta.Float [1 ]
          unique ordered kwhMeter : nmeta.Boolean [1 ]
          unique ordered qMeter : nmeta.Boolean [1 ]
          unique ordered loadProfileMeter : nmeta.Boolean [1 ]
          unique ordered reference MeterAssets : cimMetering.MeterAsset [0..*] opposite MeterAssetModel
        }
        class ElectricalAssetModel : cimAssetModels.AssetModel
        {
          unique ordered reference ElectricalInfos : cimInfAssets.ElectricalInfo [0..*] opposite ElectricalAssetModels
        }
        enum TapChangerSwitchingKind
        {
          resistive
          vacuum = 1
          other = 2
          reactive = 3
        }
        class TapChangerAssetModel : cimAssetModels.AssetModel
        {
          unique ordered frequency : nmeta.Float [1 ]
          unique ordered ratedVoltage : nmeta.Float [1 ]
          unique ordered highStep : nmeta.Integer [1 ]
          unique ordered ratedCurrent : nmeta.Float [1 ]
          unique ordered phaseCount : nmeta.Integer [1 ]
          unique ordered tapCount : nmeta.Integer [1 ]
          unique ordered ratedApparentPower : nmeta.Float [1 ]
          unique ordered neutralStep : nmeta.Integer [1 ]
          unique ordered lowStep : nmeta.Integer [1 ]
          unique ordered initialDelay : nmeta.Float [1 ]
          unique ordered stepVoltageIncrement : nmeta.Float [1 ]
          unique ordered switchingKind : TapChangerSwitchingKind [0..1]
          unique ordered subsequentDelay : nmeta.Float [1 ]
          unique ordered stepPhaseIncrement : nmeta.Float [1 ]
          unique ordered bil : nmeta.Float [1 ]
          unique ordered reference TapChangerAssets : cimInfAssets.TapChangerAsset [0..*] opposite TapChangerAssetModel
        }
        class AssetModelCatalogue : cimCore.IdentifiedObject
        {
          unique ordered reference AssetModelCatalogueItems : AssetModelCatalogueItem [0..*] opposite AssetModelCatalogue
          unique ordered reference status : cimCommon.Status [0..1]
        }
        class TransformerAssetModel : cimAssetModels.AssetModel
        {
          unique ordered hourOverLoadRating : nmeta.Float [1 ]
          unique ordered oilPreservationKind : OilPreservationKind [0..1]
          unique ordered coreCoilsWeight : nmeta.Float [1 ]
          unique ordered windingInsulationKind : WindingInsulationKind [0..1]
          unique ordered altSecondaryNomVoltage : nmeta.Float [1 ]
          unique ordered solidInsulationWeight : nmeta.Float [1 ]
          unique ordered neutralBIL : nmeta.Float [1 ]
          unique ordered coreKind : TransformerCoreKind [0..1]
          unique ordered dayOverLoadRating : nmeta.Float [1 ]
          unique ordered function : TransformerFunctionKind [0..1]
          unique ordered constructionKind : TransformerConstructionKind [0..1]
          unique ordered autoTransformer : nmeta.Boolean [1 ]
          unique ordered altPrimaryNomVoltage : nmeta.Float [1 ]
          unique ordered reconfigWinding : nmeta.Boolean [1 ]
          unique ordered reference TransformerInfo : cimAssetModels.TransformerInfo [0..1] opposite TransformerAssetModels
          unique ordered reference TransformerAssets : cimInfAssets.TransformerAsset [0..*] opposite TransformerAssetModel
        }
        enum CableShieldKind
        {
          superclean
          supersmooth = 1
          conventional = 2
          other = 3
          freeForm = 4
        }
        enum TransformerFunctionKind
        {
          autotransformer
          secondaryTransformer = 1
          voltageRegulator = 2
          other = 3
          powerTransformer = 4
        }
        enum TransformerCoreKind
        {
          core
          shell = 1
        }
        class AssetModelCatalogueItem : cimCommon.Document
        {
          unique ordered unitCost : nmeta.Float [1 ]
          unique ordered reference ErpQuoteLineItems : cimInfERPSupport.ErpQuoteLineItem [0..*] opposite AssetModelCatalogueItem
          unique ordered reference AssetModelCatalogue : AssetModelCatalogue [0..1] opposite AssetModelCatalogueItems
          unique ordered reference ErpPOLineItems : cimInfERPSupport.ErpPOLineItem [0..*] opposite AssetModelCatalogueItem
          unique ordered reference AssetModel : cimAssetModels.AssetModel [0..1] opposite AssetModelCatalogueItems
        }

      }

      namespace InfAssets ( cimInfAssets ) = http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets
      {
        enum PoleBaseKind
        {
          dirt
          asphalt = 1
          unknown = 2
          cement = 3
          other = 4
        }
        class OrgAssetRole : cimInfCommon.Role
        {
          unique ordered percentOwnership : nmeta.Float [1 ]
          unique ordered reference ErpOrganisation : cimInfERPSupport.ErpOrganisation [0..1] opposite AssetRoles
          unique ordered reference Asset : cimAssets.Asset [0..1] opposite ErpOrganisationRoles
        }
        enum ShuntImpedanceLocalControlKind
        {
          current
          none = 1
          time = 2
          powerFactor = 3
          reactivePower = 4
          voltage = 5
          temperature = 6
        }
        enum JointFillKind
        {
          insoluseal
          epoxy = 1
          airNoFilling = 2
          noVoid = 3
          asphaltic = 4
          oil = 5
          other = 6
          petrolatum = 7
          noFillPrefab = 8
          bluefill254 = 9
        }
        class ShuntCompensatorInfo : ElectricalInfo
        {
          unique ordered maxPowerLoss : nmeta.Float [1 ]
          unique ordered reference ShuntImpedanceInfo : ShuntImpedanceInfo [0..1] opposite ShuntCompensatorInfos
        }
        class PotentialTransformerInfo : ElectricalInfo
        {
          unique ordered accuracyClass : nmeta.String [1 ]
          unique ordered ptClass : nmeta.String [1 ]
          unique ordered reference secondaryRatio : cimInfCommon.Ratio [0..1]
          unique ordered reference nominalRatio : cimInfCommon.Ratio [0..1]
          unique ordered reference primaryRatio : cimInfCommon.Ratio [0..1]
          unique ordered reference tertiaryRatio : cimInfCommon.Ratio [0..1]
        }
        enum ProcedureKind
        {
          maintenance
          test = 1
          inspection = 2
          other = 3
          diagnosis = 4
        }
        class DuctInfo : AssetInfo
        {
          unique ordered yCoord : nmeta.Integer [1 ]
          unique ordered xCoord : nmeta.Integer [1 ]
          unique ordered reference CableInfos : cimAssetModels.CableInfo [0..*] opposite DuctBankInfo
          unique ordered reference DuctBankInfo : DuctBankInfo [0..1] opposite DuctInfos
        }
        class DocAssetRole : cimInfCommon.Role
        {
          unique ordered reference Asset : cimAssets.Asset [0..1] opposite DocumentRoles
          unique ordered reference Document : cimCommon.Document [0..1] opposite AssetRoles
        }
        enum StreetlightLampKind
        {
          other
          mercuryVapor = 1
          metalHalide = 2
          highPressureSodium = 3
        }
        class MountingPoint : cimCore.IdentifiedObject
        {
          unique ordered xCoord : nmeta.Integer [1 ]
          unique ordered phaseCode : cimCore.PhaseCode [0..1]
          unique ordered yCoord : nmeta.Integer [1 ]
          unique ordered reference OverheadConductors : cimAssetModels.OverheadConductorInfo [0..*] opposite MountingPoint
          unique ordered reference Connections : MountingConnection [0..*] opposite MountingPoints
        }
        class SVCInfo : FACTSDeviceInfo
        {
          unique ordered capacitiveRating : nmeta.Float [1 ]
          unique ordered inductiveRating : nmeta.Float [1 ]
        }
        class FinancialInfo : cimCore.IdentifiedObject
        {
          unique ordered costType : nmeta.String [1 ]
          unique ordered costDescription : nmeta.String [1 ]
          unique ordered account : nmeta.String [1 ]
          unique ordered plantTransferDateTime : nmeta.DateTime [1 ]
          unique ordered warrantyEndDateTime : nmeta.DateTime [1 ]
          unique ordered actualPurchaseCost : nmeta.Float [1 ]
          unique ordered purchaseDateTime : nmeta.DateTime [1 ]
          unique ordered purchaseOrderNumber : nmeta.String [1 ]
          unique ordered financialValue : nmeta.Float [1 ]
          unique ordered quantity : nmeta.Object [1 ]
          unique ordered valueDateTime : nmeta.DateTime [1 ]
          unique ordered reference Asset : cimAssets.Asset [0..1] opposite FinancialInfo
        }
        class ShuntImpedanceInfo : ElectricalInfo
        {
          unique ordered lowVoltageOverride : nmeta.Float [1 ]
          unique ordered cellSize : nmeta.Float [1 ]
          unique ordered highVoltageOverride : nmeta.Float [1 ]
          unique ordered regBranchKind : RegulationBranchKind [0..1]
          unique ordered normalOpen : nmeta.Boolean [1 ]
          unique ordered regBranchEnd : nmeta.Integer [1 ]
          unique ordered vRegLineLine : nmeta.Boolean [1 ]
          unique ordered switchOperationCycle : nmeta.Float [1 ]
          unique ordered localOffLevel : nmeta.String [1 ]
          unique ordered sensingPhaseCode : cimCore.PhaseCode [0..1]
          unique ordered localControlKind : ShuntImpedanceLocalControlKind [0..1]
          unique ordered branchDirect : nmeta.Integer [1 ]
          unique ordered maxSwitchOperationCount : nmeta.Integer [1 ]
          unique ordered localOverride : nmeta.Boolean [1 ]
          unique ordered localOnLevel : nmeta.String [1 ]
          unique ordered regBranch : nmeta.String [1 ]
          unique ordered controlKind : ShuntImpedanceControlKind [0..1]
          unique ordered reference ShuntCompensatorInfos : ShuntCompensatorInfo [0..*] opposite ShuntImpedanceInfo
        }
        class Cabinet : cimAssets.AssetContainer
        {
        }
        class ComEquipmentInfo : AssetInfo
        {
          unique ordered reference DeviceFunctions : cimMetering.DeviceFunction [0..*] opposite ComEquipmentAsset
        }
        class BreakerInfo : SwitchInfo
        {
          unique ordered phaseTrip : nmeta.Float [1 ]
        }
        class GeneratorAsset : ElectricalAsset
        {
        }
        enum ShuntImpedanceControlKind
        {
          fixed
          localOnly = 1
          remoteOnly = 2
          remoteWithLocalOverride = 3
        }
        class ElectricalInfo : AssetInfo
        {
          unique ordered wireCount : nmeta.Integer [1 ]
          unique ordered isConnected : nmeta.Boolean [1 ]
          unique ordered frequency : nmeta.Float [1 ]
          unique ordered b0 : nmeta.Float [1 ]
          unique ordered r0 : nmeta.Float [1 ]
          unique ordered bil : nmeta.Float [1 ]
          unique ordered phaseCount : nmeta.Integer [1 ]
          unique ordered x0 : nmeta.Float [1 ]
          unique ordered g0 : nmeta.Float [1 ]
          unique ordered phaseCode : cimCore.PhaseCode [0..1]
          unique ordered ratedCurrent : nmeta.Float [1 ]
          unique ordered x : nmeta.Float [1 ]
          unique ordered r : nmeta.Float [1 ]
          unique ordered ratedApparentPower : nmeta.Float [1 ]
          unique ordered g : nmeta.Float [1 ]
          unique ordered b : nmeta.Float [1 ]
          unique ordered ratedVoltage : nmeta.Float [1 ]
          unique ordered reference ElectricalAssetModels : cimInfAssetModels.ElectricalAssetModel [0..*] opposite ElectricalInfos
          unique ordered reference ElectricalAssets : ElectricalAsset [0..*] opposite ElectricalInfos
          unique ordered reference ElectricalTypeAssets : cimInfTypeAsset.ElectricalTypeAsset [0..*] opposite ElectricalInfos
        }
        enum FailureIsolationMethodKind
        {
          breakerOperation
          fuse = 1
          other = 2
          manuallyIsolated = 3
          burnedInTheClear = 4
        }
        class WindingInsulation : cimCore.IdentifiedObject
        {
          unique ordered insulationResistance : nmeta.String [1 ]
          unique ordered leakageReactance : nmeta.Float [1 ]
          unique ordered insulationPFStatus : nmeta.String [1 ]
          unique ordered reference ToWinding : cimWiresExt.DistributionTransformerWinding [0..1] opposite ToWindingInsulations
          unique ordered reference Ground : cimWires.Ground [0..1] opposite WindingInsulations
          unique ordered reference TransformerObservation : TransformerObservation [0..1] opposite WindingInsulationPFs
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference FromWinding : cimWiresExt.DistributionTransformerWinding [0..1] opposite FromWindingInsulations
        }
        enum UndergroundStructureKind
        {
          trench
          enclosure = 1
          pad = 2
          burd = 3
          pullbox = 4
          subsurfaceEnclosure = 5
          tunnel = 6
          manhole = 7
          vault = 8
          handhole = 9
        }
        class ConductorAsset : cimAssets.Asset
        {
          unique ordered groundingMethod : nmeta.String [1 ]
          unique ordered insulated : nmeta.Boolean [1 ]
          unique ordered isHorizontal : nmeta.Boolean [1 ]
          unique ordered reference CircuitSection : cimInfOperations.CircuitSection [0..1] opposite ConductorAssets
          unique ordered reference ConductorSegment : cimWiresExt.DistributionLineSegment [0..1] opposite ConductorAssets
        }
        enum SubstationFunctionKind
        {
          generation
          other = 1
          industrial = 2
          transmission = 3
          subTransmission = 4
          distribution = 5
        }
        class TransformerAsset : cimAssets.Asset
        {
          unique ordered reconditionedDateTime : nmeta.DateTime [1 ]
          unique ordered reference PowerRatings : PowerRating [0..*] opposite TransformerAssets
          unique ordered reference TransformerObservations : TransformerObservation [0..*] opposite TransformerAsset
          unique ordered reference TransformerAssetModel : cimInfAssetModels.TransformerAssetModel [0..1] opposite TransformerAssets
          unique ordered reference TransformerInfo : cimAssetModels.TransformerInfo [0..1] opposite TransformerAssets
        }
        class AssetPropertyCurve : cimCore.Curve
        {
          unique ordered reference Specification : Specification [0..1] opposite AssetPropertyCurves
          unique ordered reference Assets : cimAssets.Asset [0..*] opposite AssetPropertyCurves
        }
        class PowerRating : cimCore.IdentifiedObject
        {
          unique ordered coolingKind : CoolingKind [0..1]
          unique ordered powerRating : nmeta.Float [1 ]
          unique ordered stage : nmeta.Integer [1 ]
          unique ordered reference TransformerAssets : TransformerAsset [0..*] opposite PowerRatings
        }
        class AssetInfo : cimCore.IdentifiedObject
        {
          unique ordered reference Asset : cimAssets.Asset [0..1] opposite AssetInfo
          unique ordered reference TypeAsset : cimInfTypeAsset.TypeAsset [0..1] opposite AssetInfo
          unique ordered reference AssetModel : cimAssetModels.AssetModel [0..1] opposite AssetInfo
          unique ordered reference DimensionsInfo : DimensionsInfo [0..1] opposite AssetInfos
        }
        enum CoolingKind
        {
          selfCooling
          forcedOilAndAir = 1
          forcedAir = 2
          other = 3
        }
        class JointInfo : ElectricalInfo
        {
          unique ordered fillKind : JointFillKind [0..1]
          unique ordered configurationKind : JointConfigurationKind [0..1]
          unique ordered insulation : nmeta.String [1 ]
        }
        class MountingConnection : cimCore.IdentifiedObject
        {
          unique ordered reference StructureInfos : StructureInfo [0..*] opposite MountingConnections
          unique ordered reference MountingPoints : MountingPoint [0..*] opposite Connections
        }
        class SubstationInfo : AssetInfo
        {
          unique ordered function : SubstationFunctionKind [0..1]
        }
        enum PolePreservativeKind
        {
          cellon
          chemonite = 1
          unknown = 2
          other = 3
          creosote = 4
          penta = 5
          naphthena = 6
        }
        class ProtectionEquipmentInfo : ElectricalInfo
        {
          unique ordered phaseTrip : nmeta.Float [1 ]
          unique ordered groundTrip : nmeta.Float [1 ]
        }
        enum PoleTreatmentKind
        {
          grayStain
          other = 1
          unknown = 2
          penta = 3
          greenStain = 4
          natural = 5
          butt = 6
          full = 7
        }
        class SurgeProtectorInfo : ElectricalInfo
        {
          unique ordered nominalDesignVoltage : nmeta.Float [1 ]
          unique ordered maxCurrentRating : nmeta.Float [1 ]
          unique ordered maxContinousOperatingVoltage : nmeta.Float [1 ]
          unique ordered maxEnergyAbsorption : nmeta.Float [1 ]
        }
        enum FaultIndicatorResetKind
        {
          remote
          other = 1
          automatic = 2
          manual = 3
        }
        class UndergroundStructureInfo : StructureInfo
        {
          unique ordered material : nmeta.String [1 ]
          unique ordered hasVentilation : nmeta.Boolean [1 ]
          unique ordered sealingWarrantyExpiresDate : nmeta.String [1 ]
          unique ordered kind : UndergroundStructureKind [0..1]
        }
        enum FACTSDeviceKind
        {
          tcvl
          svc = 1
          upfc = 2
          tcsc = 3
          statcom = 4
          tcpar = 5
          tssc = 6
          tsbr = 7
        }
        class Procedure : cimCommon.Document
        {
          unique ordered kind : ProcedureKind [0..1]
          unique ordered sequenceNumber : nmeta.String [1 ]
          unique ordered corporateCode : nmeta.String [1 ]
          unique ordered instruction : nmeta.String [1 ]
          unique ordered reference Limits : cimMeas.Limit [0..*] opposite Procedures
          unique ordered reference CompatibleUnits : cimInfWork.CompatibleUnit [0..*] opposite Procedures
          unique ordered reference ProcedureDataSets : ProcedureDataSet [0..*] opposite Procedure
          unique ordered reference ProcedureValues : cimCommon.UserAttribute [0..*] opposite Procedure
        }
        enum StructureSupportKind
        {
          guy
          anchor = 1
        }
        class Medium : cimCore.IdentifiedObject
        {
          unique ordered volumeSpec : nmeta.Float [1 ]
          unique ordered kind : MediumKind [0..1]
          unique ordered reference Assets : cimAssets.Asset [0..*] opposite Mediums
          unique ordered reference Specification : Specification [0..1] opposite Mediums
        }
        class StructureInfo : AssetInfo
        {
          unique ordered weedRemovedDate : nmeta.String [1 ]
          unique ordered fumigantName : nmeta.String [1 ]
          unique ordered fumigantAppliedDate : nmeta.String [1 ]
          unique ordered removeWeed : nmeta.Boolean [1 ]
          unique ordered height : nmeta.Float [1 ]
          unique ordered materialKind : StructureMaterialKind [0..1]
          unique ordered ratedVoltage : nmeta.Float [1 ]
          unique ordered reference StructureSupportInfos : StructureSupportInfo [0..*] opposite SecuredStructure
          unique ordered reference MountingConnections : MountingConnection [0..*] opposite StructureInfos
        }
        class FACTSDeviceInfo : ElectricalInfo
        {
          unique ordered kind : FACTSDeviceKind [0..1]
        }
        class SwitchInfo : ElectricalInfo
        {
          unique ordered gang : nmeta.Boolean [1 ]
          unique ordered poleCount : nmeta.Integer [1 ]
          unique ordered interruptingRating : nmeta.Float [1 ]
          unique ordered dielectricStrength : nmeta.Float [1 ]
          unique ordered loadBreak : nmeta.Boolean [1 ]
          unique ordered minimumCurrent : nmeta.Float [1 ]
          unique ordered withstandCurrent : nmeta.Float [1 ]
          unique ordered makingCapacity : nmeta.Float [1 ]
          unique ordered remote : nmeta.Boolean [1 ]
        }
        class ProcedureDataSet : cimCommon.Document
        {
          unique ordered completedDateTime : nmeta.DateTime [1 ]
          unique ordered reference MeasurementValues : cimMeas.MeasurementValue [0..*] opposite ProcedureDataSets
          unique ordered reference TransformerObservations : TransformerObservation [0..*] opposite ProcedureDataSets
          unique ordered reference Properties : cimCommon.UserAttribute [0..*] opposite ProcedureDataSets
          unique ordered reference Procedure : Procedure [0..1] opposite ProcedureDataSets
        }
        enum VehicleUsageKind
        {
          crew
          contractor = 1
          user = 2
          other = 3
        }
        class StreetlightInfo : ElectricalInfo
        {
          unique ordered lightRating : nmeta.Float [1 ]
          unique ordered armLength : nmeta.Float [1 ]
          unique ordered lampKind : StreetlightLampKind [0..1]
          unique ordered reference Pole : PoleInfo [0..1] opposite Streetlights
        }
        class DimensionsInfo : cimCore.IdentifiedObject
        {
          unique ordered orientation : nmeta.String [1 ]
          unique ordered sizeWidth : nmeta.Float [1 ]
          unique ordered sizeDepth : nmeta.Float [1 ]
          unique ordered sizeDiameter : nmeta.Float [1 ]
          unique ordered sizeLength : nmeta.Float [1 ]
          unique ordered reference Locations : cimCommon.Location [0..*] opposite DimensionsInfo
          unique ordered reference Specifications : Specification [0..*] opposite DimensionsInfos
          unique ordered reference AssetInfos : AssetInfo [0..*] opposite DimensionsInfo
        }
        class WorkEquipmentInfo : AssetInfo
        {
          unique ordered reference Crew : cimInfWork.Crew [0..1] opposite WorkEquipmentAssets
          unique ordered reference Usages : cimInfWork.Usage [0..*] opposite WorkEquipmentAsset
        }
        class CurrentTransformerInfo : ElectricalInfo
        {
          unique ordered accuracyClass : nmeta.String [1 ]
          unique ordered ctClass : nmeta.String [1 ]
          unique ordered coreBurden : nmeta.Float [1 ]
          unique ordered primaryFlsRating : nmeta.Float [1 ]
          unique ordered accuracyLimit : nmeta.Float [1 ]
          unique ordered kneePointCurrent : nmeta.Float [1 ]
          unique ordered usage : nmeta.String [1 ]
          unique ordered secondaryFlsRating : nmeta.Float [1 ]
          unique ordered tertiaryFlsRating : nmeta.Float [1 ]
          unique ordered coreCount : nmeta.Integer [1 ]
          unique ordered kneePointVoltage : nmeta.Float [1 ]
          unique ordered reference maxRatio : cimInfCommon.Ratio [0..1]
          unique ordered reference primaryRatio : cimInfCommon.Ratio [0..1]
          unique ordered reference tertiaryRatio : cimInfCommon.Ratio [0..1]
          unique ordered reference nominalRatio : cimInfCommon.Ratio [0..1]
          unique ordered reference secondaryRatio : cimInfCommon.Ratio [0..1]
        }
        class StructureSupportInfo : AssetInfo
        {
          unique ordered anchorKind : AnchorKind [0..1]
          unique ordered kind : StructureSupportKind [0..1]
          unique ordered size : nmeta.String [1 ]
          unique ordered anchorRodCount : nmeta.Integer [1 ]
          unique ordered length : nmeta.Float [1 ]
          unique ordered anchorRodLength : nmeta.Float [1 ]
          unique ordered direction : nmeta.Float [1 ]
          unique ordered reference SecuredStructure : StructureInfo [0..1] opposite StructureSupportInfos
        }
        enum RegulationBranchKind
        {
          sectionner
          breaker = 1
          transformer = 2
          recloser = 3
          switch = 4
          other = 5
          fuse = 6
          line = 7
        }
        class ElectricalAsset : cimAssets.Asset
        {
          unique ordered phaseCode : cimCore.PhaseCode [0..1]
          unique ordered isConnected : nmeta.Boolean [1 ]
          unique ordered reference ConductingEquipment : cimCore.ConductingEquipment [0..1] opposite ElectricalAssets
          unique ordered reference ElectricalInfos : ElectricalInfo [0..*] opposite ElectricalAssets
        }
        class FailureEvent : cimCommon.ActivityRecord
        {
          unique ordered failureIsolationMethod : FailureIsolationMethodKind [0..1]
          unique ordered corporateCode : nmeta.String [1 ]
          unique ordered faultLocatingMethod : nmeta.String [1 ]
          unique ordered location : nmeta.String [1 ]
        }
        enum TowerConstructionKind
        {
          suspension
          tension = 1
        }
        class RecloserInfo : SwitchInfo
        {
          unique ordered phaseTripRating : nmeta.Float [1 ]
          unique ordered groundTripNormalEnabled : nmeta.Boolean [1 ]
          unique ordered groundTripRating : nmeta.Float [1 ]
          unique ordered recloseLockoutCount : nmeta.Integer [1 ]
          unique ordered groundTripCapable : nmeta.Boolean [1 ]
        }
        class TowerInfo : StructureInfo
        {
          unique ordered constructionKind : TowerConstructionKind [0..1]
        }
        enum BushingInsulationPfTestKind
        {
          c1
          c2 = 1
        }
        class TestDataSet : ProcedureDataSet
        {
          unique ordered specimenToLabDateTime : nmeta.DateTime [1 ]
          unique ordered specimenID : nmeta.String [1 ]
          unique ordered conclusion : nmeta.String [1 ]
        }
        class Specification : cimCommon.Document
        {
          unique ordered reference AssetProperites : cimCommon.UserAttribute [0..*] opposite PropertySpecification
          unique ordered reference ReliabilityInfos : ReliabilityInfo [0..*] opposite Specification
          unique ordered reference Ratings : cimCommon.UserAttribute [0..*] opposite RatingSpecification
          unique ordered reference QualificationRequirements : cimInfWork.QualificationRequirement [0..*] opposite Specifications
          unique ordered reference AssetPropertyCurves : AssetPropertyCurve [0..*] opposite Specification
          unique ordered reference DimensionsInfos : DimensionsInfo [0..*] opposite Specifications
          unique ordered reference Mediums : Medium [0..*] opposite Specification
        }
        enum BushingInsulationKind
        {
          other
          paperoil = 1
          solidPorcelain = 2
          compound = 3
        }
        class CompositeSwitchInfo : ElectricalInfo
        {
          unique ordered kind : CompositeSwitchKind [0..1]
          unique ordered initOpMode : nmeta.String [1 ]
          unique ordered gang : nmeta.Boolean [1 ]
          unique ordered switchStateCount : nmeta.Integer [1 ]
          unique ordered interruptingRating : nmeta.Float [1 ]
          unique ordered remote : nmeta.Boolean [1 ]
        }
        class Facility : cimAssets.AssetContainer
        {
          unique ordered kind : nmeta.String [1 ]
        }
        class FaultIndicatorInfo : ElectricalInfo
        {
          unique ordered resetKind : FaultIndicatorResetKind [0..1]
        }
        class ReliabilityInfo : cimCore.IdentifiedObject
        {
          unique ordered momFailureRate : nmeta.Float [1 ]
          unique ordered mTTR : nmeta.Float [1 ]
          unique ordered reference Assets : cimAssets.Asset [0..*] opposite ReliabilityInfos
          unique ordered reference Specification : Specification [0..1] opposite ReliabilityInfos
        }
        class TransformerObservation : cimCore.IdentifiedObject
        {
          unique ordered oilIFT : nmeta.String [1 ]
          unique ordered hotSpotTemp : nmeta.Float [1 ]
          unique ordered oilDielectricStrength : nmeta.Float [1 ]
          unique ordered topOilTemp : nmeta.Float [1 ]
          unique ordered pumpVibration : nmeta.String [1 ]
          unique ordered bushingTemp : nmeta.Float [1 ]
          unique ordered waterContent : nmeta.String [1 ]
          unique ordered freqResp : nmeta.String [1 ]
          unique ordered furfuralDP : nmeta.String [1 ]
          unique ordered oilLevel : nmeta.String [1 ]
          unique ordered oilColor : nmeta.String [1 ]
          unique ordered dga : nmeta.String [1 ]
          unique ordered oilNeutralizationNumber : nmeta.String [1 ]
          unique ordered reference TransformerAsset : TransformerAsset [0..1] opposite TransformerObservations
          unique ordered reference Transformer : cimWiresExt.DistributionTransformer [0..1] opposite TransformerObservations
          unique ordered reference ProcedureDataSets : ProcedureDataSet [0..*] opposite TransformerObservations
          unique ordered reference BushingInsultationPFs : BushingInsulationPF [0..*] opposite TransformerObservation
          unique ordered reference WindingInsulationPFs : WindingInsulation [0..*] opposite TransformerObservation
          unique ordered reference status : cimCommon.Status [0..1]
        }
        class ToolInfo : AssetInfo
        {
          unique ordered lastCalibrationDate : nmeta.String [1 ]
          unique ordered reference Crew : cimInfWork.Crew [0..1] opposite Tools
        }
        class DuctBankInfo : AssetInfo
        {
          unique ordered circuitCount : nmeta.Integer [1 ]
          unique ordered reference DuctInfos : DuctInfo [0..*] opposite DuctBankInfo
        }
        class VehicleInfo : AssetInfo
        {
          unique ordered usageKind : VehicleUsageKind [0..1]
          unique ordered odometerReadDateTime : nmeta.DateTime [1 ]
          unique ordered odometerReading : nmeta.Float [1 ]
          unique ordered reference Crew : cimInfWork.Crew [0..1] opposite Vehicles
        }
        class BushingInsulationPF : cimCore.IdentifiedObject
        {
          unique ordered testKind : BushingInsulationPfTestKind [0..1]
          unique ordered reference BushingInfo : BushingInfo [0..1] opposite BushingInsulationPFs
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference TransformerObservation : TransformerObservation [0..1] opposite BushingInsultationPFs
        }
        enum CompositeSwitchKind
        {
          regulatorBypass
          throwOver = 1
          ugMultiSwitch = 2
          gral = 3
          other = 4
          escoThrowOver = 5
          ral = 6
        }
        class BushingInfo : AssetInfo
        {
          unique ordered c2PowerFactor : nmeta.Float [1 ]
          unique ordered c2Capacitance : nmeta.Float [1 ]
          unique ordered c1Capacitance : nmeta.Float [1 ]
          unique ordered c1PowerFactor : nmeta.Float [1 ]
          unique ordered insulationKind : BushingInsulationKind [0..1]
          unique ordered reference BushingInsulationPFs : BushingInsulationPF [0..*] opposite BushingInfo
          unique ordered reference Terminal : cimCore.Terminal [0..1] opposite BushingInfo
        }
        enum StructureMaterialKind
        {
          steel
          concrete = 1
          wood = 2
          other = 3
        }
        enum MediumKind
        {
          liquid
          gas = 1
          solid = 2
        }
        class AssetAssetRole : cimInfCommon.Role
        {
          unique ordered reference ToAsset : cimAssets.Asset [0..1] opposite FromAssetRoles
          unique ordered reference FromAsset : cimAssets.Asset [0..1] opposite ToAssetRoles
        }
        class PoleInfo : StructureInfo
        {
          unique ordered treatedDateTime : nmeta.DateTime [1 ]
          unique ordered breastBlock : nmeta.Boolean [1 ]
          unique ordered classification : nmeta.String [1 ]
          unique ordered preservativeKind : PolePreservativeKind [0..1]
          unique ordered jpaReference : nmeta.String [1 ]
          unique ordered baseKind : PoleBaseKind [0..1]
          unique ordered diameter : nmeta.Float [1 ]
          unique ordered treatmentKind : PoleTreatmentKind [0..1]
          unique ordered construction : nmeta.String [1 ]
          unique ordered length : nmeta.Float [1 ]
          unique ordered speciesType : nmeta.String [1 ]
          unique ordered reference Streetlights : StreetlightInfo [0..*] opposite Pole
        }
        enum AnchorKind
        {
          rod
          concrete = 1
          helix = 2
          multiHelix = 3
          screw = 4
          other = 5
          unknown = 6
        }
        enum JointConfigurationKind
        {
          wires1to1
          wires2to1 = 1
          other = 2
          wires3to1 = 3
        }
        class TapChangerAsset : cimAssets.Asset
        {
          unique ordered reference TapChangerAssetModel : cimInfAssetModels.TapChangerAssetModel [0..1] opposite TapChangerAssets
        }
        enum FacilityKind
        {
          generation
          building = 1
          plant = 2
          storage = 3
          switching = 4
        }

      }

      namespace InfGMLSupport ( cimInfGMLSupport ) = http://iec.ch/TC57/2009/CIM-schema-cim14#InfGMLSupport
      {
        class GmlSelector : cimCore.IdentifiedObject
        {
          unique ordered reference GmlDiagramObjects : GmlDiagramObject [0..*] opposite GmlSelectors
          unique ordered reference ChangeItems : cimInfOperations.ChangeItem [0..*] opposite GmlSelector
        }
        class GmlLabelPlacement : cimCore.IdentifiedObject
        {
          unique ordered type : nmeta.String [1 ]
          unique ordered offset : nmeta.String [1 ]
          unique ordered anchorY : nmeta.String [1 ]
          unique ordered anchorX : nmeta.String [1 ]
          unique ordered rotation : nmeta.String [1 ]
          unique ordered displacementY : nmeta.String [1 ]
          unique ordered displacementX : nmeta.String [1 ]
          unique ordered reference GmlTextSymbols : GmlTextSymbol [0..*] opposite GmlLabelPlacement
        }
        class GmlPolygonGeometry : GmlDiagramObject
        {
        }
        class GmlColour : cimCore.IdentifiedObject
        {
          unique ordered green : nmeta.String [1 ]
          unique ordered red : nmeta.String [1 ]
          unique ordered blue : nmeta.String [1 ]
          unique ordered reference GmlStrokes : GmlStroke [0..*] opposite GmlColour
          unique ordered reference GmlFonts : GmlFont [0..*] opposite GmlColour
          unique ordered reference GmlFills : GmlFill [0..*] opposite GmlColour
        }
        class GmlFeatureStyle : cimCore.IdentifiedObject
        {
          unique ordered featureConstraint : nmeta.String [1 ]
          unique ordered semanticTypeIdentifier : nmeta.String [1 ]
          unique ordered version : nmeta.String [1 ]
          unique ordered featureTypeName : nmeta.String [1 ]
          unique ordered queryGrammar : QueryGrammarKind [0..1]
          unique ordered featureType : nmeta.String [1 ]
          unique ordered baseType : nmeta.String [1 ]
          unique ordered reference GmlSymbols : GmlSymbol [0..*] opposite GmlFeatureStyles
          unique ordered reference GmlLabelStyles : GmlLabelStyle [0..*] opposite GmlFeatureStyle
          unique ordered reference GmlGeometryStyles : GmlGeometryStyle [0..*] opposite GmlFeatureStyle
          unique ordered reference GmlFeatureTypes : GmlFeatureType [0..*] opposite GmlFeatureStyles
          unique ordered reference GmlTobologyStyles : GmlTopologyStyle [0..*] opposite GmlFeatureStyle
        }
        class GmlLineGeometry : GmlDiagramObject
        {
          unique ordered sourceSide : nmeta.String [1 ]
        }
        class GmlFont : cimCore.IdentifiedObject
        {
          unique ordered weight : nmeta.String [1 ]
          unique ordered family : nmeta.String [1 ]
          unique ordered style : nmeta.String [1 ]
          unique ordered absoluteSize : nmeta.Boolean [1 ]
          unique ordered size : nmeta.String [1 ]
          unique ordered reference GmlTextSymbols : GmlTextSymbol [0..*] opposite GmlFont
          unique ordered reference GmlColour : GmlColour [0..1] opposite GmlFonts
          unique ordered reference GmlSvgParameters : GmlSvgParameter [0..*] opposite GmlFonts
        }
        class GmlPointGeometry : GmlDiagramObject
        {
        }
        class GmlFill : cimCore.IdentifiedObject
        {
          unique ordered opacity : nmeta.Float [1 ]
          unique ordered reference GmlPolygonSymbols : GmlPolygonSymbol [0..*] opposite GmlFill
          unique ordered reference GmlSvgParameters : GmlSvgParameter [0..*] opposite GmlFills
          unique ordered reference GmlTextSymbols : GmlTextSymbol [0..*] opposite GmlFill
          unique ordered reference GmlMarks : GmlMark [0..*] opposite GmlFIlls
          unique ordered reference GmlColour : GmlColour [0..1] opposite GmlFills
        }
        enum DiagramKind
        {
          designSketch
          other = 1
          geographic = 2
          internalView = 3
          schematic = 4
        }
        class GmlStroke : cimCore.IdentifiedObject
        {
          unique ordered lineCap : nmeta.String [1 ]
          unique ordered opacity : nmeta.Float [1 ]
          unique ordered width : nmeta.Float [1 ]
          unique ordered dashArray : nmeta.String [1 ]
          unique ordered lineStyle : nmeta.String [1 ]
          unique ordered dashOffset : nmeta.String [1 ]
          unique ordered linejoin : nmeta.String [1 ]
          unique ordered reference GmlColour : GmlColour [0..1] opposite GmlStrokes
          unique ordered reference GmlSvgParameters : GmlSvgParameter [0..*] opposite GmlStokes
          unique ordered reference GmlPolygonSymbols : GmlPolygonSymbol [0..*] opposite GmlStroke
          unique ordered reference GmlLineSymbols : GmlLineSymbol [0..*] opposite GmlStroke
          unique ordered reference GmlMarks : GmlMark [0..*] opposite GmlStrokes
        }
        class Diagram : cimCommon.Document
        {
          unique ordered kind : DiagramKind [0..1]
          unique ordered reference CoordinateSystem : cimCommon.CoordinateSystem [0..1] opposite Diagrams
          unique ordered reference GmlDiagramObjects : GmlDiagramObject [0..*] opposite Diagrams
          unique ordered reference DesignLocations : cimInfWork.DesignLocation [0..*] opposite Diagrams
        }
        class GmlTopologyStyle : cimCore.IdentifiedObject
        {
          unique ordered reference GmlLableStyle : GmlLabelStyle [0..1] opposite GmlTopologyStyles
          unique ordered reference GmlFeatureStyle : GmlFeatureStyle [0..1] opposite GmlTobologyStyles
        }
        class GmlPolygonSymbol : GmlSymbol
        {
          unique ordered reference GmlDiagramObject : GmlDiagramObject [0..1] opposite GmlPolygonSymbols
          unique ordered reference GmlStroke : GmlStroke [0..1] opposite GmlPolygonSymbols
          unique ordered reference GmlFill : GmlFill [0..1] opposite GmlPolygonSymbols
        }
        class GmlRasterSymbol : GmlSymbol
        {
          unique ordered graySourcename : nmeta.String [1 ]
          unique ordered reliefFactor : nmeta.String [1 ]
          unique ordered overlapbehaviour : nmeta.String [1 ]
          unique ordered opacity : nmeta.Float [1 ]
          unique ordered greenSourceName : nmeta.String [1 ]
          unique ordered brighnessOnly : nmeta.Boolean [1 ]
          unique ordered blueSourcename : nmeta.String [1 ]
          unique ordered redSourcename : nmeta.String [1 ]
          unique ordered reference GmlDiagramObject : GmlDiagramObject [0..1] opposite GmlRasterSymbols
        }
        class GmlValue : cimCore.IdentifiedObject
        {
          unique ordered dateTime : nmeta.DateTime [1 ]
          unique ordered value : nmeta.Float [1 ]
          unique ordered timePeriod : nmeta.String [1 ]
          unique ordered reference GmlObservation : GmlObservation [0..1] opposite GmlValues
          unique ordered reference MeasurementValue : cimMeas.MeasurementValue [0..1] opposite GmlValues
        }
        class Map : Diagram
        {
          unique ordered mapLocGrid : nmeta.String [1 ]
          unique ordered pageNumber : nmeta.Integer [1 ]
        }
        class GmlGraphic : cimCore.IdentifiedObject
        {
          unique ordered opacity : nmeta.Float [1 ]
          unique ordered minSize : nmeta.Integer [1 ]
          unique ordered symbolID : nmeta.String [1 ]
          unique ordered xScale : nmeta.Float [1 ]
          unique ordered size : nmeta.Integer [1 ]
          unique ordered yScale : nmeta.Float [1 ]
          unique ordered rotation : nmeta.Float [1 ]
          unique ordered reference GmlMarks : GmlMark [0..*] opposite GmlGraphics
          unique ordered reference GmlPointSymbols : GmlPointSymbol [0..*] opposite GmlGraphic
        }
        class GmlSvgParameter : cimCore.IdentifiedObject
        {
          unique ordered value : nmeta.String [1 ]
          unique ordered attribute : nmeta.String [1 ]
          unique ordered reference GmlStokes : GmlStroke [0..*] opposite GmlSvgParameters
          unique ordered reference GmlFills : GmlFill [0..*] opposite GmlSvgParameters
          unique ordered reference GmlFonts : GmlFont [0..*] opposite GmlSvgParameters
        }
        class GmlBaseSymbol : cimCore.IdentifiedObject
        {
          unique ordered reference GmlSymbols : GmlSymbol [0..*] opposite GmlBaseSymbol
        }
        class GmlPointSymbol : GmlSymbol
        {
          unique ordered reference GmlGraphic : GmlGraphic [0..1] opposite GmlPointSymbols
          unique ordered reference GmlDiagramObject : GmlDiagramObject [0..1] opposite GmlPointSymbols
        }
        class GmlSymbol : cimCore.IdentifiedObject
        {
          unique ordered level : nmeta.String [1 ]
          unique ordered type : nmeta.String [1 ]
          unique ordered version : nmeta.String [1 ]
          unique ordered reference GmlFeatureStyles : GmlFeatureStyle [0..*] opposite GmlSymbols
          unique ordered reference GmlBaseSymbol : GmlBaseSymbol [0..1] opposite GmlSymbols
        }
        class GmlMark : cimCore.IdentifiedObject
        {
          unique ordered wellKnownName : nmeta.String [1 ]
          unique ordered reference GmlGraphics : GmlGraphic [0..*] opposite GmlMarks
          unique ordered reference GmlFIlls : GmlFill [0..*] opposite GmlMarks
          unique ordered reference GmlStrokes : GmlStroke [0..*] opposite GmlMarks
        }
        class GmlPosition : cimCommon.PositionPoint
        {
        }
        class GmlGeometryStyle : cimCore.IdentifiedObject
        {
          unique ordered geometryType : nmeta.String [1 ]
          unique ordered symbol : nmeta.String [1 ]
          unique ordered geometryProperty : nmeta.String [1 ]
          unique ordered reference GmlLabelStyle : GmlLabelStyle [0..1] opposite GmlGeometryStyles
          unique ordered reference GmlFeatureStyle : GmlFeatureStyle [0..1] opposite GmlGeometryStyles
        }
        class GmlObservation : Element
        {
          unique ordered target : nmeta.String [1 ]
          unique ordered dateTime : nmeta.DateTime [1 ]
          unique ordered resultOf : nmeta.String [1 ]
          unique ordered using : nmeta.String [1 ]
          unique ordered reference GmlDiagramObjects : GmlDiagramObject [0..*] opposite GmlObservatins
          unique ordered reference ChangeItems : cimInfOperations.ChangeItem [0..*] opposite GmlObservation
          unique ordered reference GmlValues : GmlValue [0..*] opposite GmlObservation
        }
        class GmlTextSymbol : GmlSymbol
        {
          unique ordered property : nmeta.String [1 ]
          unique ordered label : nmeta.String [1 ]
          unique ordered minFontSize : nmeta.Integer [1 ]
          unique ordered fieldID : nmeta.String [1 ]
          unique ordered labelType : nmeta.String [1 ]
          unique ordered reference GmlHalo : GmlHalo [0..1] opposite GmlTextSymbols
          unique ordered reference GmlFont : GmlFont [0..1] opposite GmlTextSymbols
          unique ordered reference GmlFill : GmlFill [0..1] opposite GmlTextSymbols
          unique ordered reference GmlDiagramObject : GmlDiagramObject [0..1] opposite GmlTextSymbols
          unique ordered reference GmlLabelPlacement : GmlLabelPlacement [0..1] opposite GmlTextSymbols
        }
        class GmlDiagramObject : cimCore.IdentifiedObject
        {
          unique ordered reference GmlRasterSymbols : GmlRasterSymbol [0..*] opposite GmlDiagramObject
          unique ordered reference Diagrams : Diagram [0..*] opposite GmlDiagramObjects
          unique ordered reference GmlPointSymbols : GmlPointSymbol [0..*] opposite GmlDiagramObject
          unique ordered reference GmlPolygonSymbols : GmlPolygonSymbol [0..*] opposite GmlDiagramObject
          unique ordered reference GmlLineSymbols : GmlLineSymbol [0..*] opposite GmlDiagramObject
          unique ordered reference GmlTextSymbols : GmlTextSymbol [0..*] opposite GmlDiagramObject
          unique ordered reference CoordinateSystems : cimCommon.CoordinateSystem [0..*] opposite GmlDiagramObjects
          unique ordered reference GmlObservatins : GmlObservation [0..*] opposite GmlDiagramObjects
          unique ordered reference GmlSelectors : GmlSelector [0..*] opposite GmlDiagramObjects
        }
        enum QueryGrammarKind
        {
          xpath
          xquery = 1
          other = 2
        }
        class GmlHalo : cimCore.IdentifiedObject
        {
          unique ordered opacity : nmeta.Float [1 ]
          unique ordered radius : nmeta.String [1 ]
          unique ordered reference GmlTextSymbols : GmlTextSymbol [0..*] opposite GmlHalo
        }
        class GmlLabelStyle : cimCore.IdentifiedObject
        {
          unique ordered style : nmeta.String [1 ]
          unique ordered transform : nmeta.String [1 ]
          unique ordered labelExpression : nmeta.String [1 ]
          unique ordered reference GmlFeatureStyle : GmlFeatureStyle [0..1] opposite GmlLabelStyles
          unique ordered reference GmlGeometryStyles : GmlGeometryStyle [0..*] opposite GmlLabelStyle
          unique ordered reference GmlTopologyStyles : GmlTopologyStyle [0..*] opposite GmlLableStyle
        }
        class GmlFeatureType : cimCore.IdentifiedObject
        {
          unique ordered reference GmlFeatureStyles : GmlFeatureStyle [0..*] opposite GmlFeatureTypes
        }
        class GmlLineSymbol : GmlSymbol
        {
          unique ordered sourceSide : nmeta.String [1 ]
          unique ordered reference GmlDiagramObject : GmlDiagramObject [0..1] opposite GmlLineSymbols
          unique ordered reference GmlStroke : GmlStroke [0..1] opposite GmlLineSymbols
        }

      }

      namespace InfCore ( cimInfCore ) = http://iec.ch/TC57/2009/CIM-schema-cim14#InfCore
      {
        class ModelingAuthoritySet : cimCore.IdentifiedObject
        {
          unique ordered reference IdentifiedObjects : cimCore.IdentifiedObject [0..*] opposite ModelingAuthoritySet
          unique ordered reference ModelingAuthority : ModelingAuthority [0..1] opposite ModelingAuthoritySets
        }
        class ModelingAuthority : cimCore.IdentifiedObject
        {
          unique ordered reference ModelingAuthoritySets : ModelingAuthoritySet [0..*] opposite ModelingAuthority
        }

      }

      namespace MarketOperations ( cimMarketOperations ) = http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations
      {
        class NotificationTimeCurve : cimCore.Curve
        {
          unique ordered reference GeneratingBids : GeneratingBid [0..*] opposite NotificationTimeCurve
        }
        class EnergyPriceCurve : cimCore.Curve
        {
          unique ordered reference FTRs : FTR [0..*] opposite EnergyPriceCurve
          unique ordered reference EnergyTransactions : cimEnergyScheduling.EnergyTransaction [0..*] opposite EnergyPriceCurves
        }
        class Meter : cimCore.IdentifiedObject
        {
          unique ordered reference RegisteredResource : RegisteredResource [0..1] opposite Meters
        }
        class MarketStatement : cimCommon.Document
        {
          unique ordered tradeDate : nmeta.DateTime [1 ]
          unique ordered transactionDate : nmeta.DateTime [1 ]
          unique ordered referenceNumber : nmeta.String [1 ]
          unique ordered end : nmeta.DateTime [1 ]
          unique ordered start : nmeta.DateTime [1 ]
          unique ordered reference MarketStatementLineItem : MarketStatementLineItem [0..*] opposite MarketStatement
        }
        class ContingencyConstraintLimit : cimCore.Curve
        {
          unique ordered reference SecurityConstraintSum : SecurityConstraintSum [0..1] opposite ContingencyConstraintLimits
          unique ordered reference MWLimitSchedules : MWLimitSchedule [0..1] opposite SecurityConstraintLimit
          unique ordered reference Contingency : cimContingency.Contingency [0..1] opposite ContingencyConstraintLimit
        }
        class RegisteredGenerator : RegisteredResource
        {
          unique ordered lowControlLImit : nmeta.Float [1 ]
          unique ordered lowerControlRate : nmeta.Object [1 ]
          unique ordered raiseRampRate : nmeta.Object [1 ]
          unique ordered raiseControlRate : nmeta.Object [1 ]
          unique ordered maximumAllowableSpinningReserve : nmeta.Float [1 ]
          unique ordered maximumOperatingMW : nmeta.Float [1 ]
          unique ordered highControlLimit : nmeta.Float [1 ]
          unique ordered minimumOperatingMW : nmeta.Float [1 ]
          unique ordered lowerRampRate : nmeta.Object [1 ]
          unique ordered spinReserveRamp : nmeta.Object [1 ]
          unique ordered reference RampRateCurves : RampRateCurve [0..*] opposite GeneratingUnit
          unique ordered reference UnitInitialConditions : UnitInitialConditions [0..*] opposite GeneratingUnit
          unique ordered reference StartUpCostCurves : StartUpCostCurve [0..*] opposite RegisteredGenerators
          unique ordered reference GeneratingUnit : cimProduction.GeneratingUnit [0..1] opposite RegisteredGenerator
          unique ordered reference GeneratingBids : GeneratingBid [0..*] opposite RegisteredGenerator
        }
        class TransactionBid : Bid
        {
          unique ordered EnergyTransId : nmeta.String [1 ]
          unique ordered reference EnergyProfiles : cimEnergyScheduling.EnergyProfile [0..*] opposite TransactionBid
          unique ordered reference Delivery_Pnode : Pnode [0..1] opposite DeliveryTransactionBids
          unique ordered reference Receipt_Pnode : Pnode [0..1] opposite ReceiptTransactionBids
        }
        class SecurityConstraints : cimCore.IdentifiedObject
        {
          unique ordered minMW : nmeta.Float [1 ]
          unique ordered maxMW : nmeta.Float [1 ]
          unique ordered actualMW : nmeta.Float [1 ]
          unique ordered reference RTO : RTO [0..1] opposite SecurityConstraints
        }
        class ViolationLimit : cimMeas.Limit
        {
          unique ordered enforced : nmeta.Boolean [1 ]
          unique ordered reference Season : cimLoadModel.Season [0..1] opposite ViolationLimits
          unique ordered reference Measurement : cimMeas.Measurement [0..1] opposite ViolationLimits
          unique ordered reference Organisations : cimInfERPSupport.ErpOrganisation [0..*] opposite ViolationLimits
          unique ordered reference Flowgate : Flowgate [0..1] opposite ViolationLimits
        }
        class StartUpCostCurve : cimCore.Curve
        {
          unique ordered reference GeneratingBids : GeneratingBid [0..*] opposite StartUpCostCurve
          unique ordered reference RegisteredGenerators : RegisteredGenerator [0..*] opposite StartUpCostCurves
        }
        class DefaultConstraintLimit : cimCore.Curve
        {
          unique ordered reference SecurityConstraintSum : SecurityConstraintSum [0..1] opposite DefaultConstraintLimit
        }
        class BillDeterminant : cimCommon.Document
        {
          unique ordered precisionLevel : nmeta.String [1 ]
          unique ordered unitOfMeasure : nmeta.String [1 ]
          unique ordered calculationLevel : nmeta.String [1 ]
          unique ordered configVersion : nmeta.String [1 ]
          unique ordered numberInterval : nmeta.Integer [1 ]
          unique ordered reference UserAttributes : cimCommon.UserAttribute [0..*] opposite BillDeterminants
          unique ordered reference ChargeProfileData : ChargeProfileData [0..*] opposite BillDeterminant
          unique ordered reference ChargeProfile : ChargeProfile [0..1] opposite BillDeterminant
        }
        class LoadReductionPriceCurve : cimCore.Curve
        {
          unique ordered reference LoadBids : LoadBid [0..*] opposite LoadReductionPriceCurve
        }
        class ChargeProfile : cimEnergyScheduling.Profile
        {
          unique ordered type : nmeta.String [1 ]
          unique ordered unitOfMeasure : nmeta.String [1 ]
          unique ordered frequency : nmeta.String [1 ]
          unique ordered numberInterval : nmeta.Integer [1 ]
          unique ordered reference PassTroughBill : PassThroughBill [0..1] opposite ChargeProfiles
          unique ordered reference ChargeProfileData : ChargeProfileData [0..*] opposite ChargeProfile
          unique ordered reference BillDeterminant : BillDeterminant [0..1] opposite ChargeProfile
        }
        class Settlement : cimCommon.Document
        {
          unique ordered tradeDate : nmeta.DateTime [1 ]
          unique ordered reference Market : Market [0..1] opposite Settlements
          unique ordered reference ErpLedgerEntries : cimInfERPSupport.ErpLedgerEntry [0..*] opposite Settlements
          unique ordered reference ErpInvoiceLineItems : cimInfERPSupport.ErpInvoiceLineItem [0..*] opposite Settlements
        }
        class Market : cimCore.IdentifiedObject
        {
          unique ordered type : nmeta.String [1 ]
          unique ordered start : nmeta.DateTime [1 ]
          unique ordered rampIntervalNonSpinRes : nmeta.Float [1 ]
          unique ordered end : nmeta.DateTime [1 ]
          unique ordered timeIntervalLength : nmeta.Float [1 ]
          unique ordered rampIntervalReg : nmeta.Float [1 ]
          unique ordered rampIntervalSpinRes : nmeta.Float [1 ]
          unique ordered dst : nmeta.Boolean [1 ]
          unique ordered rampIntervalEnergy : nmeta.Float [1 ]
          unique ordered localTimeZone : nmeta.String [1 ]
          unique ordered reference MarketFactors : MarketFactors [0..*] opposite Market
          unique ordered reference MarketProducts : MarketProduct [0..*] opposite Market
          unique ordered reference RTO : RTO [0..1] opposite Markets
          unique ordered reference Settlements : Settlement [0..*] opposite Market
          unique ordered reference Bids : Bid [0..*] opposite Market
          unique ordered reference RegisteredResources : RegisteredResource [0..*] opposite Markets
        }
        class ReserveReq : ResourceGroupReq
        {
          unique ordered reference SensitivityPriceCurve : SensitivityPriceCurve [0..1] opposite ReserveReq
          unique ordered reference ReserveReqCurve : ReserveReqCurve [0..1] opposite ReserveReq
          unique ordered reference MarketProduct : MarketProduct [0..1] opposite ReserveReqs
        }
        class RegisteredResource : cimCore.IdentifiedObject
        {
          unique ordered rtoID : nmeta.String [1 ]
          unique ordered reference Markets : Market [0..*] opposite RegisteredResources
          unique ordered reference MarketProducts : MarketProduct [0..*] opposite RegisteredResources
          unique ordered reference Meters : Meter [0..*] opposite RegisteredResource
          unique ordered reference Pnode : Pnode [0..1] opposite RegisteredResources
          unique ordered reference Organisation : cimInfERPSupport.ErpOrganisation [0..1] opposite RegisteredResources
          unique ordered reference ResourceGroups : ResourceGroup [0..*] opposite RegisteredResources
        }
        class MarketProduct : cimCore.IdentifiedObject
        {
          unique ordered reference ProductBids : ProductBid [0..*] opposite MarketProduct
          unique ordered reference Market : Market [0..1] opposite MarketProducts
          unique ordered reference ReserveReqs : ReserveReq [0..*] opposite MarketProduct
          unique ordered reference RegisteredResources : RegisteredResource [0..*] opposite MarketProducts
        }
        class GeneratingBid : ResourceBid
        {
          unique ordered upTimeMin : nmeta.Float [1 ]
          unique ordered maximumEconomicMW : nmeta.Float [1 ]
          unique ordered upTimeMax : nmeta.Float [1 ]
          unique ordered startUpType : nmeta.Integer [1 ]
          unique ordered notificationTime : nmeta.Float [1 ]
          unique ordered maxEmergencyMW : nmeta.Float [1 ]
          unique ordered startupTime : nmeta.Float [1 ]
          unique ordered minimumEconomicMW : nmeta.Float [1 ]
          unique ordered minEmergencyMW : nmeta.Float [1 ]
          unique ordered noLoadCost : nmeta.Float [1 ]
          unique ordered minimumDownTime : nmeta.Float [1 ]
          unique ordered downTimeMax : nmeta.Float [1 ]
          unique ordered startUpRampRate : nmeta.Object [1 ]
          unique ordered operatingMode : nmeta.String [1 ]
          unique ordered reference RegisteredGenerator : RegisteredGenerator [0..1] opposite GeneratingBids
          unique ordered reference BidSet : BidSet [0..1] opposite GeneratingBids
          unique ordered reference StartUpTimeCurve : StartUpTimeCurve [0..1] opposite GeneratingBids
          unique ordered reference NotificationTimeCurve : NotificationTimeCurve [0..1] opposite GeneratingBids
          unique ordered reference StartUpCostCurve : StartUpCostCurve [0..1] opposite GeneratingBids
        }
        class TerminalConstraintTerm : ConstraintTerm
        {
          unique ordered reference Terminal : cimCore.Terminal [0..1] opposite TerminalConstraints
        }
        class RTO : cimInfERPSupport.ErpOrganisation
        {
          unique ordered reference Markets : Market [0..*] opposite RTO
          unique ordered reference SecurityConstraints : SecurityConstraints [0..*] opposite RTO
          unique ordered reference ResourceGroupReqs : ResourceGroupReq [0..*] opposite RTOs
          unique ordered reference SecurityConstraintsLinear : SecurityConstraintSum [0..*] opposite RTO
          unique ordered reference Pnodes : Pnode [0..*] opposite RTO
        }
        class ConstraintTerm : cimCore.IdentifiedObject
        {
          unique ordered factor : nmeta.String [1 ]
          unique ordered function : nmeta.String [1 ]
          unique ordered reference SecurityConstraintSum : SecurityConstraintSum [0..1] opposite ConstraintTerms
        }
        class PassThroughBill : cimCommon.Document
        {
          unique ordered billEnd : nmeta.DateTime [1 ]
          unique ordered effectiveDate : nmeta.DateTime [1 ]
          unique ordered serviceEnd : nmeta.DateTime [1 ]
          unique ordered isProfiled : nmeta.Boolean [1 ]
          unique ordered previousEnd : nmeta.DateTime [1 ]
          unique ordered amount : nmeta.Float [1 ]
          unique ordered timeZone : nmeta.String [1 ]
          unique ordered billedTo : nmeta.String [1 ]
          unique ordered isDisputed : nmeta.Boolean [1 ]
          unique ordered providedBy : nmeta.String [1 ]
          unique ordered billStart : nmeta.DateTime [1 ]
          unique ordered previousStart : nmeta.DateTime [1 ]
          unique ordered serviceStart : nmeta.DateTime [1 ]
          unique ordered productCode : nmeta.String [1 ]
          unique ordered billRunType : nmeta.String [1 ]
          unique ordered transactionType : nmeta.String [1 ]
          unique ordered tradeDate : nmeta.DateTime [1 ]
          unique ordered price : nmeta.Float [1 ]
          unique ordered taxAmount : nmeta.Float [1 ]
          unique ordered soldTo : nmeta.String [1 ]
          unique ordered transactionDate : nmeta.DateTime [1 ]
          unique ordered paidTo : nmeta.String [1 ]
          unique ordered quantity : nmeta.Object [1 ]
          unique ordered reference MarketStatementLineItem : MarketStatementLineItem [0..1] opposite PassThroughBill
          unique ordered reference UserAttributes : cimCommon.UserAttribute [0..*] opposite PassThroughBills
          unique ordered reference ChargeProfiles : ChargeProfile [0..*] opposite PassTroughBill
        }
        class Pnode : cimCore.IdentifiedObject
        {
          unique ordered beginPeriod : nmeta.DateTime [1 ]
          unique ordered type : nmeta.String [1 ]
          unique ordered isPublic : nmeta.Boolean [1 ]
          unique ordered endPeriod : nmeta.DateTime [1 ]
          unique ordered usage : nmeta.String [1 ]
          unique ordered reference ReceiptTransactionBids : TransactionBid [0..*] opposite Receipt_Pnode
          unique ordered reference RTO : RTO [0..1] opposite Pnodes
          unique ordered reference RegisteredResources : RegisteredResource [0..*] opposite Pnode
          unique ordered reference PnodeClearing : PnodeClearing [0..1] opposite Pnode
          unique ordered reference DeliveryTransactionBids : TransactionBid [0..*] opposite Delivery_Pnode
          unique ordered reference ConnectivityNode : cimCore.ConnectivityNode [0..1] opposite Pnode
          unique ordered reference FTRs : FTR [0..*] opposite Pnodes
          unique ordered reference Measurements : cimMeas.Measurement [0..*] opposite Pnode
        }
        class PnodeClearing : MarketFactors
        {
          unique ordered congestLMP : nmeta.Float [1 ]
          unique ordered costLMP : nmeta.Float [1 ]
          unique ordered lossLMP : nmeta.Float [1 ]
          unique ordered reference Pnode : Pnode [0..1] opposite PnodeClearing
        }
        class StartUpTimeCurve : cimCore.Curve
        {
          unique ordered reference GeneratingBids : GeneratingBid [0..*] opposite StartUpTimeCurve
        }
        class SecurityConstraintSum : MarketFactors
        {
          unique ordered reference ContingencyConstraintLimits : ContingencyConstraintLimit [0..*] opposite SecurityConstraintSum
          unique ordered reference DefaultConstraintLimit : DefaultConstraintLimit [0..1] opposite SecurityConstraintSum
          unique ordered reference BaseCaseConstraintLimit : BaseCaseConstraintLimit [0..1] opposite SecurityConstraintSum
          unique ordered reference ConstraintTerms : ConstraintTerm [0..*] opposite SecurityConstraintSum
          unique ordered reference RTO : RTO [0..1] opposite SecurityConstraintsLinear
        }
        class BaseCaseConstraintLimit : cimCore.Curve
        {
          unique ordered reference SecurityConstraintSum : SecurityConstraintSum [0..1] opposite BaseCaseConstraintLimit
        }
        class ProductBid : cimCore.IdentifiedObject
        {
          unique ordered reference Bid : Bid [0..1] opposite ProductBids
          unique ordered reference ProductBidClearing : ProductBidClearing [0..1] opposite ProductBids
          unique ordered reference BidPriceCurve : BidPriceCurve [0..1] opposite ProductBids
          unique ordered reference MarketProduct : MarketProduct [0..1] opposite ProductBids
        }
        class MWLimitSchedule : cimCore.Curve
        {
          unique ordered reference SecurityConstraintLimit : ContingencyConstraintLimit [0..1] opposite MWLimitSchedules
        }
        class MarketStatementLineItem : cimCore.IdentifiedObject
        {
          unique ordered currentAmount : nmeta.Float [1 ]
          unique ordered previousISOAmount : nmeta.Float [1 ]
          unique ordered quantityUOM : nmeta.String [1 ]
          unique ordered netISOAmount : nmeta.Float [1 ]
          unique ordered currentISOAmount : nmeta.Float [1 ]
          unique ordered previousQuantity : nmeta.Float [1 ]
          unique ordered previousAmount : nmeta.Float [1 ]
          unique ordered netISOQuantity : nmeta.Float [1 ]
          unique ordered netPrice : nmeta.Float [1 ]
          unique ordered currentISOQuantity : nmeta.Float [1 ]
          unique ordered currentPrice : nmeta.Float [1 ]
          unique ordered previsouPrice : nmeta.Float [1 ]
          unique ordered previousISOQuantity : nmeta.Float [1 ]
          unique ordered intervalDate : nmeta.DateTime [1 ]
          unique ordered netQuantity : nmeta.Float [1 ]
          unique ordered netAmount : nmeta.Float [1 ]
          unique ordered currentQuantity : nmeta.Float [1 ]
          unique ordered intervalNumber : nmeta.String [1 ]
          unique ordered reference UserAttributes : cimCommon.UserAttribute [0..*] opposite ErpStatementLineItems
          unique ordered reference ComponentMarketStatementLineItem : MarketStatementLineItem [0..*] opposite ContainerMarketStatementLineItem
          unique ordered reference PassThroughBill : PassThroughBill [0..1] opposite MarketStatementLineItem
          unique ordered reference MarketStatement : MarketStatement [0..1] opposite MarketStatementLineItem
          unique ordered reference ContainerMarketStatementLineItem : MarketStatementLineItem [0..1] opposite ComponentMarketStatementLineItem
        }
        class AncillaryServiceClearing : MarketFactors
        {
          unique ordered mcp : nmeta.Float [1 ]
          unique ordered clearedMW : nmeta.Float [1 ]
          unique ordered commodityType : nmeta.String [1 ]
          unique ordered reference MarketCaseClearing : MarketCaseClearing [0..1] opposite AncillaryServiceClearing
        }
        class BidSet : cimCore.IdentifiedObject
        {
          unique ordered reference GeneratingBids : GeneratingBid [0..*] opposite BidSet
        }
        class SecurityConstraintsClearing : MarketFactors
        {
          unique ordered mwLimit : nmeta.Float [1 ]
          unique ordered mwFlow : nmeta.Float [1 ]
          unique ordered shadowPrice : nmeta.Float [1 ]
        }
        class ProductBidClearing : MarketFactors
        {
          unique ordered clearedMW : nmeta.Float [1 ]
          unique ordered reference ProductBids : ProductBid [0..*] opposite ProductBidClearing
        }
        class ResourceBid : Bid
        {
          unique ordered startUpsMaxWeek : nmeta.Integer [1 ]
          unique ordered commodityType : nmeta.String [1 ]
          unique ordered energyMaxDay : nmeta.Float [1 ]
          unique ordered energyMinDay : nmeta.Float [1 ]
          unique ordered virtual : nmeta.Boolean [1 ]
          unique ordered shutDownsMaxWeek : nmeta.Integer [1 ]
          unique ordered shutDownsMaxDay : nmeta.Integer [1 ]
          unique ordered startUpsMaxDay : nmeta.Integer [1 ]
        }
        class CapacityBenefitMargin : cimEnergyScheduling.Profile
        {
          unique ordered reference Season : cimLoadModel.Season [0..1] opposite CapacityBenefitMargin
          unique ordered reference Flowgate : Flowgate [0..*] opposite CapacityBenefitMargin
        }
        class SchedulingCoordinator : cimInfERPSupport.ErpOrganisation
        {
        }
        class RampRateCurve : cimCore.Curve
        {
          unique ordered rampRateType : nmeta.String [1 ]
          unique ordered reference GeneratingUnit : RegisteredGenerator [0..*] opposite RampRateCurves
        }
        class BidClearing : Element
        {
          unique ordered startUpCost : nmeta.Float [1 ]
          unique ordered noLoadCost : nmeta.Float [1 ]
          unique ordered lostOpCost : nmeta.Float [1 ]
          unique ordered reference Bid : Bid [0..1] opposite BidClearing
        }
        class LoadBid : ResourceBid
        {
          unique ordered minLoadReduction : nmeta.Float [1 ]
          unique ordered dropRampRate : nmeta.Object [1 ]
          unique ordered minLoadReductionInterval : nmeta.Float [1 ]
          unique ordered minLoadReductionCost : nmeta.Float [1 ]
          unique ordered pickUpRampRate : nmeta.Object [1 ]
          unique ordered reqNoticeTime : nmeta.Float [1 ]
          unique ordered minLoad : nmeta.Float [1 ]
          unique ordered minTimeBetLoadRed : nmeta.Float [1 ]
          unique ordered shutdownCost : nmeta.Float [1 ]
          unique ordered reference LoadReductionPriceCurve : LoadReductionPriceCurve [0..1] opposite LoadBids
          unique ordered reference RegisteredLoad : RegisteredLoad [0..1] opposite LoadBids
        }
        class Bid : cimCommon.Document
        {
          unique ordered stopTime : nmeta.DateTime [1 ]
          unique ordered marketType : nmeta.String [1 ]
          unique ordered startTime : nmeta.DateTime [1 ]
          unique ordered reference ProductBids : ProductBid [0..*] opposite Bid
          unique ordered reference BidClearing : BidClearing [0..1] opposite Bid
          unique ordered reference Market : Market [0..1] opposite Bids
        }
        class Flowgate : cimCore.PowerSystemResource
        {
          unique ordered AfcUseCode : nmeta.Object [1 ]
          unique ordered IdcOperationalName : nmeta.String [1 ]
          unique ordered inServiceDate : nmeta.DateTime [1 ]
          unique ordered outOfServiceDate : nmeta.DateTime [1 ]
          unique ordered coordinatedFlag : nmeta.Boolean [1 ]
          unique ordered AtcFlag : nmeta.Boolean [1 ]
          unique ordered deletionDate : nmeta.DateTime [1 ]
          unique ordered reciprocalFlag : nmeta.Boolean [1 ]
          unique ordered IdcAssignedId : nmeta.Integer [1 ]
          unique ordered positiveImpactValue : nmeta.Integer [1 ]
          unique ordered counterFlowValue : nmeta.Integer [1 ]
          unique ordered coordinationStudyDate : nmeta.DateTime [1 ]
          unique ordered IdcType : nmeta.Object [1 ]
          unique ordered managingEntityFlag : nmeta.Boolean [1 ]
          unique ordered reference TransmissionReliabilityMargin : TransmissionReliabilityMargin [0..1] opposite Flowgate
          unique ordered reference ViolationLimits : ViolationLimit [0..*] opposite Flowgate
          unique ordered reference CapacityBenefitMargin : CapacityBenefitMargin [0..*] opposite Flowgate
          unique ordered reference PowerTransormers : cimWires.PowerTransformer [0..*] opposite Flowgates
          unique ordered reference FTRs : FTR [0..*] opposite Flowgate
          unique ordered reference Lines : cimWires.Line [0..*] opposite Flowgates
          unique ordered reference SubControlArea : cimEnergyScheduling.SubControlArea [0..1] opposite Flowgate
          unique ordered reference TransmissionProvider : cimFinancial.TransmissionProvider [0..*] opposite Flowgate
        }
        class MarketFactors : cimCommon.Document
        {
          unique ordered intervalStartTime : nmeta.DateTime [1 ]
          unique ordered reference ErpInvoices : cimInfERPSupport.ErpInvoiceLineItem [0..*] opposite MarketFactors
          unique ordered reference Market : Market [0..1] opposite MarketFactors
        }
        class FTR : cimCommon.Agreement
        {
          unique ordered baseEnergy : nmeta.Float [1 ]
          unique ordered action : nmeta.String [1 ]
          unique ordered optimized : nmeta.String [1 ]
          unique ordered class : nmeta.String [1 ]
          unique ordered ftrType : nmeta.String [1 ]
          unique ordered reference EnergyPriceCurve : EnergyPriceCurve [0..1] opposite FTRs
          unique ordered reference Pnodes : Pnode [0..*] opposite FTRs
          unique ordered reference Flowgate : Flowgate [0..1] opposite FTRs
        }
        class LossPenaltyFactor : MarketFactors
        {
          unique ordered lossFactor : nmeta.Object [1 ]
          unique ordered reference ConnectivityNodes : cimCore.ConnectivityNode [0..*] opposite LossPenaltyFactors
        }
        class ResourceGroup : cimCore.IdentifiedObject
        {
          unique ordered reference ResourceGroupReqs : ResourceGroupReq [0..*] opposite ResourceGroup
          unique ordered reference RegisteredResources : RegisteredResource [0..*] opposite ResourceGroups
        }
        class UnitInitialConditions : cimCore.IdentifiedObject
        {
          unique ordered resourceStatus : nmeta.Integer [1 ]
          unique ordered timeInStatus : nmeta.Float [1 ]
          unique ordered resourceMW : nmeta.Float [1 ]
          unique ordered cumEnergy : nmeta.Object [1 ]
          unique ordered statusDate : nmeta.DateTime [1 ]
          unique ordered cumStatusChanges : nmeta.Integer [1 ]
          unique ordered reference GeneratingUnit : RegisteredGenerator [0..1] opposite UnitInitialConditions
        }
        class RegisteredLoad : RegisteredResource
        {
          unique ordered reference LoadArea : cimLoadModel.LoadGroup [0..1] opposite RegisteredLoads
          unique ordered reference LoadBids : LoadBid [0..*] opposite RegisteredLoad
        }
        class ReserveReqCurve : cimCore.RegularIntervalSchedule
        {
          unique ordered reference ReserveReq : ReserveReq [0..1] opposite ReserveReqCurve
        }
        class BilateralTransaction : Element
        {
          unique ordered purchaseTimeMax : nmeta.Integer [1 ]
          unique ordered purchaseTimeMin : nmeta.Integer [1 ]
          unique ordered curtailTimeMax : nmeta.Integer [1 ]
          unique ordered curtailTimeMin : nmeta.Integer [1 ]
          unique ordered totalTranChargeMax : nmeta.Float [1 ]
          unique ordered transactionType : nmeta.String [1 ]
          unique ordered marketType : nmeta.String [1 ]
          unique ordered scope : nmeta.String [1 ]
        }
        class SensitivityPriceCurve : cimCore.Curve
        {
          unique ordered reference ReserveReq : ReserveReq [0..1] opposite SensitivityPriceCurve
        }
        class TransmissionReliabilityMargin : cimCore.IdentifiedObject
        {
          unique ordered TrmType : nmeta.String [1 ]
          unique ordered valueUnit : nmeta.String [1 ]
          unique ordered trmValue : nmeta.Float [1 ]
          unique ordered reference Flowgate : Flowgate [0..*] opposite TransmissionReliabilityMargin
        }
        class BidPriceCurve : cimCore.Curve
        {
          unique ordered reference ProductBids : ProductBid [0..*] opposite BidPriceCurve
        }
        class ResourceGroupReq : cimCore.IdentifiedObject
        {
          unique ordered reference ResourceGroup : ResourceGroup [0..1] opposite ResourceGroupReqs
          unique ordered reference RTOs : RTO [0..*] opposite ResourceGroupReqs
        }
        class ChargeProfileData : Element
        {
          unique ordered sequence : nmeta.Integer [1 ]
          unique ordered timeStamp : nmeta.DateTime [1 ]
          unique ordered value : nmeta.Float [1 ]
          unique ordered reference ChargeProfile : ChargeProfile [0..1] opposite ChargeProfileData
          unique ordered reference BillDeterminant : BillDeterminant [0..1] opposite ChargeProfileData
        }
        class MarketCaseClearing : MarketFactors
        {
          unique ordered postedDate : nmeta.DateTime [1 ]
          unique ordered caseType : nmeta.String [1 ]
          unique ordered modifiedDate : nmeta.DateTime [1 ]
          unique ordered reference AncillaryServiceClearing : AncillaryServiceClearing [0..*] opposite MarketCaseClearing
        }
        class NodeConstraintTerm : ConstraintTerm
        {
          unique ordered reference ConnectivityNode : cimCore.ConnectivityNode [0..1] opposite NodeConstraintTerms
        }

      }

      namespace InfOperations ( cimInfOperations ) = http://iec.ch/TC57/2009/CIM-schema-cim14#InfOperations
      {
        class SwitchingStep : cimCore.IdentifiedObject
        {
          unique ordered statusKind : SwitchingStepStatusKind [0..1]
          unique ordered requiredControlAction : nmeta.String [1 ]
          unique ordered text : nmeta.String [1 ]
          unique ordered desiredEndState : nmeta.String [1 ]
          unique ordered reference ErpPersonRole : ErpPersonScheduleStepRole [0..1] opposite SwitchingStep
          unique ordered reference SwitchingSchedule : SwitchingSchedule [0..1] opposite ScheduleSteps
          unique ordered reference SafetyDocument : SafetyDocument [0..1] opposite ScheduleSteps
          unique ordered reference PowerSystemResources : cimCore.PowerSystemResource [0..*] opposite ScheduleSteps
          unique ordered reference requiredControlActionInterval : cimCommon.DateTimeInterval [0..1]
        }
        class ErpPersonScheduleStepRole : cimInfCommon.Role
        {
          unique ordered reference SwitchingStep : SwitchingStep [0..1] opposite ErpPersonRole
          unique ordered reference ErpPerson : cimInfERPSupport.ErpPerson [0..1] opposite SwitchingStepRoles
        }
        class ChangeItem : cimCore.IdentifiedObject
        {
          unique ordered kind : ChangeItemKind [0..1]
          unique ordered sequenceNumber : nmeta.Integer [1 ]
          unique ordered reference ChangeSet : ChangeSet [0..1] opposite ChangeItems
          unique ordered reference Asset : cimAssets.Asset [0..1] opposite ChangeItems
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference NetworkDataSet : NetworkDataSet [0..1] opposite ChangeItems
          unique ordered reference GmlSelector : cimInfGMLSupport.GmlSelector [0..1] opposite ChangeItems
          unique ordered reference Organisation : cimInfERPSupport.ErpOrganisation [0..1] opposite ChangeItems
          unique ordered reference GmlObservation : cimInfGMLSupport.GmlObservation [0..1] opposite ChangeItems
          unique ordered reference Location : cimCommon.Location [0..1] opposite ChangeItems
          unique ordered reference PowerSystemResource : cimCore.PowerSystemResource [0..1] opposite ChangeItems
          unique ordered reference Document : cimCommon.Document [0..1] opposite ChangeItems
          unique ordered reference ErpPerson : cimInfERPSupport.ErpPerson [0..1] opposite ChangeItems
        }
        class Circuit : cimCore.EquipmentContainer
        {
        }
        class ComplianceEvent : cimCommon.ActivityRecord
        {
          unique ordered complianceType : nmeta.String [1 ]
          unique ordered deadline : nmeta.DateTime [1 ]
        }
        class ChangeSet : cimCore.IdentifiedObject
        {
          unique ordered reference ChangeItems : ChangeItem [0..*] opposite ChangeSet
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference LandBases : LandBase [0..*]
          unique ordered reference NetworkDataSets : NetworkDataSet [0..*] opposite ChangeSets
          unique ordered reference Documents : cimCommon.Document [0..*] opposite ChangeSets
        }
        class CallBack : cimCore.IdentifiedObject
        {
          unique ordered advice : nmeta.String [1 ]
          unique ordered problemInfo : nmeta.String [1 ]
          unique ordered contactDetail : nmeta.String [1 ]
          unique ordered dateTime : nmeta.DateTime [1 ]
          unique ordered comment : nmeta.String [1 ]
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference ErpPersons : cimInfERPSupport.ErpPerson [0..*] opposite CallBacks
          unique ordered reference Appointments : cimInfWork.Appointment [0..*] opposite CallBack
          unique ordered reference TroubleTickets : TroubleTicket [0..*] opposite CallBacks
        }
        class SwitchingSchedule : cimCommon.Document
        {
          unique ordered reason : nmeta.String [1 ]
          unique ordered reference WorkTask : cimInfWork.WorkTask [0..1] opposite SwitchingSchedules
          unique ordered reference ScheduleSteps : SwitchingStep [0..*] opposite SwitchingSchedule
          unique ordered reference interval : cimCommon.DateTimeInterval [0..1]
          unique ordered reference Crews : cimInfWork.Crew [0..*] opposite SwitchingSchedules
        }
        class PlannedOutage : cimCommon.Document
        {
          unique ordered kind : OutageKind [0..1]
          unique ordered reference CustomerDatas : cimCustomers.Customer [0..*] opposite PlannedOutage
          unique ordered reference OutageSchedules : cimOutage.OutageSchedule [0..*] opposite PlannedOutage
        }
        class TroubleTicket : cimCommon.Document
        {
          unique ordered firstCallDateTime : nmeta.DateTime [1 ]
          unique ordered callBack : nmeta.Boolean [1 ]
          unique ordered estimatedRestoreDateTime : nmeta.DateTime [1 ]
          unique ordered reportingKind : TroubleReportingKind [0..1]
          unique ordered priority : nmeta.String [1 ]
          unique ordered informBeforeRestored : nmeta.Boolean [1 ]
          unique ordered advice : nmeta.String [1 ]
          unique ordered informAfterRestored : nmeta.Boolean [1 ]
          unique ordered hazardCode : nmeta.String [1 ]
          unique ordered reference CallBacks : CallBack [0..*] opposite TroubleTickets
          unique ordered reference IncidentRecord : IncidentRecord [0..1] opposite TroubleTickets
          unique ordered reference CustomerData : cimCustomers.Customer [0..1] opposite TroubleTickets
          unique ordered reference troublePeriod : cimCommon.DateTimeInterval [0..1]
        }
        class SafetyDocument : cimCommon.Document
        {
          unique ordered reference PowerSystemResource : cimCore.PowerSystemResource [0..1] opposite SafetyDocuments
          unique ordered reference ClearanceTags : cimOutage.ClearanceTag [0..*] opposite SafetyDocument
          unique ordered reference ScheduleSteps : SwitchingStep [0..*] opposite SafetyDocument
        }
        enum OutageKind
        {
          forced
          fixed = 1
          flexible = 2
        }
        class IncidentRecord : cimCommon.Document
        {
          unique ordered reference IncidentCodes : IncidentCode [0..*] opposite IncidentRecords
          unique ordered reference TroubleTickets : TroubleTicket [0..*] opposite IncidentRecord
          unique ordered reference period : cimCommon.DateTimeInterval [0..1]
        }
        class LandBase : cimCommon.Document
        {
        }
        class OutageCode : cimCore.IdentifiedObject
        {
          unique ordered subCode : nmeta.String [1 ]
          unique ordered reference OutageRecords : OutageRecord [0..*] opposite OutageCodes
          unique ordered reference OutageSteps : OutageStep [0..*] opposite OutageCodes
        }
        class PSREvent : cimCommon.ActivityRecord
        {
          unique ordered kind : PSREventKind [0..1]
          unique ordered reference PowerSystemResource : cimCore.PowerSystemResource [0..1] opposite PSREvent
        }
        class OrgPsrRole : cimInfCommon.Role
        {
          unique ordered reference PowerSystemResource : cimCore.PowerSystemResource [0..1] opposite ErpOrganisationRoles
          unique ordered reference ErpOrganisation : cimInfERPSupport.ErpOrganisation [0..1] opposite PowerSystemResourceRoles
        }
        enum ChangeItemKind
        {
          delete
          add = 1
          modify = 2
        }
        class OutageNotification : cimCommon.Document
        {
          unique ordered expectedInterruptionCount : nmeta.Integer [1 ]
          unique ordered duration : nmeta.Float [1 ]
          unique ordered reason : nmeta.String [1 ]
          unique ordered reference CustomerDatas : cimCustomers.Customer [0..*] opposite OutageNotifications
        }
        class OutageStepPsrRole : cimInfCommon.Role
        {
          unique ordered reference ConductingEquipment : cimCore.ConductingEquipment [0..1] opposite OutageStepRoles
          unique ordered reference OutageStep : OutageStep [0..1] opposite ConductingEquipmentRoles
        }
        class OutageStep : cimCore.IdentifiedObject
        {
          unique ordered injury : nmeta.Boolean [1 ]
          unique ordered specialCustomerCount : nmeta.Integer [1 ]
          unique ordered estimatedRestoreDateTime : nmeta.DateTime [1 ]
          unique ordered fatality : nmeta.Boolean [1 ]
          unique ordered callerCount : nmeta.Integer [1 ]
          unique ordered damage : nmeta.Boolean [1 ]
          unique ordered jobPriority : nmeta.String [1 ]
          unique ordered shockReported : nmeta.Boolean [1 ]
          unique ordered averageCml : nmeta.Float [1 ]
          unique ordered totalCml : nmeta.Float [1 ]
          unique ordered totalCustomerCount : nmeta.Integer [1 ]
          unique ordered criticalCustomerCount : nmeta.Integer [1 ]
          unique ordered reference OutageCodes : OutageCode [0..*] opposite OutageSteps
          unique ordered reference Crews : cimInfWork.Crew [0..*] opposite OutageSteps
          unique ordered reference noPowerInterval : cimCommon.DateTimeInterval [0..1]
          unique ordered reference ConductingEquipmentRoles : OutageStepPsrRole [0..*] opposite OutageStep
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference OutageRecord : OutageRecord [0..1] opposite OutageSteps
        }
        class OutageReport : cimCommon.Document
        {
          unique ordered customerCount : nmeta.Integer [1 ]
          unique ordered outageDuration : nmeta.Float [1 ]
          unique ordered averageCml : nmeta.Float [1 ]
          unique ordered totalCml : nmeta.Float [1 ]
          unique ordered reference OutageRecord : OutageRecord [0..1] opposite OutageReport
          unique ordered reference OutageHistory : cimInfCustomers.OutageHistory [0..1] opposite OutageReports
        }
        class OutageRecord : cimCommon.Document
        {
          unique ordered mode : nmeta.String [1 ]
          unique ordered actionTaken : nmeta.String [1 ]
          unique ordered endDateTime : nmeta.DateTime [1 ]
          unique ordered damageCode : nmeta.String [1 ]
          unique ordered isPlanned : nmeta.Boolean [1 ]
          unique ordered reference OutageReport : OutageReport [0..1] opposite OutageRecord
          unique ordered reference OutageSteps : OutageStep [0..*] opposite OutageRecord
          unique ordered reference OutageCodes : OutageCode [0..*] opposite OutageRecords
        }
        class OperationalRestriction : cimCommon.Document
        {
          unique ordered reference activePeriod : cimCommon.DateTimeInterval [0..1]
        }
        class NetworkDataSet : cimCore.IdentifiedObject
        {
          unique ordered category : nmeta.String [1 ]
          unique ordered reference CircuitSections : CircuitSection [0..*] opposite NetworkDataSets
          unique ordered reference ChangeItems : ChangeItem [0..*] opposite NetworkDataSet
          unique ordered reference ChangeSets : ChangeSet [0..*] opposite NetworkDataSets
          unique ordered reference PowerSystemResources : cimCore.PowerSystemResource [0..*] opposite NetworkDataSets
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference LandBases : LandBase [0..*]
          unique ordered reference Documents : cimCommon.Document [0..*] opposite NetworkDataSets
        }
        class IncidentCode : cimCore.IdentifiedObject
        {
          unique ordered subCode : nmeta.String [1 ]
          unique ordered reference IncidentRecords : IncidentRecord [0..*] opposite IncidentCodes
        }
        enum TroubleReportingKind
        {
          letter
          other = 1
          call = 2
          email = 3
        }
        enum SwitchingStepStatusKind
        {
          skipped
          proposed = 1
          confirmed = 2
          aborted = 3
          instructed = 4
        }
        enum PSREventKind
        {
          unknown
          pendingAdd = 1
          pendingReplace = 2
          other = 3
          inService = 4
          pendingRemove = 5
          outOfService = 6
        }
        class CircuitSection : cimCore.IdentifiedObject
        {
          unique ordered connectionKind : CircuitConnectionKind [0..1]
          unique ordered reference Circuits : Circuit [0..*]
          unique ordered reference NetworkDataSets : NetworkDataSet [0..*] opposite CircuitSections
          unique ordered reference PowerSystemResources : cimCore.PowerSystemResource [0..*] opposite CircuitSections
          unique ordered reference ConductorAssets : cimInfAssets.ConductorAsset [0..*] opposite CircuitSection
        }
        enum CircuitConnectionKind
        {
          other
          nominallyConnected = 1
          asBuilt = 2
          electricallyConnected = 3
        }

      }

      namespace InfWork ( cimInfWork ) = http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork
      {
        class WorkFlowStep : cimCore.IdentifiedObject
        {
          unique ordered sequenceNumber : nmeta.Integer [1 ]
          unique ordered reference WorkTasks : WorkTask [0..*] opposite WorkFlowStep
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference Work : cimWork.Work [0..1] opposite WorkFlowSteps
        }
        class WorkCostDetail : cimCommon.Document
        {
          unique ordered transactionDateTime : nmeta.DateTime [1 ]
          unique ordered amount : nmeta.Float [1 ]
          unique ordered isDebit : nmeta.Boolean [1 ]
          unique ordered type : nmeta.String [1 ]
          unique ordered reference CostType : CostType [0..1] opposite WorkCostDetails
          unique ordered reference ContractorItems : ContractorItem [0..*] opposite WorkCostDetail
          unique ordered reference MaterialItems : MaterialItem [0..*] opposite WorkCostDetail
          unique ordered reference EquipmentItems : EquipmentItem [0..*] opposite WorkCostDetail
          unique ordered reference PropertyUnits : PropertyUnit [0..*] opposite WorkCostDetails
          unique ordered reference Design : Design [0..1] opposite WorkCostDetails
          unique ordered reference MiscCostItems : MiscCostItem [0..*] opposite WorkCostDetail
          unique ordered reference WorkCostSummary : WorkCostSummary [0..1] opposite WorkCostDetail
          unique ordered reference WorkTask : WorkTask [0..1] opposite WorkCostDetails
          unique ordered reference OverheadCost : OverheadCost [0..1] opposite WorkCostDetails
          unique ordered reference Works : cimWork.Work [0..*] opposite WorkCostDetails
          unique ordered reference LaborItems : LaborItem [0..*] opposite WorkCostDetail
          unique ordered reference ErpProjectAccounting : cimInfERPSupport.ErpProjectAccounting [0..1] opposite WorkCostDetails
        }
        class Usage : cimCore.IdentifiedObject
        {
          unique ordered reference WorkEquipmentAsset : cimInfAssets.WorkEquipmentInfo [0..1] opposite Usages
          unique ordered reference WorkTask : WorkTask [0..1] opposite Usages
          unique ordered reference MaterialItem : MaterialItem [0..1] opposite Usages
          unique ordered reference status : cimCommon.Status [0..1]
        }
        class WorkCostSummary : cimCommon.Document
        {
          unique ordered reference WorkCostDetail : WorkCostDetail [0..1] opposite WorkCostSummary
        }
        class MiscCostItem : cimCore.IdentifiedObject
        {
          unique ordered costPerUnit : nmeta.Float [1 ]
          unique ordered quantity : nmeta.Object [1 ]
          unique ordered account : nmeta.String [1 ]
          unique ordered externalRefID : nmeta.String [1 ]
          unique ordered costType : nmeta.String [1 ]
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference DesignLocation : DesignLocation [0..1] opposite MiscCostItems
          unique ordered reference WorkTask : WorkTask [0..1] opposite MiscCostItems
          unique ordered reference WorkCostDetail : WorkCostDetail [0..1] opposite MiscCostItems
        }
        class CUAllowableAction : cimCore.IdentifiedObject
        {
          unique ordered reference CompatibleUnits : CompatibleUnit [0..*] opposite CUAllowableAction
          unique ordered reference status : cimCommon.Status [0..1]
        }
        class CostType : cimCore.IdentifiedObject
        {
          unique ordered level : nmeta.String [1 ]
          unique ordered amountAssignmentFlag : nmeta.Boolean [1 ]
          unique ordered code : nmeta.String [1 ]
          unique ordered stage : nmeta.String [1 ]
          unique ordered reference ErpJournalEntries : cimInfERPSupport.ErpJournalEntry [0..*] opposite CostTypes
          unique ordered reference WorkCostDetails : WorkCostDetail [0..*] opposite CostType
          unique ordered reference ParentCostType : CostType [0..1] opposite ChildCostTypes
          unique ordered reference CompatibleUnits : CompatibleUnit [0..*] opposite CostType
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference ChildCostTypes : CostType [0..*] opposite ParentCostType
        }
        class CUMaterialItem : cimCore.IdentifiedObject
        {
          unique ordered quantity : nmeta.Object [1 ]
          unique ordered corporateCode : nmeta.String [1 ]
          unique ordered reference CompatibleUnits : CompatibleUnit [0..*] opposite CUMaterialItems
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference TypeMaterial : TypeMaterial [0..1] opposite CUMaterialItems
          unique ordered reference PropertyUnits : PropertyUnit [0..*] opposite CUMaterialItems
        }
        class Assignment : cimCommon.Document
        {
          unique ordered reference Crews : Crew [0..*] opposite Assignments
          unique ordered reference effectivePeriod : cimCommon.DateTimeInterval [0..1]
        }
        enum DesignKind
        {
          estimated
          other = 1
          asBuilt = 2
        }
        class Design : cimCommon.Document
        {
          unique ordered costEstimate : nmeta.Float [1 ]
          unique ordered kind : DesignKind [0..1]
          unique ordered price : nmeta.Float [1 ]
          unique ordered reference DesignLocations : DesignLocation [0..*] opposite Designs
          unique ordered reference DesignLocationsCUs : DesignLocationCU [0..*] opposite Designs
          unique ordered reference Work : cimWork.Work [0..1] opposite Designs
          unique ordered reference WorkCostDetails : WorkCostDetail [0..*] opposite Design
          unique ordered reference ErpBOMs : cimInfERPSupport.ErpBOM [0..*] opposite Design
          unique ordered reference ErpQuoteLineItem : cimInfERPSupport.ErpQuoteLineItem [0..1] opposite Design
          unique ordered reference ConditionFactors : ConditionFactor [0..*] opposite Designs
          unique ordered reference WorkTasks : WorkTask [0..*] opposite Design
        }
        enum ConditionFactorKind
        {
          labor
          material = 1
          travel = 2
          other = 3
          accountAllocation = 4
        }
        class BusinessCase : cimCommon.Document
        {
          unique ordered corporateCode : nmeta.String [1 ]
          unique ordered reference Works : cimWork.Work [0..*] opposite BusinessCase
          unique ordered reference Projects : Project [0..*] opposite BusinessCase
        }
        class EquipmentItem : cimCore.IdentifiedObject
        {
          unique ordered code : nmeta.String [1 ]
          unique ordered cost : nmeta.Float [1 ]
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference WorkCostDetail : WorkCostDetail [0..1] opposite EquipmentItems
          unique ordered reference WorkTask : WorkTask [0..1] opposite EquipmentItems
        }
        class OneCallRequest : cimCommon.Document
        {
          unique ordered markingInstruction : nmeta.String [1 ]
          unique ordered explosivesUsed : nmeta.Boolean [1 ]
          unique ordered markedIndicator : nmeta.Boolean [1 ]
          unique ordered reference WorkLocations : WorkLocation [0..*] opposite OneCallRequest
        }
        class LaborItem : cimCore.IdentifiedObject
        {
          unique ordered activityCode : nmeta.String [1 ]
          unique ordered cost : nmeta.Float [1 ]
          unique ordered laborDuration : nmeta.Float [1 ]
          unique ordered laborRate : nmeta.Float [1 ]
          unique ordered reference WorkTask : WorkTask [0..1] opposite LaborItems
          unique ordered reference ErpPersons : cimInfERPSupport.ErpPerson [0..*] opposite LaborItems
          unique ordered reference WorkCostDetail : WorkCostDetail [0..1] opposite LaborItems
          unique ordered reference status : cimCommon.Status [0..1]
        }
        class Project : cimCommon.Document
        {
          unique ordered budget : nmeta.Float [1 ]
          unique ordered reference ErpProjectAccounting : cimInfERPSupport.ErpProjectAccounting [0..1] opposite Projects
          unique ordered reference Works : cimWork.Work [0..*] opposite Project
          unique ordered reference Requests : Request [0..*] opposite Projects
          unique ordered reference BusinessCase : BusinessCase [0..1] opposite Projects
          unique ordered reference SubProjects : Project [0..*] opposite ParentProject
          unique ordered reference ParentProject : Project [0..1] opposite SubProjects
        }
        class AccessPermit : cimCommon.Document
        {
          unique ordered expirationDate : nmeta.String [1 ]
          unique ordered applicationNumber : nmeta.String [1 ]
          unique ordered effectiveDate : nmeta.String [1 ]
          unique ordered permitID : nmeta.String [1 ]
          unique ordered payment : nmeta.Float [1 ]
        }
        class InspectionDataSet : cimInfAssets.ProcedureDataSet
        {
          unique ordered locationCondition : nmeta.String [1 ]
          unique ordered reference AccordingToSchedules : cimInfCommon.ScheduleParameterInfo [0..*] opposite ForInspectionDataSet
        }
        class Regulation : cimCommon.Document
        {
          unique ordered referenceNumber : nmeta.String [1 ]
        }
        class ShiftPattern : cimCore.IdentifiedObject
        {
          unique ordered assignmentType : nmeta.String [1 ]
          unique ordered cycleCount : nmeta.Integer [1 ]
          unique ordered reference Crews : Crew [0..*] opposite ShiftPatterns
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference validityInterval : cimCommon.DateTimeInterval [0..1]
        }
        class NonStandardItem : cimCommon.Document
        {
          unique ordered code : nmeta.String [1 ]
          unique ordered amount : nmeta.Float [1 ]
        }
        enum WorkActionKind
        {
          abandon
          install = 1
          remove = 2
          transfer = 3
        }
        class WorkLocation : cimCommon.Location
        {
          unique ordered subdivision : nmeta.String [1 ]
          unique ordered block : nmeta.String [1 ]
          unique ordered lot : nmeta.String [1 ]
          unique ordered nearestIntersection : nmeta.String [1 ]
          unique ordered reference DesignLocations : DesignLocation [0..*] opposite WorkLocations
          unique ordered reference OneCallRequest : OneCallRequest [0..1] opposite WorkLocations
        }
        class DesignLocationCU : cimCore.IdentifiedObject
        {
          unique ordered removalDate : nmeta.String [1 ]
          unique ordered cuQuantity : nmeta.Object [1 ]
          unique ordered cuAccount : nmeta.String [1 ]
          unique ordered cuAction : WorkActionKind [0..1]
          unique ordered energizationFlag : nmeta.Boolean [1 ]
          unique ordered cuUsage : nmeta.String [1 ]
          unique ordered reference Designs : Design [0..*] opposite DesignLocationsCUs
          unique ordered reference ConditionFactors : ConditionFactor [0..*] opposite DesignLocationCUs
          unique ordered reference CompatibleUnits : CompatibleUnit [0..*] opposite DesignLocationCUs
          unique ordered reference WorkTasks : WorkTask [0..*] opposite DesignLocationCUs
          unique ordered reference DesignLocation : DesignLocation [0..1] opposite DesignLocationCUs
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference CUGroups : CUGroup [0..*] opposite DesignLocationCUs
        }
        class DesignLocation : cimCore.IdentifiedObject
        {
          unique ordered spanLength : nmeta.Float [1 ]
          unique ordered reference ConditionFactors : ConditionFactor [0..*] opposite DesignLocations
          unique ordered reference MaterialItems : MaterialItem [0..*] opposite DesignLocation
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference Diagrams : cimInfGMLSupport.Diagram [0..*] opposite DesignLocations
          unique ordered reference WorkLocations : WorkLocation [0..*] opposite DesignLocations
          unique ordered reference DesignLocationCUs : DesignLocationCU [0..*] opposite DesignLocation
          unique ordered reference Designs : Design [0..*] opposite DesignLocations
          unique ordered reference ErpBomItemDatas : cimInfERPSupport.ErpBomItemData [0..*] opposite DesignLocation
          unique ordered reference MiscCostItems : MiscCostItem [0..*] opposite DesignLocation
        }
        class CULaborCode : cimCore.IdentifiedObject
        {
          unique ordered code : nmeta.String [1 ]
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference CULaborItems : CULaborItem [0..*] opposite CULaborCode
        }
        class ConditionFactor : cimCore.IdentifiedObject
        {
          unique ordered cfValue : nmeta.String [1 ]
          unique ordered kind : ConditionFactorKind [0..1]
          unique ordered reference DesignLocations : DesignLocation [0..*] opposite ConditionFactors
          unique ordered reference DesignLocationCUs : DesignLocationCU [0..*] opposite ConditionFactors
          unique ordered reference Designs : Design [0..*] opposite ConditionFactors
          unique ordered reference status : cimCommon.Status [0..1]
        }
        class CUWorkEquipmentItem : cimCore.IdentifiedObject
        {
          unique ordered equipCode : nmeta.String [1 ]
          unique ordered rate : nmeta.Float [1 ]
          unique ordered reference TypeAsset : cimInfTypeAsset.TypeAsset [0..1] opposite CUWorkEquipmentAsset
          unique ordered reference CompatibleUnits : CompatibleUnit [0..*] opposite CUWorkEquipmentItems
          unique ordered reference status : cimCommon.Status [0..1]
        }
        class QualificationRequirement : cimCore.IdentifiedObject
        {
          unique ordered qualificationID : nmeta.String [1 ]
          unique ordered reference Specifications : cimInfAssets.Specification [0..*] opposite QualificationRequirements
          unique ordered reference WorkTasks : WorkTask [0..*] opposite QualificationRequirements
          unique ordered reference CULaborItems : CULaborItem [0..*] opposite QualificationRequirements
          unique ordered reference Skills : cimInfCommon.Skill [0..*] opposite QualificationRequirements
        }
        class CUContractorItem : cimCore.IdentifiedObject
        {
          unique ordered activityCode : nmeta.String [1 ]
          unique ordered bidAmount : nmeta.Float [1 ]
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference CompatibleUnits : CompatibleUnit [0..*] opposite CUContractorItems
        }
        class MaterialItem : cimCore.IdentifiedObject
        {
          unique ordered account : nmeta.String [1 ]
          unique ordered costDescription : nmeta.String [1 ]
          unique ordered quantity : nmeta.Object [1 ]
          unique ordered costType : nmeta.String [1 ]
          unique ordered externalRefID : nmeta.String [1 ]
          unique ordered actualCost : nmeta.Float [1 ]
          unique ordered materialCode : nmeta.String [1 ]
          unique ordered reference ErpPOLineItems : cimInfERPSupport.ErpPOLineItem [0..*] opposite MaterialItem
          unique ordered reference TypeMaterial : TypeMaterial [0..1] opposite MaterialItems
          unique ordered reference ErpInventoryCounts : cimInfERPSupport.ErpInventoryCount [0..*] opposite MaterialItem
          unique ordered reference Usages : Usage [0..*] opposite MaterialItem
          unique ordered reference WorkCostDetail : WorkCostDetail [0..1] opposite MaterialItems
          unique ordered reference WorkTask : WorkTask [0..1] opposite MaterialItems
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference ErpRecDelvLineItems : cimInfERPSupport.ErpRecDelvLineItem [0..*] opposite MaterialItems
          unique ordered reference DesignLocation : DesignLocation [0..1] opposite MaterialItems
        }
        class PropertyUnit : cimCore.IdentifiedObject
        {
          unique ordered propertyAccount : nmeta.String [1 ]
          unique ordered accountingUsage : nmeta.String [1 ]
          unique ordered activityCode : WorkActionKind [0..1]
          unique ordered reference WorkCostDetails : WorkCostDetail [0..*] opposite PropertyUnits
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference CompatibleUnits : CompatibleUnit [0..*] opposite PropertyUnit
          unique ordered reference CUMaterialItems : CUMaterialItem [0..*] opposite PropertyUnits
        }
        class CompatibleUnit : cimCommon.Document
        {
          unique ordered estCost : nmeta.Float [1 ]
          unique ordered quantity : nmeta.String [1 ]
          unique ordered reference DesignLocationCUs : DesignLocationCU [0..*] opposite CompatibleUnits
          unique ordered reference PropertyUnit : PropertyUnit [0..1] opposite CompatibleUnits
          unique ordered reference CULaborItems : CULaborItem [0..*] opposite CompatibleUnits
          unique ordered reference CUMaterialItems : CUMaterialItem [0..*] opposite CompatibleUnits
          unique ordered reference CUGroup : CUGroup [0..1] opposite CompatibleUnits
          unique ordered reference CUWorkEquipmentItems : CUWorkEquipmentItem [0..*] opposite CompatibleUnits
          unique ordered reference CostType : CostType [0..1] opposite CompatibleUnits
          unique ordered reference Procedures : cimInfAssets.Procedure [0..*] opposite CompatibleUnits
          unique ordered reference CUAssets : CUAsset [0..*] opposite CompatibleUnits
          unique ordered reference CUAllowableAction : CUAllowableAction [0..1] opposite CompatibleUnits
          unique ordered reference CUContractorItems : CUContractorItem [0..*] opposite CompatibleUnits
        }
        class WorkTask : cimCommon.Document
        {
          unique ordered priority : nmeta.String [1 ]
          unique ordered schedOverride : nmeta.String [1 ]
          unique ordered reference Crews : Crew [0..*] opposite WorkTasks
          unique ordered reference SwitchingSchedules : cimInfOperations.SwitchingSchedule [0..*] opposite WorkTask
          unique ordered reference MiscCostItems : MiscCostItem [0..*] opposite WorkTask
          unique ordered reference LaborItems : LaborItem [0..*] opposite WorkTask
          unique ordered reference WorkFlowStep : WorkFlowStep [0..1] opposite WorkTasks
          unique ordered reference Assets : cimAssets.Asset [0..*] opposite WorkTask
          unique ordered reference Capabilities : Capability [0..*] opposite WorkTasks
          unique ordered reference Work : cimWork.Work [0..1] opposite WorkTasks
          unique ordered reference DesignLocationCUs : DesignLocationCU [0..*] opposite WorkTasks
          unique ordered reference ContractorItems : ContractorItem [0..*] opposite WorkTask
          unique ordered reference Design : Design [0..1] opposite WorkTasks
          unique ordered reference EquipmentItems : EquipmentItem [0..*] opposite WorkTask
          unique ordered reference MaterialItems : MaterialItem [0..*] opposite WorkTask
          unique ordered reference WorkCostDetails : WorkCostDetail [0..*] opposite WorkTask
          unique ordered reference QualificationRequirements : QualificationRequirement [0..*] opposite WorkTasks
          unique ordered reference Usages : Usage [0..*] opposite WorkTask
          unique ordered reference OverheadCost : OverheadCost [0..1] opposite WorkTasks
        }
        class TypeMaterial : cimCommon.Document
        {
          unique ordered stockItem : nmeta.Boolean [1 ]
          unique ordered quantity : nmeta.String [1 ]
          unique ordered costType : nmeta.String [1 ]
          unique ordered estUnitCost : nmeta.Float [1 ]
          unique ordered reference ErpIssueInventories : cimInfERPSupport.ErpIssueInventory [0..*] opposite TypeMaterial
          unique ordered reference ErpReqLineItems : cimInfERPSupport.ErpReqLineItem [0..*] opposite TypeMaterial
          unique ordered reference MaterialItems : MaterialItem [0..*] opposite TypeMaterial
          unique ordered reference CUMaterialItems : CUMaterialItem [0..*] opposite TypeMaterial
        }
        class Capability : cimCore.IdentifiedObject
        {
          unique ordered category : nmeta.String [1 ]
          unique ordered performanceFactor : nmeta.String [1 ]
          unique ordered reference WorkTasks : WorkTask [0..*] opposite Capabilities
          unique ordered reference validityInterval : cimCommon.DateTimeInterval [0..1]
          unique ordered reference Crew : Crew [0..1] opposite Capabilities
          unique ordered reference Crafts : cimInfCommon.Craft [0..*] opposite Capabilities
          unique ordered reference status : cimCommon.Status [0..1]
        }
        class CUAsset : cimCore.IdentifiedObject
        {
          unique ordered typeAssetCode : nmeta.String [1 ]
          unique ordered quantity : nmeta.Object [1 ]
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference TypeAsset : cimInfTypeAsset.TypeAsset [0..1] opposite CUAsset
          unique ordered reference CompatibleUnits : CompatibleUnit [0..*] opposite CUAssets
        }
        class ContractorItem : cimCore.IdentifiedObject
        {
          unique ordered cost : nmeta.Float [1 ]
          unique ordered activityCode : nmeta.String [1 ]
          unique ordered bidAmount : nmeta.Float [1 ]
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference ErpPayables : cimInfERPSupport.ErpPayable [0..*] opposite ContractorItems
          unique ordered reference WorkCostDetail : WorkCostDetail [0..1] opposite ContractorItems
          unique ordered reference WorkTask : WorkTask [0..1] opposite ContractorItems
        }
        class InfoQuestion : cimCommon.Document
        {
          unique ordered answer : nmeta.String [1 ]
          unique ordered questionText : nmeta.String [1 ]
          unique ordered answerDateTime : nmeta.DateTime [1 ]
          unique ordered questionCategory : nmeta.String [1 ]
          unique ordered answerRemark : nmeta.String [1 ]
          unique ordered questionRemark : nmeta.String [1 ]
          unique ordered questionCode : nmeta.String [1 ]
        }
        class WorkStatusEntry : cimCommon.ActivityRecord
        {
          unique ordered percentComplete : nmeta.Float [1 ]
        }
        class Appointment : cimInfCommon.ScheduledEvent
        {
          unique ordered remark : nmeta.String [1 ]
          unique ordered callAhead : nmeta.Boolean [1 ]
          unique ordered reference address : cimCommon.StreetAddress [0..1]
          unique ordered reference CallBack : cimInfOperations.CallBack [0..1] opposite Appointments
          unique ordered reference meetingInterval : cimCommon.DateTimeInterval [0..1]
          unique ordered reference ErpPersons : cimInfERPSupport.ErpPerson [0..*] opposite Appointments
        }
        class MaintenanceDataSet : cimInfAssets.ProcedureDataSet
        {
          unique ordered maintCode : nmeta.String [1 ]
          unique ordered conditionBefore : nmeta.String [1 ]
          unique ordered conditionAfter : nmeta.String [1 ]
        }
        class CUGroup : cimCore.IdentifiedObject
        {
          unique ordered reference ChildCUGroups : CUGroup [0..*] opposite ParentCUGroups
          unique ordered reference ParentCUGroups : CUGroup [0..*] opposite ChildCUGroups
          unique ordered reference DesignLocationCUs : DesignLocationCU [0..*] opposite CUGroups
          unique ordered reference CompatibleUnits : CompatibleUnit [0..*] opposite CUGroup
          unique ordered reference status : cimCommon.Status [0..1]
        }
        class Crew : cimCore.IdentifiedObject
        {
          unique ordered category : nmeta.String [1 ]
          unique ordered reference WorkTasks : WorkTask [0..*] opposite Crews
          unique ordered reference Assignments : Assignment [0..*] opposite Crews
          unique ordered reference ShiftPatterns : ShiftPattern [0..*] opposite Crews
          unique ordered reference Route : cimInfLocations.Route [0..1] opposite Crews
          unique ordered reference Tools : cimInfAssets.ToolInfo [0..*] opposite Crew
          unique ordered reference Vehicles : cimInfAssets.VehicleInfo [0..*] opposite Crew
          unique ordered reference CrewMembers : cimInfERPSupport.ErpPerson [0..*] opposite Crews
          unique ordered reference WorkEquipmentAssets : cimInfAssets.WorkEquipmentInfo [0..*] opposite Crew
          unique ordered reference Locations : cimCommon.Location [0..*] opposite Crews
          unique ordered reference Organisations : cimInfERPSupport.ErpOrganisation [0..*] opposite Crews
          unique ordered reference SwitchingSchedules : cimInfOperations.SwitchingSchedule [0..*] opposite Crews
          unique ordered reference Capabilities : Capability [0..*] opposite Crew
          unique ordered reference OutageSteps : cimInfOperations.OutageStep [0..*] opposite Crews
        }
        class Request : cimCommon.Document
        {
          unique ordered priority : nmeta.String [1 ]
          unique ordered corporateCode : nmeta.String [1 ]
          unique ordered actionNeeded : nmeta.String [1 ]
          unique ordered reference Organisation : cimInfERPSupport.ErpOrganisation [0..1] opposite Requests
          unique ordered reference Works : cimWork.Work [0..*] opposite Request
          unique ordered reference ErpQuoteLineItem : cimInfERPSupport.ErpQuoteLineItem [0..1] opposite Request
          unique ordered reference Projects : Project [0..*] opposite Requests
        }
        class OverheadCost : cimCore.IdentifiedObject
        {
          unique ordered code : nmeta.String [1 ]
          unique ordered cost : nmeta.Float [1 ]
          unique ordered reference WorkTasks : WorkTask [0..*] opposite OverheadCost
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference WorkCostDetails : WorkCostDetail [0..*] opposite OverheadCost
        }
        class DiagnosisDataSet : cimInfAssets.ProcedureDataSet
        {
          unique ordered phaseCode : cimCore.PhaseCode [0..1]
          unique ordered finalCode : nmeta.String [1 ]
          unique ordered effect : nmeta.String [1 ]
          unique ordered failureMode : nmeta.String [1 ]
          unique ordered rootOrigin : nmeta.String [1 ]
          unique ordered finalCause : nmeta.String [1 ]
          unique ordered rootRemark : nmeta.String [1 ]
          unique ordered rootCause : nmeta.String [1 ]
          unique ordered preliminaryRemark : nmeta.String [1 ]
          unique ordered preliminaryCode : nmeta.String [1 ]
          unique ordered preliminaryDateTime : nmeta.DateTime [1 ]
          unique ordered finalRemark : nmeta.String [1 ]
          unique ordered finalOrigin : nmeta.String [1 ]
        }
        class CULaborItem : cimCore.IdentifiedObject
        {
          unique ordered activityCode : nmeta.String [1 ]
          unique ordered laborDuration : nmeta.Float [1 ]
          unique ordered laborRate : nmeta.Float [1 ]
          unique ordered reference QualificationRequirements : QualificationRequirement [0..*] opposite CULaborItems
          unique ordered reference CULaborCode : CULaborCode [0..1] opposite CULaborItems
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference CompatibleUnits : CompatibleUnit [0..*] opposite CULaborItems
        }

      }

      namespace InfPaymentMetering ( cimInfPaymentMetering ) = http://iec.ch/TC57/2009/CIM-schema-cim14#InfPaymentMetering
      {
        class TSPAgreement : cimCommon.Agreement
        {
        }
        class ReceiptSummary : Element
        {
          unique ordered tenderKind : cimPaymentMetering.TenderKind [0..1]
          unique ordered reference line : cimPaymentMetering.LineDetail [0..1]
          unique ordered reference Shift : cimPaymentMetering.Shift [0..1] opposite ReceiptSummaries
        }
        class TransactionSummary : Element
        {
          unique ordered transactionKind : cimPaymentMetering.TransactionKind [0..1]
          unique ordered reference line : cimPaymentMetering.LineDetail [0..1]
          unique ordered reference Shift : cimPaymentMetering.Shift [0..1] opposite TransactionSummaries
        }
        class BankStatement : cimCommon.Document
        {
          unique ordered merchantCreditAmount : nmeta.Float [1 ]
          unique ordered depositAmount : nmeta.Float [1 ]
          unique ordered depositDateTime : nmeta.DateTime [1 ]
          unique ordered posted : nmeta.Boolean [1 ]
          unique ordered reference BankAccount : cimInfCommon.BankAccount [0..1] opposite BankStatements
          unique ordered reference MerchantAccount : cimPaymentMetering.MerchantAccount [0..1] opposite BankStatements
          unique ordered reference Vendor : cimPaymentMetering.Vendor [0..1] opposite BankStatements
        }
        class SDPAccountingFunction : cimMetering.DeviceFunction
        {
          unique ordered reference availableCredit : cimPaymentMetering.AccountingUnit [0..1]
          unique ordered reference CreditRegisters : CreditRegister [0..*] opposite SDPAccountingFunction
          unique ordered reference ChargeRegisters : ChargeRegister [0..*] opposite SPAccountingFunction
          unique ordered reference lowCreditWarningLevel : cimPaymentMetering.AccountingUnit [0..1]
          unique ordered reference creditExpiryLevel : cimPaymentMetering.AccountingUnit [0..1]
          unique ordered reference ServiceKind : cimCustomers.ServiceCategory [0..1] opposite SPAccountingFunctions
        }
        class CreditRegister : cimCore.IdentifiedObject
        {
          unique ordered creditKind : cimPaymentMetering.CreditKind [0..1]
          unique ordered reference creditAmount : cimPaymentMetering.AccountingUnit [0..1]
          unique ordered reference SDPAccountingFunction : SDPAccountingFunction [0..1] opposite CreditRegisters
        }
        class ChargeRegister : cimCore.IdentifiedObject
        {
          unique ordered chargeKind : cimPaymentMetering.ChargeKind [0..1]
          unique ordered reference SPAccountingFunction : SDPAccountingFunction [0..1] opposite ChargeRegisters
          unique ordered reference chargeAmount : cimPaymentMetering.AccountingUnit [0..1]
        }
        class Bank : cimCommon.Organisation
        {
          unique ordered branchCode : nmeta.String [1 ]
          unique ordered bic : nmeta.String [1 ]
          unique ordered iban : nmeta.String [1 ]
          unique ordered reference BankAccounts : cimInfCommon.BankAccount [0..*] opposite Bank
        }
        class Token : cimCore.IdentifiedObject
        {
          unique ordered comment : nmeta.String [1 ]
          unique ordered code : nmeta.String [1 ]
          unique ordered reference PointOfSale : cimPaymentMetering.PointOfSale [0..1] opposite Tokens
        }

      }

      namespace InfCommon ( cimInfCommon ) = http://iec.ch/TC57/2009/CIM-schema-cim14#InfCommon
      {
        enum SkillLevelKind
        {
          standard
          master = 1
          other = 2
          apprentice = 3
        }
        enum MarketRoleKind
        {
          competitiveRetailer
          standardsDeveloper = 1
          other = 2
          resourcePlanner = 3
          interchangeAuthority = 4
          transmissionServiceProvider = 5
          purchasingSellingEntity = 6
          balancingAuthority = 7
          energyServiceConsumer = 8
          loadServingEntity = 9
          distributionProvider = 10
          transmissionPlanner = 11
          reliabilityAuthority = 12
          transmissionOwner = 13
          generatorOwner = 14
          planningAuthority = 15
          generatorOperator = 16
          complianceMonitor = 17
          transmissionOperator = 18
        }
        class DocDocRole : Role
        {
          unique ordered reference FromDocument : cimCommon.Document [0..1] opposite ToDocumentRoles
          unique ordered reference ToDocument : cimCommon.Document [0..1] opposite FromDocumentRoles
        }
        class ScheduleParameterInfo : cimCore.IdentifiedObject
        {
          unique ordered reference ScheduledEvents : ScheduledEvent [0..*] opposite ScheduleParameterInfo
          unique ordered reference requestedWindow : cimCommon.DateTimeInterval [0..1]
          unique ordered reference ForInspectionDataSet : cimInfWork.InspectionDataSet [0..1] opposite AccordingToSchedules
          unique ordered reference estimatedWindow : cimCommon.DateTimeInterval [0..1]
          unique ordered reference Documents : cimCommon.Document [0..*] opposite ScheduleParameterInfos
          unique ordered reference status : cimCommon.Status [0..1]
        }
        class ScheduledEvent : cimCore.IdentifiedObject
        {
          unique ordered duration : nmeta.Float [1 ]
          unique ordered category : nmeta.String [1 ]
          unique ordered reference Document : cimCommon.Document [0..1] opposite ScheduledEvents
          unique ordered reference TimePoint : cimCommon.TimePoint [0..1] opposite ScheduledEvents
          unique ordered reference ScheduleParameterInfo : ScheduleParameterInfo [0..1] opposite ScheduledEvents
          unique ordered reference ActivityRecord : cimCommon.ActivityRecord [0..1] opposite ScheduledEvent
          unique ordered reference Assets : cimAssets.Asset [0..*] opposite ScheduledEvents
          unique ordered reference status : cimCommon.Status [0..1]
        }
        class BankAccount : cimCommon.Document
        {
          unique ordered accountNumber : nmeta.String [1 ]
          unique ordered reference Bank : cimInfPaymentMetering.Bank [0..1] opposite BankAccounts
          unique ordered reference ServiceSupplier : cimPaymentMetering.ServiceSupplier [0..1] opposite BankAccounts
          unique ordered reference BankStatements : cimInfPaymentMetering.BankStatement [0..*] opposite BankAccount
        }
        class DocPsrRole : Role
        {
          unique ordered reference Document : cimCommon.Document [0..1] opposite PowerSystemResourceRoles
          unique ordered reference PowerSystemResource : cimCore.PowerSystemResource [0..1] opposite DocumentRoles
        }
        class BusinessRole : cimCore.IdentifiedObject
        {
          unique ordered category : nmeta.String [1 ]
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference Organisations : cimCommon.Organisation [0..*] opposite BusinessRoles
        }
        class MarketRole : cimCore.IdentifiedObject
        {
          unique ordered kind : MarketRoleKind [0..1]
          unique ordered reference Organisations : cimCommon.Organisation [0..*] opposite MarketRoles
          unique ordered reference status : cimCommon.Status [0..1]
        }
        class Skill : cimCommon.Document
        {
          unique ordered level : SkillLevelKind [0..1]
          unique ordered effectiveDateTime : nmeta.DateTime [1 ]
          unique ordered reference certificationPeriod : cimCommon.DateTimeInterval [0..1]
          unique ordered reference ErpPerson : cimInfERPSupport.ErpPerson [0..1] opposite Skills
          unique ordered reference Crafts : Craft [0..*] opposite Skills
          unique ordered reference QualificationRequirements : cimInfWork.QualificationRequirement [0..*] opposite Skills
        }
        class Role : cimCore.IdentifiedObject
        {
          unique ordered category : nmeta.String [1 ]
          unique ordered reference status : cimCommon.Status [0..1]
        }
        class Ratio : Element
        {
          unique ordered numerator : nmeta.Float [1 ]
          unique ordered denominator : nmeta.Float [1 ]
        }
        enum DCPolarityKind
        {
          plusN
          minus = 1
          plus = 2
          minusN = 3
          plusMinus = 4
        }
        class BusinessPlan : cimCommon.Document
        {
        }
        class Craft : cimCore.IdentifiedObject
        {
          unique ordered category : nmeta.String [1 ]
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference ErpPersons : cimInfERPSupport.ErpPerson [0..*] opposite Crafts
          unique ordered reference Skills : Skill [0..*] opposite Crafts
          unique ordered reference Capabilities : cimInfWork.Capability [0..*] opposite Crafts
        }

      }

      namespace InfLocations ( cimInfLocations ) = http://iec.ch/TC57/2009/CIM-schema-cim14#InfLocations
      {
        class PersonPropertyRole : cimInfCommon.Role
        {
          unique ordered reference LandProperty : LandProperty [0..1] opposite ErpPersonRoles
          unique ordered reference ErpPerson : cimInfERPSupport.ErpPerson [0..1] opposite LandPropertyRoles
        }
        class RedLine : cimCore.IdentifiedObject
        {
          unique ordered reference Locations : cimCommon.Location [0..*] opposite RedLines
          unique ordered reference status : cimCommon.Status [0..1]
        }
        class Hazard : cimCore.IdentifiedObject
        {
          unique ordered category : nmeta.String [1 ]
          unique ordered reference Locations : cimCommon.Location [0..*] opposite Hazards
          unique ordered reference status : cimCommon.Status [0..1]
        }
        class Route : cimCore.IdentifiedObject
        {
          unique ordered category : nmeta.String [1 ]
          unique ordered reference Locations : cimCommon.Location [0..*] opposite Routes
          unique ordered reference Crews : cimInfWork.Crew [0..*] opposite Route
          unique ordered reference status : cimCommon.Status [0..1]
        }
        enum LandPropertyKind
        {
          building
          substation = 1
          gridSupplyPoint = 2
          store = 3
          depot = 4
          external = 5
          customerPremise = 6
        }
        enum ZoneKind
        {
          weatherZone
          other = 1
          electricalNetwork = 2
          specialRestrictionLand = 3
        }
        class LocationGrant : cimCommon.Agreement
        {
          unique ordered propertyData : nmeta.String [1 ]
          unique ordered reference LandProperty : LandProperty [0..1] opposite LocationGrants
        }
        class Direction : Element
        {
          unique ordered directionInfo : nmeta.String [1 ]
          unique ordered reference Location : cimCommon.Location [0..1] opposite Directions
        }
        class LandProperty : cimCore.IdentifiedObject
        {
          unique ordered demographicKind : DemographicKind [0..1]
          unique ordered externalRecordReference : nmeta.String [1 ]
          unique ordered kind : LandPropertyKind [0..1]
          unique ordered reference ErpSiteLevelDatas : cimInfERPSupport.ErpSiteLevelData [0..*] opposite LandProperty
          unique ordered reference status : cimCommon.Status [0..1]
          unique ordered reference ErpOrganisationRoles : OrgPropertyRole [0..*] opposite LandProperty
          unique ordered reference Locations : cimCommon.Location [0..*] opposite LandProperties
          unique ordered reference LocationGrants : LocationGrant [0..*] opposite LandProperty
          unique ordered reference ErpPersonRoles : PersonPropertyRole [0..*] opposite LandProperty
          unique ordered reference RightOfWays : RightOfWay [0..*] opposite LandProperties
          unique ordered reference AssetContainers : cimAssets.AssetContainer [0..*] opposite LandProperties
        }
        class OrgPropertyRole : cimInfCommon.Role
        {
          unique ordered reference ErpOrganisation : cimInfERPSupport.ErpOrganisation [0..1] opposite LandPropertyRoles
          unique ordered reference LandProperty : LandProperty [0..*] opposite ErpOrganisationRoles
        }
        class RightOfWay : cimCommon.Agreement
        {
          unique ordered propertyData : nmeta.String [1 ]
          unique ordered reference LandProperties : LandProperty [0..*] opposite RightOfWays
        }
        enum DemographicKind
        {
          other
          rural = 1
          urban = 2
        }
        class Zone : cimCommon.Location
        {
          unique ordered kind : ZoneKind [0..1]
        }

      }

      namespace Financial ( cimFinancial ) = http://iec.ch/TC57/2009/CIM-schema-cim14#Financial
      {
        class FinancialVersion : Element
        {
          unique ordered version : nmeta.String [1 ]
          unique ordered date : nmeta.DateTime [1 ]
        }
        class Marketer : cimInfERPSupport.ErpOrganisation
        {
          unique ordered reference Resells_EnergyProduct : cimEnergyScheduling.EnergyProduct [0..*] opposite ResoldBy_Marketers
          unique ordered reference HeldBy : cimReservation.ServiceReservation [0..*] opposite Holds
          unique ordered reference HoldsTitleTo_EnergyProducts : cimEnergyScheduling.EnergyProduct [0..*] opposite TitleHeldBy_Marketer
          unique ordered reference ResoldBy : cimReservation.ServiceReservation [0..1] opposite Resells
        }
        class IntSchedAgreement : cimCommon.Agreement
        {
          unique ordered defaultIntegrationMethod : nmeta.Object [1 ]
          unique ordered reference Organisations : cimInfERPSupport.ErpOrganisation [0..*] opposite IntSchedAgreement
        }
        class TransmissionProvider : cimInfERPSupport.ErpOrganisation
        {
          unique ordered reference ServicePoint : cimReservation.ServicePoint [0..*] opposite TransmissionProvider
          unique ordered reference AncillaryServices : cimReservation.AncillaryService [0..*] opposite TransmissionProviders
          unique ordered reference For : cimEnergyScheduling.LossProfile [0..*] opposite HasLoss_
          unique ordered reference OfferedBy : cimReservation.TransmissionService [0..*] opposite Offers
          unique ordered reference Flowgate : cimMarketOperations.Flowgate [0..*] opposite TransmissionProvider
          unique ordered reference SoldBy : cimReservation.ServiceReservation [0..*] opposite Sells
          unique ordered reference TransmissionProducts : TransmissionProduct [0..*] opposite TransmissionProvider
        }
        class TransmissionProduct : cimCore.IdentifiedObject
        {
          unique ordered transmissionProductType : nmeta.Object [1 ]
          unique ordered reference LocationFor : cimReservation.TransmissionPath [0..*] opposite LocatedOn
          unique ordered reference TransmissionProvider : TransmissionProvider [0..1] opposite TransmissionProducts
          unique ordered reference Offers : cimReservation.TransmissionService [0..*] opposite OfferedAs
        }
        class GenerationProvider : cimInfERPSupport.ErpOrganisation
        {
          unique ordered reference ServicePoint : cimReservation.ServicePoint [0..*] opposite GenerationProvider
          unique ordered reference GeneratingUnits : cimProduction.GeneratingUnit [0..*] opposite OperatedBy_GenerationProvider
          unique ordered reference EnergyProducts : cimEnergyScheduling.EnergyProduct [0..*] opposite GenerationProvider
        }
        class CustomerConsumer : cimInfERPSupport.ErpOrganisation
        {
          unique ordered reference TieLines : cimEnergyScheduling.TieLine [0..*] opposite CustomerConsumer
          unique ordered reference ServicePoint : cimReservation.ServicePoint [0..*] opposite CustomerConsumer
        }
        class OpenAccessProduct : cimCommon.Agreement
        {
          unique ordered reference ProvidedBy_TransmissionService : cimReservation.TransmissionService [0..*] opposite TransContractFor
          unique ordered reference AncillaryServices : cimReservation.AncillaryService [0..*] opposite OpenAccessProduct
        }
        class ControlAreaOperator : cimInfERPSupport.ErpOrganisation
        {
          unique ordered reference AncillaryService : cimReservation.AncillaryService [0..*] opposite ControlAreaOperator
          unique ordered reference TieLines : cimEnergyScheduling.TieLine [0..*] opposite ControlAreaOperators
          unique ordered reference ControlledBy : cimEnergyScheduling.HostControlArea [0..1] opposite Controls
        }

      }

      namespace Reservation ( cimReservation ) = http://iec.ch/TC57/2009/CIM-schema-cim14#Reservation
      {
        class TransmissionPath : Element
        {
          unique ordered availTransferCapability : nmeta.Float [1 ]
          unique ordered parallelPathFlag : nmeta.Boolean [1 ]
          unique ordered totalTransferCapability : nmeta.Float [1 ]
          unique ordered reference DeliveryPointFor : ServicePoint [0..1] opposite HasAPOD_
          unique ordered reference OfferedOn : TransmissionService [0..*] opposite Offering
          unique ordered reference PointOfReceiptFor : ServicePoint [0..1] opposite HasAPOR_
          unique ordered reference For : cimEnergyScheduling.TransmissionCorridor [0..1] opposite ContainedIn
          unique ordered reference LocatedOn : cimFinancial.TransmissionProduct [0..*] opposite LocationFor
        }
        class TiePoint : cimCore.IdentifiedObject
        {
          unique ordered tiePointMWRating : nmeta.Float [1 ]
          unique ordered reference By_Measurements : cimMeas.Measurement [0..*] opposite By_TiePoint
          unique ordered reference Declared_ServicePoint : ServicePoint [0..1] opposite Declare_TiePoint
          unique ordered reference For_Measurements : cimMeas.Measurement [0..*] opposite For_TiePoint
        }
        class ServiceReservation : Element
        {
          unique ordered reference Holds : cimFinancial.Marketer [0..1] opposite HeldBy
          unique ordered reference Reserves_TransmissionService : TransmissionService [0..*] opposite ReservedBy_ServiceReservation
          unique ordered reference Reserves_AncillaryServices : AncillaryService [0..*] opposite ReservedBy_ServiceReservation
          unique ordered reference Resells : cimFinancial.Marketer [0..1] opposite ResoldBy
          unique ordered reference Sells : cimFinancial.TransmissionProvider [0..1] opposite SoldBy
        }
        class ServicePoint : cimCore.IdentifiedObject
        {
          unique ordered reference CustomerConsumer : cimFinancial.CustomerConsumer [0..1] opposite ServicePoint
          unique ordered reference TransmissionProvider : cimFinancial.TransmissionProvider [0..1] opposite ServicePoint
          unique ordered reference HasAPOR_ : TransmissionPath [0..*] opposite PointOfReceiptFor
          unique ordered reference GenerationProvider : cimFinancial.GenerationProvider [0..1] opposite ServicePoint
          unique ordered reference Declare_TiePoint : TiePoint [0..1] opposite Declared_ServicePoint
          unique ordered reference HasAPOD_ : TransmissionPath [0..*] opposite DeliveryPointFor
          unique ordered reference EnergyProducts : cimEnergyScheduling.EnergyProduct [0..*] opposite ServicePoint
          unique ordered reference MemberOf : cimEnergyScheduling.SubControlArea [0..1] opposite PartOf
        }
        class AncillaryService : cimCore.IdentifiedObject
        {
          unique ordered reference OpenAccessProduct : cimFinancial.OpenAccessProduct [0..1] opposite AncillaryServices
          unique ordered reference TransmissionProviders : cimFinancial.TransmissionProvider [0..*] opposite AncillaryServices
          unique ordered reference ReservedBy_ServiceReservation : ServiceReservation [0..1] opposite Reserves_AncillaryServices
          unique ordered reference ControlAreaOperator : cimFinancial.ControlAreaOperator [0..1] opposite AncillaryService
        }
        class ReservationVersion : Element
        {
          unique ordered date : nmeta.DateTime [1 ]
          unique ordered version : nmeta.String [1 ]
        }
        class TransmissionService : cimCore.IdentifiedObject
        {
          unique ordered reference Offering : TransmissionPath [0..*] opposite OfferedOn
          unique ordered reference OfferedAs : cimFinancial.TransmissionProduct [0..*] opposite Offers
          unique ordered reference ScheduledBy : cimEnergyScheduling.AvailableTransmissionCapacity [0..*] opposite ScheduleFor
          unique ordered reference ReservedBy_ServiceReservation : ServiceReservation [0..*] opposite Reserves_TransmissionService
          unique ordered reference TransContractFor : cimFinancial.OpenAccessProduct [0..1] opposite ProvidedBy_TransmissionService
          unique ordered reference Offers : cimFinancial.TransmissionProvider [0..1] opposite OfferedBy
        }

      }

      namespace InfMetering ( cimInfMetering ) = http://iec.ch/TC57/2009/CIM-schema-cim14#InfMetering
      {
        class WaterMeteringFunction : cimMetering.DeviceFunction
        {
        }
        class GasMeteringFunction : cimMetering.DeviceFunction
        {
        }
        class MeteringFunctionConfiguration : cimCore.IdentifiedObject
        {
          unique ordered reference ElectricMeteringFunctions : cimMetering.ElectricMeteringFunction [0..*] opposite MeteringFunctionConfiguration
        }
        class ComPort : cimCore.IdentifiedObject
        {
        }

      }

      namespace InfCustomers ( cimInfCustomers ) = http://iec.ch/TC57/2009/CIM-schema-cim14#InfCustomers
      {
        class StandardIndustryCode : cimCommon.Document
        {
          unique ordered code : nmeta.String [1 ]
          unique ordered reference CustomerAgreements : cimCustomers.CustomerAgreement [0..*] opposite StandardIndustryCode
        }
        class CustomerBillingInfo : cimCommon.Document
        {
          unique ordered dueDate : nmeta.String [1 ]
          unique ordered pymtPlanAmt : nmeta.Float [1 ]
          unique ordered lastPaymentDate : nmeta.String [1 ]
          unique ordered billingDate : nmeta.String [1 ]
          unique ordered lastPaymentAmt : nmeta.Float [1 ]
          unique ordered pymtPlanType : nmeta.String [1 ]
          unique ordered outBalance : nmeta.Float [1 ]
          unique ordered kind : CustomerBillingKind [0..1]
          unique ordered reference CustomerAccount : cimCustomers.CustomerAccount [0..1] opposite CustomerBillingInfos
          unique ordered reference ErpInvoiceLineItems : cimInfERPSupport.ErpInvoiceLineItem [0..*] opposite CustomerBillingInfos
        }
        enum CustomerBillingKind
        {
          consolidatedUdc
          consolidatedEss = 1
          separateEssUdc = 2
          other = 3
        }
        class PowerQualityPricing : cimCommon.Document
        {
          unique ordered valueUninterruptedServiceEnergy : nmeta.Float [1 ]
          unique ordered voltImbalanceViolCost : nmeta.Float [1 ]
          unique ordered voltLimitViolCost : nmeta.Float [1 ]
          unique ordered emergencyLowVoltLimit : nmeta.Float [1 ]
          unique ordered valueUninterruptedServiceP : nmeta.Float [1 ]
          unique ordered emergencyHighVoltLimit : nmeta.Float [1 ]
          unique ordered powerFactorMin : nmeta.Float [1 ]
          unique ordered normalLowVoltLimit : nmeta.Float [1 ]
          unique ordered normalHighVoltLimit : nmeta.Float [1 ]
          unique ordered reference PricingStructure : cimCustomers.PricingStructure [0..1] opposite PowerQualityPricings
          unique ordered reference ServiceDeliveryPoints : cimMetering.ServiceDeliveryPoint [0..*] opposite PowerQualityPricings
        }
        class OutageHistory : cimCommon.Document
        {
          unique ordered reference OutageReports : cimInfOperations.OutageReport [0..*] opposite OutageHistory
        }
        class WorkBillingInfo : cimCommon.Document
        {
          unique ordered receivedDateTime : nmeta.DateTime [1 ]
          unique ordered discount : nmeta.Float [1 ]
          unique ordered issueDateTime : nmeta.DateTime [1 ]
          unique ordered dueDateTime : nmeta.DateTime [1 ]
          unique ordered deposit : nmeta.Float [1 ]
          unique ordered workPrice : nmeta.Float [1 ]
          unique ordered costEstimate : nmeta.Float [1 ]
          unique ordered reference CustomerAccount : cimCustomers.CustomerAccount [0..1] opposite WorkBillingInfos
          unique ordered reference ErpLineItems : cimInfERPSupport.ErpInvoiceLineItem [0..*] opposite WorkBillingInfos
          unique ordered reference Works : cimWork.Work [0..*] opposite WorkBillingInfo
        }
        class SubscribePowerCurve : cimCore.Curve
        {
          unique ordered reference PricingStructure : cimCustomers.PricingStructure [0..1] opposite SubscribePowerCurve
        }
        class ServiceGuarantee : cimCommon.Document
        {
          unique ordered payAmount : nmeta.Float [1 ]
          unique ordered automaticPay : nmeta.Boolean [1 ]
          unique ordered serviceRequirement : nmeta.String [1 ]
          unique ordered reference applicationPeriod : cimCommon.DateTimeInterval [0..1]
        }
        class ExternalCustomerAgreement : cimCommon.Agreement
        {
        }

      }

      namespace InfLoadControl ( cimInfLoadControl ) = http://iec.ch/TC57/2009/CIM-schema-cim14#InfLoadControl
      {
        class LoadMgmtRecord : cimCommon.ActivityRecord
        {
          unique ordered loadReduction : nmeta.Float [1 ]
          unique ordered reference LoadMgmtFunction : LoadMgmtFunction [0..1] opposite LoadMgmtRecords
        }
        enum LoadStateKind
        {
          limitedLoad
          noLoad = 1
          fullLoad = 2
        }
        class LoadMgmtFunction : cimMetering.DeviceFunction
        {
          unique ordered manualOverRide : nmeta.Boolean [1 ]
          unique ordered isAutoOp : nmeta.Boolean [1 ]
          unique ordered schedulingBasis : LoadMgmtKind [0..1]
          unique ordered remoteOverRide : nmeta.Boolean [1 ]
          unique ordered loadStatus : LoadStateKind [0..1]
          unique ordered overRideTimeOut : nmeta.Float [1 ]
          unique ordered reference Switches : cimWires.Switch [0..*] opposite LoadMgmtFunctions
          unique ordered reference LoadMgmtRecords : LoadMgmtRecord [0..*] opposite LoadMgmtFunction
        }
        class LoadShedFunction : LoadMgmtFunction
        {
          unique ordered switchedLoad : nmeta.Float [1 ]
        }
        enum LoadMgmtKind
        {
          timeBased
          remoteControl = 1
          manualControl = 2
          tariffBased = 3
        }
        class LoadLimitFunction : LoadMgmtFunction
        {
          unique ordered isAutoReconOp : nmeta.Boolean [1 ]
          unique ordered maximumLoad : nmeta.Float [1 ]
          unique ordered reconnectTimeDelay : nmeta.Float [1 ]
          unique ordered disconnectTimeDelay : nmeta.Float [1 ]
        }

      }

      namespace InfTypeAsset ( cimInfTypeAsset ) = http://iec.ch/TC57/2009/CIM-schema-cim14#InfTypeAsset
      {
        class TypeAssetCatalogue : cimCore.IdentifiedObject
        {
          unique ordered reference TypeAssets : TypeAsset [0..*] opposite TypeAssetCatalogue
          unique ordered reference status : cimCommon.Status [0..1]
        }
        class ElectricalTypeAsset : TypeAsset
        {
          unique ordered reference ElectricalInfos : cimInfAssets.ElectricalInfo [0..*] opposite ElectricalTypeAssets
        }
        class TypeAsset : cimCore.IdentifiedObject
        {
          unique ordered stockItem : nmeta.Boolean [1 ]
          unique ordered estimatedUnitCost : nmeta.Float [1 ]
          unique ordered quantity : nmeta.String [1 ]
          unique ordered reference TypeAssetCatalogue : TypeAssetCatalogue [0..1] opposite TypeAssets
          unique ordered reference ErpBomItemDatas : cimInfERPSupport.ErpBomItemData [0..*] opposite TypeAsset
          unique ordered reference AssetInfo : cimInfAssets.AssetInfo [0..1] opposite TypeAsset
          unique ordered reference ErpReqLineItems : cimInfERPSupport.ErpReqLineItem [0..*] opposite TypeAsset
          unique ordered reference ErpInventoryIssues : cimInfERPSupport.ErpIssueInventory [0..*] opposite TypeAsset
          unique ordered reference CUWorkEquipmentAsset : cimInfWork.CUWorkEquipmentItem [0..1] opposite TypeAsset
          unique ordered reference AssetModels : cimAssetModels.AssetModel [0..*] opposite TypeAsset
          unique ordered reference CUAsset : cimInfWork.CUAsset [0..1] opposite TypeAsset
        }
        class GeneratorTypeAsset : ElectricalTypeAsset
        {
          unique ordered xDirectSync : nmeta.Float [1 ]
          unique ordered rDirectSync : nmeta.Float [1 ]
          unique ordered rQuadTrans : nmeta.Float [1 ]
          unique ordered xQuadSync : nmeta.Float [1 ]
          unique ordered xQuadSubtrans : nmeta.Float [1 ]
          unique ordered minP : nmeta.Float [1 ]
          unique ordered minQ : nmeta.Float [1 ]
          unique ordered maxQ : nmeta.Float [1 ]
          unique ordered maxP : nmeta.Float [1 ]
          unique ordered rQuadSync : nmeta.Float [1 ]
          unique ordered xDirectSubtrans : nmeta.Float [1 ]
          unique ordered xDirectTrans : nmeta.Float [1 ]
          unique ordered rDirectTrans : nmeta.Float [1 ]
          unique ordered rDirectSubtrans : nmeta.Float [1 ]
          unique ordered xQuadTrans : nmeta.Float [1 ]
          unique ordered rQuadSubtrans : nmeta.Float [1 ]
        }

      }

    }

    namespace Meas ( cimMeas ) = http://iec.ch/TC57/2009/CIM-schema-cim14#Meas
    {
      class Accumulator : Measurement
      {
        unique ordered maxValue : nmeta.Integer [1 ]
        unique ordered reference AccumulatorValues : AccumulatorValue [0..*] opposite Accumulator
        unique ordered reference LimitSets : AccumulatorLimitSet [0..*] opposite Measurements
      }
      class MeasurementValueQuality : Quality61850
      {
        unique ordered reference MeasurementValue : MeasurementValue [0..1] opposite MeasurementValueQuality
      }
      class AccumulatorLimit : Limit
      {
        unique ordered value : nmeta.Integer [1 ]
        unique ordered reference LimitSet : AccumulatorLimitSet [0..1] opposite Limits
      }
      class PotentialTransformer : cimCore.Equipment
      {
        unique ordered nominalRatio : nmeta.Float [1 ]
        unique ordered ptClass : nmeta.String [1 ]
        unique ordered accuracyClass : nmeta.String [1 ]
      }
      class MeasurementValue : cimCore.IdentifiedObject
      {
        unique ordered sensorAccuracy : nmeta.Float [1 ]
        unique ordered timeStamp : nmeta.DateTime [1 ]
        unique ordered reference GmlValues : cimInfGMLSupport.GmlValue [0..*] opposite MeasurementValue
        unique ordered reference ProcedureDataSets : cimInfAssets.ProcedureDataSet [0..*] opposite MeasurementValues
        unique ordered reference MeasurementValueQuality : MeasurementValueQuality [0..1] opposite MeasurementValue
        unique ordered reference ErpPerson : cimInfERPSupport.ErpPerson [0..1] opposite MeasurementValues
        unique ordered reference MeasurementValueSource : MeasurementValueSource [0..1] opposite MeasurementValues
        unique ordered reference RemoteSource : cimSCADA.RemoteSource [0..1] opposite MeasurementValue
      }
      class Analog : Measurement
      {
        unique ordered minValue : nmeta.Float [1 ]
        unique ordered normalValue : nmeta.Float [1 ]
        unique ordered positiveFlowIn : nmeta.Boolean [1 ]
        unique ordered maxValue : nmeta.Float [1 ]
        unique ordered reference LimitSets : AnalogLimitSet [0..*] opposite Measurements
        unique ordered reference SetPoint : SetPoint [0..1] opposite Analog
        unique ordered reference AnalogValues : AnalogValue [0..*] opposite Analog
      }
      class StringMeasurementValue : MeasurementValue
      {
        unique ordered value : nmeta.String [1 ]
        unique ordered reference StringMeasurement : StringMeasurement [0..1] opposite StringMeasurementValues
      }
      class ValueToAlias : cimCore.IdentifiedObject
      {
        unique ordered value : nmeta.Integer [1 ]
        unique ordered reference ValueAliasSet : ValueAliasSet [0..1] opposite Values
      }
      class Limit : cimCore.IdentifiedObject
      {
        unique ordered reference Procedures : cimInfAssets.Procedure [0..*] opposite Limits
      }
      class CurrentTransformer : cimCore.Equipment
      {
        unique ordered maxRatio : nmeta.Float [1 ]
        unique ordered coreCount : nmeta.Integer [1 ]
        unique ordered ctClass : nmeta.String [1 ]
        unique ordered usage : nmeta.String [1 ]
        unique ordered accuracyLimit : nmeta.String [1 ]
        unique ordered accuracyClass : nmeta.String [1 ]
      }
      class AnalogLimitSet : LimitSet
      {
        unique ordered reference Measurements : Analog [0..*] opposite LimitSets
        unique ordered reference Limits : AnalogLimit [0..*] opposite LimitSet
      }
      class AccumulatorValue : MeasurementValue
      {
        unique ordered value : nmeta.Integer [1 ]
        unique ordered reference Accumulator : Accumulator [0..1] opposite AccumulatorValues
      }
      class SetPoint : Control
      {
        unique ordered normalValue : nmeta.Float [1 ]
        unique ordered value : nmeta.Float [1 ]
        unique ordered maxValue : nmeta.Float [1 ]
        unique ordered minValue : nmeta.Float [1 ]
        unique ordered reference Analog : Analog [0..1] opposite SetPoint
      }
      class DiscreteValue : MeasurementValue
      {
        unique ordered value : nmeta.Integer [1 ]
        unique ordered reference Discrete : Discrete [0..1] opposite DiscreteValues
      }
      class AnalogValue : MeasurementValue
      {
        unique ordered value : nmeta.Float [1 ]
        unique ordered reference AltGeneratingUnit : cimControlArea.AltGeneratingUnitMeas [0..*] opposite AnalogValue
        unique ordered reference AltTieMeas : cimControlArea.AltTieMeas [0..*] opposite AnalogValue
        unique ordered reference Analog : Analog [0..1] opposite AnalogValues
      }
      enum Validity
      {
        INVALID
        GOOD = 1
        QUESTIONABLE = 2
      }
      class ControlType : cimCore.IdentifiedObject
      {
        unique ordered reference Controls : Control [0..*] opposite ControlType
      }
      class MeasurementValueSource : cimCore.IdentifiedObject
      {
        unique ordered reference MeasurementValues : MeasurementValue [0..*] opposite MeasurementValueSource
      }
      class AnalogLimit : Limit
      {
        unique ordered value : nmeta.Float [1 ]
        unique ordered reference LimitSet : AnalogLimitSet [0..1] opposite Limits
      }
      class Command : Control
      {
        unique ordered normalValue : nmeta.Integer [1 ]
        unique ordered value : nmeta.Integer [1 ]
        unique ordered reference ValueAliasSet : ValueAliasSet [0..1] opposite Commands
        unique ordered reference Discrete : Discrete [0..1] opposite Command
      }
      class Measurement : cimCore.IdentifiedObject
      {
        unique ordered measurementType : nmeta.String [1 ]
        unique ordered reference By_TiePoint : cimReservation.TiePoint [0..1] opposite By_Measurements
        unique ordered reference Terminal : cimCore.Terminal [0..1] opposite Measurements
        unique ordered reference DynamicSchedules : cimEnergyScheduling.DynamicSchedule [0..*] opposite Measurement
        unique ordered reference Locations : cimCommon.Location [0..*] opposite Measurements
        unique ordered reference Asset : cimAssets.Asset [0..1] opposite Measurements
        unique ordered reference ViolationLimits : cimMarketOperations.ViolationLimit [0..*] opposite Measurement
        unique ordered reference Documents : cimCommon.Document [0..*] opposite Measurements
        unique ordered reference Pnode : cimMarketOperations.Pnode [0..1] opposite Measurements
        unique ordered reference PowerSystemResource : cimCore.PowerSystemResource [0..1] opposite Measurements
        unique ordered reference Unit : cimCore.Unit [0..1] opposite Measurements
        unique ordered reference For_TiePoint : cimReservation.TiePoint [0..1] opposite For_Measurements
      }
      class ValueAliasSet : cimCore.IdentifiedObject
      {
        unique ordered reference Values : ValueToAlias [0..*] opposite ValueAliasSet
        unique ordered reference Commands : Command [0..*] opposite ValueAliasSet
        unique ordered reference Discretes : Discrete [0..*] opposite ValueAliasSet
      }
      class Control : cimCore.IdentifiedObject
      {
        unique ordered operationInProgress : nmeta.Boolean [1 ]
        unique ordered timeStamp : nmeta.DateTime [1 ]
        unique ordered reference RegulatingCondEq : cimWires.RegulatingCondEq [0..1] opposite Controls
        unique ordered reference ControlType : ControlType [0..1] opposite Controls
        unique ordered reference Unit : cimCore.Unit [0..1] opposite Controls
        unique ordered reference RemoteControl : cimSCADA.RemoteControl [0..1] opposite Control
      }
      class AccumulatorLimitSet : LimitSet
      {
        unique ordered reference Measurements : Accumulator [0..*] opposite LimitSets
        unique ordered reference Limits : AccumulatorLimit [0..*] opposite LimitSet
      }
      class Quality61850 : Element
      {
        unique ordered suspect : nmeta.Boolean [1 ]
        unique ordered estimatorReplaced : nmeta.Boolean [1 ]
        unique ordered validity : Validity [0..1]
        unique ordered badReference : nmeta.Boolean [1 ]
        unique ordered oldData : nmeta.Boolean [1 ]
        unique ordered failure : nmeta.Boolean [1 ]
        unique ordered overFlow : nmeta.Boolean [1 ]
        unique ordered source : cimSCADA.Source [0..1]
        unique ordered operatorBlocked : nmeta.Boolean [1 ]
        unique ordered test : nmeta.Boolean [1 ]
        unique ordered oscillatory : nmeta.Boolean [1 ]
        unique ordered outOfRange : nmeta.Boolean [1 ]
      }
      class Discrete : Measurement
      {
        unique ordered minValue : nmeta.Integer [1 ]
        unique ordered maxValue : nmeta.Integer [1 ]
        unique ordered normalValue : nmeta.Integer [1 ]
        unique ordered reference ValueAliasSet : ValueAliasSet [0..1] opposite Discretes
        unique ordered reference Command : Command [0..1] opposite Discrete
        unique ordered reference DiscreteValues : DiscreteValue [0..*] opposite Discrete
      }
      class StringMeasurement : Measurement
      {
        unique ordered reference StringMeasurementValues : StringMeasurementValue [0..*] opposite StringMeasurement
      }
      class LimitSet : cimCore.IdentifiedObject
      {
        unique ordered isPercentageLimits : nmeta.Boolean [1 ]
      }

    }

    namespace Generation ( cimGeneration ) = http://iec.ch/TC57/2009/CIM-schema-cim14#Generation
    {

      namespace GenerationDynamics ( cimGenerationDynamics ) = http://iec.ch/TC57/2009/CIM-schema-cim14#GenerationDynamics
      {
        class Supercritical : FossilSteamSupply
        {
        }
        enum TurbineType
        {
          pelton
          francis = 1
          kaplan = 2
        }
        class CombustionTurbine : PrimeMover
        {
          unique ordered auxPowerVersusFrequency : nmeta.Float [1 ]
          unique ordered powerVariationByTemp : nmeta.Float [1 ]
          unique ordered ambientTemp : nmeta.Float [1 ]
          unique ordered referenceTemp : nmeta.Float [1 ]
          unique ordered heatRecoveryFlag : nmeta.Boolean [1 ]
          unique ordered capabilityVersusFrequency : nmeta.Float [1 ]
          unique ordered auxPowerVersusVoltage : nmeta.Float [1 ]
          unique ordered timeConstant : nmeta.Float [1 ]
          unique ordered reference HeatRecoveryBoiler : HeatRecoveryBoiler [0..1] opposite CombustionTurbines
          unique ordered reference CTTempActivePowerCurve : CTTempActivePowerCurve [0..1] opposite CombustionTurbine
          unique ordered reference AirCompressor : cimProduction.AirCompressor [0..1] opposite CombustionTurbine
        }
        enum BoilerControlMode
        {
          coordinated
          following = 1
        }
        class FossilSteamSupply : SteamSupply
        {
          unique ordered pressureCtrlPG : nmeta.Float [1 ]
          unique ordered superHeater1Capacity : nmeta.Float [1 ]
          unique ordered feedWaterPG : nmeta.Float [1 ]
          unique ordered controlTC : nmeta.Float [1 ]
          unique ordered mechPowerSensorLag : nmeta.Float [1 ]
          unique ordered throttlePressureSP : nmeta.Float [1 ]
          unique ordered maxErrorRateP : nmeta.Float [1 ]
          unique ordered controlIC : nmeta.Float [1 ]
          unique ordered minErrorRateP : nmeta.Float [1 ]
          unique ordered fuelDemandLimit : nmeta.Float [1 ]
          unique ordered superHeaterPipePD : nmeta.Float [1 ]
          unique ordered pressureCtrlDG : nmeta.Float [1 ]
          unique ordered auxPowerVersusVoltage : nmeta.Float [1 ]
          unique ordered controlPC : nmeta.Float [1 ]
          unique ordered feedWaterTC : nmeta.Float [1 ]
          unique ordered controlErrorBiasP : nmeta.Float [1 ]
          unique ordered feedWaterIG : nmeta.Float [1 ]
          unique ordered pressureCtrlIG : nmeta.Float [1 ]
          unique ordered fuelSupplyTC : nmeta.Float [1 ]
          unique ordered auxPowerVersusFrequency : nmeta.Float [1 ]
          unique ordered pressureFeedback : nmeta.Integer [1 ]
          unique ordered fuelSupplyDelay : nmeta.Float [1 ]
          unique ordered boilerControlMode : BoilerControlMode [0..1]
          unique ordered superHeater2Capacity : nmeta.Float [1 ]
          unique ordered controlPEB : nmeta.Float [1 ]
          unique ordered controlPED : nmeta.Float [1 ]
        }
        class CTTempActivePowerCurve : cimCore.Curve
        {
          unique ordered reference CombustionTurbine : CombustionTurbine [0..1] opposite CTTempActivePowerCurve
        }
        class Subcritical : FossilSteamSupply
        {
        }
        class SteamSupply : cimCore.PowerSystemResource
        {
          unique ordered steamSupplyRating : nmeta.Float [1 ]
          unique ordered reference SteamTurbines : SteamTurbine [0..*] opposite SteamSupplys
        }
        class PrimeMover : cimCore.PowerSystemResource
        {
          unique ordered primeMoverRating : nmeta.Float [1 ]
          unique ordered reference SynchronousMachines : cimWires.SynchronousMachine [0..*] opposite PrimeMovers
        }
        class HeatRecoveryBoiler : FossilSteamSupply
        {
          unique ordered steamSupplyRating2 : nmeta.Float [1 ]
          unique ordered reference CombustionTurbines : CombustionTurbine [0..*] opposite HeatRecoveryBoiler
        }
        class BWRSteamSupply : SteamSupply
        {
          unique ordered lowPowerLimit : nmeta.Float [1 ]
          unique ordered inCoreThermalTC : nmeta.Float [1 ]
          unique ordered integralGain : nmeta.Float [1 ]
          unique ordered pressureSetpointGA : nmeta.Float [1 ]
          unique ordered rfAux1 : nmeta.Float [1 ]
          unique ordered rfAux2 : nmeta.Float [1 ]
          unique ordered lowerLimit : nmeta.Float [1 ]
          unique ordered rodPatternConstant : nmeta.Float [1 ]
          unique ordered rfAux8 : nmeta.Float [1 ]
          unique ordered rfAux7 : nmeta.Float [1 ]
          unique ordered rodPattern : nmeta.Float [1 ]
          unique ordered rfAux4 : nmeta.Float [1 ]
          unique ordered rfAux3 : nmeta.Float [1 ]
          unique ordered rfAux6 : nmeta.Float [1 ]
          unique ordered rfAux5 : nmeta.Float [1 ]
          unique ordered proportionalGain : nmeta.Float [1 ]
          unique ordered upperLimit : nmeta.Float [1 ]
          unique ordered highPowerLimit : nmeta.Float [1 ]
          unique ordered pressureSetpointTC2 : nmeta.Float [1 ]
          unique ordered pressureSetpointTC1 : nmeta.Float [1 ]
          unique ordered pressureLimit : nmeta.Float [1 ]
        }
        class DrumBoiler : FossilSteamSupply
        {
          unique ordered drumBoilerRating : nmeta.Float [1 ]
        }
        class SteamTurbine : PrimeMover
        {
          unique ordered shaft2PowerLP1 : nmeta.Float [1 ]
          unique ordered shaft2PowerLP2 : nmeta.Float [1 ]
          unique ordered shaft2PowerHP : nmeta.Float [1 ]
          unique ordered shaft1PowerIP : nmeta.Float [1 ]
          unique ordered reheater1TC : nmeta.Float [1 ]
          unique ordered shaft1PowerLP2 : nmeta.Float [1 ]
          unique ordered shaft1PowerLP1 : nmeta.Float [1 ]
          unique ordered crossoverTC : nmeta.Float [1 ]
          unique ordered steamChestTC : nmeta.Float [1 ]
          unique ordered shaft1PowerHP : nmeta.Float [1 ]
          unique ordered shaft2PowerIP : nmeta.Float [1 ]
          unique ordered reheater2TC : nmeta.Float [1 ]
          unique ordered reference SteamSupplys : SteamSupply [0..*] opposite SteamTurbines
        }
        class PWRSteamSupply : SteamSupply
        {
          unique ordered hotLegToColdLegGain : nmeta.Float [1 ]
          unique ordered pressureCG : nmeta.Float [1 ]
          unique ordered hotLegLagTC : nmeta.Float [1 ]
          unique ordered steamPressureDropLagTC : nmeta.Float [1 ]
          unique ordered throttlePressureSP : nmeta.Float [1 ]
          unique ordered coldLegFBLeadTC2 : nmeta.Float [1 ]
          unique ordered coldLegFBLeadTC1 : nmeta.Float [1 ]
          unique ordered coldLegLagTC : nmeta.Float [1 ]
          unique ordered steamFlowFG : nmeta.Float [1 ]
          unique ordered coreHTLagTC2 : nmeta.Float [1 ]
          unique ordered coreHTLagTC1 : nmeta.Float [1 ]
          unique ordered coreNeutronicsEffTC : nmeta.Float [1 ]
          unique ordered steamPressureFG : nmeta.Float [1 ]
          unique ordered feedbackFactor : nmeta.Float [1 ]
          unique ordered hotLegSteamGain : nmeta.Float [1 ]
          unique ordered coreNeutronicsHT : nmeta.Float [1 ]
          unique ordered coldLegFG1 : nmeta.Float [1 ]
          unique ordered coldLegFG2 : nmeta.Float [1 ]
          unique ordered throttlePressureFactor : nmeta.Float [1 ]
          unique ordered coldLegFBLagTC : nmeta.Float [1 ]
        }
        class HydroTurbine : PrimeMover
        {
          unique ordered maxHeadMaxP : nmeta.Float [1 ]
          unique ordered transientDroopTime : nmeta.Float [1 ]
          unique ordered gateUpperLimit : nmeta.Float [1 ]
          unique ordered minHeadMaxP : nmeta.Float [1 ]
          unique ordered turbineRating : nmeta.Float [1 ]
          unique ordered turbineType : TurbineType [0..1]
          unique ordered speedRating : nmeta.Float [1 ]
          unique ordered gateRateLimit : nmeta.Float [1 ]
          unique ordered waterStartingTime : nmeta.Float [1 ]
          unique ordered transientRegulation : nmeta.Float [1 ]
          unique ordered speedRegulation : nmeta.Float [1 ]
        }

      }

      namespace Production ( cimProduction ) = http://iec.ch/TC57/2009/CIM-schema-cim14#Production
      {
        class HydroGeneratingUnit : GeneratingUnit
        {
          unique ordered energyConversionCapability : HydroEnergyConversionKind [0..1]
          unique ordered hydroUnitWaterCost : nmeta.Float [1 ]
          unique ordered reference TailbayLossCurve : TailbayLossCurve [0..*] opposite HydroGeneratingUnit
          unique ordered reference HydroPowerPlant : HydroPowerPlant [0..1] opposite HydroGeneratingUnits
          unique ordered reference HydroGeneratingEfficiencyCurves : HydroGeneratingEfficiencyCurve [0..*] opposite HydroGeneratingUnit
          unique ordered reference PenstockLossCurve : PenstockLossCurve [0..1] opposite HydroGeneratingUnit
        }
        class HeatRateCurve : cimCore.Curve
        {
          unique ordered isNetGrossP : nmeta.Boolean [1 ]
          unique ordered reference ThermalGeneratingUnit : ThermalGeneratingUnit [0..1] opposite HeatRateCurve
        }
        class StartIgnFuelCurve : cimCore.Curve
        {
          unique ordered ignitionFuelType : FuelType [0..1]
          unique ordered reference StartupModel : StartupModel [0..1] opposite StartIgnFuelCurve
        }
        enum FuelType
        {
          oil
          coal = 1
          lignite = 2
          gas = 3
        }
        class CogenerationPlant : cimCore.PowerSystemResource
        {
          unique ordered cogenLPSteamRating : nmeta.Float [1 ]
          unique ordered cogenHPSteamRating : nmeta.Float [1 ]
          unique ordered cogenHPSendoutRating : nmeta.Float [1 ]
          unique ordered cogenLPSendoutRating : nmeta.Float [1 ]
          unique ordered ratedP : nmeta.Float [1 ]
          unique ordered reference SteamSendoutSchedule : SteamSendoutSchedule [0..1] opposite CogenerationPlant
          unique ordered reference ThermalGeneratingUnits : ThermalGeneratingUnit [0..*] opposite CogenerationPlant
        }
        class CAESPlant : cimCore.PowerSystemResource
        {
          unique ordered energyStorageCapacity : nmeta.Float [1 ]
          unique ordered ratedCapacityP : nmeta.Float [1 ]
          unique ordered reference ThermalGeneratingUnit : ThermalGeneratingUnit [0..1] opposite CAESPlant
          unique ordered reference AirCompressor : AirCompressor [0..1] opposite CAESPlant
        }
        class ThermalGeneratingUnit : GeneratingUnit
        {
          unique ordered oMCost : nmeta.Float [1 ]
          unique ordered reference CombinedCyclePlant : CombinedCyclePlant [0..1] opposite ThermalGeneratingUnits
          unique ordered reference CAESPlant : CAESPlant [0..1] opposite ThermalGeneratingUnit
          unique ordered reference EmissionCurves : EmissionCurve [0..*] opposite ThermalGeneratingUnit
          unique ordered reference HeatInputCurve : HeatInputCurve [0..1] opposite ThermalGeneratingUnit
          unique ordered reference ShutdownCurve : ShutdownCurve [0..1] opposite ThermalGeneratingUnit
          unique ordered reference HeatRateCurve : HeatRateCurve [0..1] opposite ThermalGeneratingUnit
          unique ordered reference IncrementalHeatRateCurve : IncrementalHeatRateCurve [0..1] opposite ThermalGeneratingUnit
          unique ordered reference CogenerationPlant : CogenerationPlant [0..1] opposite ThermalGeneratingUnits
          unique ordered reference FossilFuels : FossilFuel [0..*] opposite ThermalGeneratingUnit
          unique ordered reference StartupModel : StartupModel [0..1] opposite ThermalGeneratingUnit
          unique ordered reference FuelAllocationSchedules : FuelAllocationSchedule [0..*] opposite ThermalGeneratingUnit
          unique ordered reference EmmissionAccounts : EmissionAccount [0..*] opposite ThermalGeneratingUnit
        }
        enum PenstockType
        {
        }
        class WindGeneratingUnit : GeneratingUnit
        {
        }
        class TailbayLossCurve : cimCore.Curve
        {
          unique ordered reference HydroGeneratingUnit : HydroGeneratingUnit [0..1] opposite TailbayLossCurve
        }
        class StartRampCurve : cimCore.Curve
        {
          unique ordered hotStandbyRamp : nmeta.Float [1 ]
          unique ordered reference StartupModel : StartupModel [0..1] opposite StartRampCurve
        }
        class StartupModel : cimCore.IdentifiedObject
        {
          unique ordered fixedMaintCost : nmeta.Float [1 ]
          unique ordered riskFactorCost : nmeta.Float [1 ]
          unique ordered stbyAuxP : nmeta.Float [1 ]
          unique ordered startupDate : nmeta.DateTime [1 ]
          unique ordered minimumDownTime : nmeta.Float [1 ]
          unique ordered minimumRunTime : nmeta.Float [1 ]
          unique ordered startupPriority : nmeta.Integer [1 ]
          unique ordered startupCost : nmeta.Float [1 ]
          unique ordered hotStandbyHeat : nmeta.Float [1 ]
          unique ordered incrementalMaintCost : nmeta.Float [1 ]
          unique ordered reference StartIgnFuelCurve : StartIgnFuelCurve [0..1] opposite StartupModel
          unique ordered reference StartRampCurve : StartRampCurve [0..1] opposite StartupModel
          unique ordered reference StartMainFuelCurve : StartMainFuelCurve [0..1] opposite StartupModel
          unique ordered reference ThermalGeneratingUnit : ThermalGeneratingUnit [0..1] opposite StartupModel
        }
        class CombinedCyclePlant : cimCore.PowerSystemResource
        {
          unique ordered combCyclePlantRating : nmeta.Float [1 ]
          unique ordered reference ThermalGeneratingUnits : ThermalGeneratingUnit [0..*] opposite CombinedCyclePlant
        }
        class HydroPump : cimCore.PowerSystemResource
        {
          unique ordered pumpDischAtMinHead : nmeta.Float [1 ]
          unique ordered pumpPowerAtMinHead : nmeta.Float [1 ]
          unique ordered pumpPowerAtMaxHead : nmeta.Float [1 ]
          unique ordered pumpDischAtMaxHead : nmeta.Float [1 ]
          unique ordered reference HydroPowerPlant : HydroPowerPlant [0..1] opposite HydroPumps
          unique ordered reference SynchronousMachine : cimWires.SynchronousMachine [0..1] opposite HydroPump
          unique ordered reference HydroPumpOpSchedule : HydroPumpOpSchedule [0..1] opposite HydroPump
        }
        class PenstockLossCurve : cimCore.Curve
        {
          unique ordered reference HydroGeneratingUnit : HydroGeneratingUnit [0..1] opposite PenstockLossCurve
        }
        class ShutdownCurve : cimCore.Curve
        {
          unique ordered shutdownCost : nmeta.Float [1 ]
          unique ordered shutdownDate : nmeta.DateTime [1 ]
          unique ordered reference ThermalGeneratingUnit : ThermalGeneratingUnit [0..1] opposite ShutdownCurve
        }
        enum GeneratorControlSource
        {
          onAGC
          unavailable = 1
          plantControl = 2
          offAGC = 3
        }
        class IncrementalHeatRateCurve : cimCore.Curve
        {
          unique ordered isNetGrossP : nmeta.Boolean [1 ]
          unique ordered reference ThermalGeneratingUnit : ThermalGeneratingUnit [0..1] opposite IncrementalHeatRateCurve
        }
        enum EmissionValueSource
        {
          measured
          calculated = 1
        }
        class GenUnitOpSchedule : cimCore.RegularIntervalSchedule
        {
          unique ordered reference GeneratingUnit : GeneratingUnit [0..1] opposite GenUnitOpSchedule
        }
        class TargetLevelSchedule : cimCore.Curve
        {
          unique ordered highLevelLimit : nmeta.Float [1 ]
          unique ordered lowLevelLimit : nmeta.Float [1 ]
          unique ordered reference Reservoir : Reservoir [0..1] opposite TargetLevelSchedule
        }
        class EmissionCurve : cimCore.Curve
        {
          unique ordered emissionContent : nmeta.Float [1 ]
          unique ordered isNetGrossP : nmeta.Boolean [1 ]
          unique ordered emissionType : EmissionType [0..1]
          unique ordered reference ThermalGeneratingUnit : ThermalGeneratingUnit [0..1] opposite EmissionCurves
        }
        enum GeneratorOperatingMode
        {
          fixed
          off = 1
          LFC = 2
          REG = 3
          manual = 4
          AGC = 5
          EDC = 6
          MRN = 7
        }
        class GenUnitOpCostCurve : cimCore.Curve
        {
          unique ordered isNetGrossP : nmeta.Boolean [1 ]
          unique ordered reference GeneratingUnit : GeneratingUnit [0..1] opposite GenUnitOpCostCurves
        }
        class FossilFuel : cimCore.IdentifiedObject
        {
          unique ordered fuelEffFactor : nmeta.Float [1 ]
          unique ordered fossilFuelType : FuelType [0..1]
          unique ordered fuelMixture : nmeta.Float [1 ]
          unique ordered fuelCost : nmeta.Float [1 ]
          unique ordered lowBreakpointP : nmeta.Float [1 ]
          unique ordered fuelHandlingCost : nmeta.Float [1 ]
          unique ordered fuelSulfur : nmeta.Float [1 ]
          unique ordered fuelHeatContent : nmeta.Float [1 ]
          unique ordered highBreakpointP : nmeta.Float [1 ]
          unique ordered fuelDispatchCost : nmeta.Float [1 ]
          unique ordered reference FuelAllocationSchedules : FuelAllocationSchedule [0..*] opposite FossilFuel
          unique ordered reference ThermalGeneratingUnit : ThermalGeneratingUnit [0..1] opposite FossilFuels
        }
        class InflowForecast : cimCore.RegularIntervalSchedule
        {
          unique ordered reference Reservoir : Reservoir [0..1] opposite InflowForecasts
        }
        enum SpillwayGateType
        {
        }
        class HydroPowerPlant : cimCore.PowerSystemResource
        {
          unique ordered genRatedP : nmeta.Float [1 ]
          unique ordered surgeTankCrestLevel : nmeta.Float [1 ]
          unique ordered dischargeTravelDelay : nmeta.Float [1 ]
          unique ordered pumpRatedP : nmeta.Float [1 ]
          unique ordered penstockType : PenstockType [0..1]
          unique ordered hydroPlantType : HydroPlantType [0..1]
          unique ordered plantRatedHead : nmeta.Float [1 ]
          unique ordered surgeTankCode : SurgeTankCode [0..1]
          unique ordered plantDischargeCapacity : nmeta.Float [1 ]
          unique ordered reference GenSourcePumpDischargeReservoir : Reservoir [0..1] opposite UpstreamFromHydroPowerPlants
          unique ordered reference HydroGeneratingUnits : HydroGeneratingUnit [0..*] opposite HydroPowerPlant
          unique ordered reference HydroPumps : HydroPump [0..*] opposite HydroPowerPlant
          unique ordered reference Reservoir : Reservoir [0..1] opposite HydroPowerPlants
        }
        class StartMainFuelCurve : cimCore.Curve
        {
          unique ordered mainFuelType : FuelType [0..1]
          unique ordered reference StartupModel : StartupModel [0..1] opposite StartMainFuelCurve
        }
        enum GeneratorControlMode
        {
          setpoint
          pulse = 1
        }
        enum HydroPlantType
        {
          majorStorage
          pumpedStorage = 1
          minorStorage = 2
          runOfRiver = 3
        }
        class LevelVsVolumeCurve : cimCore.Curve
        {
          unique ordered reference Reservoir : Reservoir [0..1] opposite LevelVsVolumeCurves
        }
        class HeatInputCurve : cimCore.Curve
        {
          unique ordered heatInputOffset : nmeta.Float [1 ]
          unique ordered isNetGrossP : nmeta.Boolean [1 ]
          unique ordered heatInputEff : nmeta.Float [1 ]
          unique ordered auxPowerMult : nmeta.Float [1 ]
          unique ordered auxPowerOffset : nmeta.Float [1 ]
          unique ordered reference ThermalGeneratingUnit : ThermalGeneratingUnit [0..1] opposite HeatInputCurve
        }
        class HydroPumpOpSchedule : cimCore.RegularIntervalSchedule
        {
          unique ordered reference HydroPump : HydroPump [0..1] opposite HydroPumpOpSchedule
        }
        enum EmissionType
        {
          chlorine
          nitrogenOxide = 1
          carbonDioxide = 2
          hydrogenSulfide = 3
          sulfurDioxide = 4
          carbonDisulfide = 5
        }
        class SteamSendoutSchedule : cimCore.RegularIntervalSchedule
        {
          unique ordered reference CogenerationPlant : CogenerationPlant [0..1] opposite SteamSendoutSchedule
        }
        class GeneratingUnit : cimCore.Equipment
        {
          unique ordered highControlLimit : nmeta.Float [1 ]
          unique ordered raiseRampRate : nmeta.Float [1 ]
          unique ordered genOperatingMode : GeneratorOperatingMode [0..1]
          unique ordered autoCntrlMarginP : nmeta.Float [1 ]
          unique ordered controlPulseLow : nmeta.Float [1 ]
          unique ordered governorMPL : nmeta.Float [1 ]
          unique ordered ratedGrossMaxP : nmeta.Float [1 ]
          unique ordered allocSpinResP : nmeta.Float [1 ]
          unique ordered stepChange : nmeta.Float [1 ]
          unique ordered startupCost : nmeta.Float [1 ]
          unique ordered spinReserveRamp : nmeta.Float [1 ]
          unique ordered nominalP : nmeta.Float [1 ]
          unique ordered governorSCD : nmeta.Float [1 ]
          unique ordered penaltyFactor : nmeta.Float [1 ]
          unique ordered controlPulseHigh : nmeta.Float [1 ]
          unique ordered energyMinP : nmeta.Float [1 ]
          unique ordered startupTime : nmeta.Float [1 ]
          unique ordered tieLinePF : nmeta.Float [1 ]
          unique ordered lowerRampRate : nmeta.Float [1 ]
          unique ordered initialP : nmeta.Float [1 ]
          unique ordered controlResponseRate : nmeta.Float [1 ]
          unique ordered minEconomicP : nmeta.Float [1 ]
          unique ordered modelDetail : nmeta.Object [1 ]
          unique ordered fuelPriority : nmeta.Integer [1 ]
          unique ordered maxEconomicP : nmeta.Float [1 ]
          unique ordered genControlSource : GeneratorControlSource [0..1]
          unique ordered ratedGrossMinP : nmeta.Float [1 ]
          unique ordered variableCost : nmeta.Float [1 ]
          unique ordered minOperatingP : nmeta.Float [1 ]
          unique ordered baseP : nmeta.Float [1 ]
          unique ordered shortPF : nmeta.Float [1 ]
          unique ordered lowControlLimit : nmeta.Float [1 ]
          unique ordered longPF : nmeta.Float [1 ]
          unique ordered maxOperatingP : nmeta.Float [1 ]
          unique ordered fastStartFlag : nmeta.Boolean [1 ]
          unique ordered genControlMode : GeneratorControlMode [0..1]
          unique ordered ratedNetMaxP : nmeta.Float [1 ]
          unique ordered efficiency : nmeta.Float [1 ]
          unique ordered minimumOffTime : nmeta.Float [1 ]
          unique ordered dispReserveFlag : nmeta.Boolean [1 ]
          unique ordered maximumAllowableSpinningReserve : nmeta.Float [1 ]
          unique ordered controlDeadband : nmeta.Float [1 ]
          unique ordered normalPF : nmeta.Float [1 ]
          unique ordered reference OperatedBy_GenerationProvider : cimFinancial.GenerationProvider [0..1] opposite GeneratingUnits
          unique ordered reference GenUnitOpSchedule : GenUnitOpSchedule [0..1] opposite GeneratingUnit
          unique ordered reference ControlAreaGeneratingUnit : cimControlArea.ControlAreaGeneratingUnit [0..*] opposite GeneratingUnit
          unique ordered reference GrossToNetActivePowerCurves : GrossToNetActivePowerCurve [0..*] opposite GeneratingUnit
          unique ordered reference GenUnitOpCostCurves : GenUnitOpCostCurve [0..*] opposite GeneratingUnit
          unique ordered reference SynchronousMachines : cimWires.SynchronousMachine [0..*] opposite GeneratingUnit
          unique ordered reference RegisteredGenerator : cimMarketOperations.RegisteredGenerator [0..1] opposite GeneratingUnit
          unique ordered reference SubControlArea : cimEnergyScheduling.SubControlArea [0..1] opposite GeneratingUnits
        }
        class FuelAllocationSchedule : cimCore.Curve
        {
          unique ordered fuelType : FuelType [0..1]
          unique ordered maxFuelAllocation : nmeta.Float [1 ]
          unique ordered fuelAllocationStartDate : nmeta.DateTime [1 ]
          unique ordered minFuelAllocation : nmeta.Float [1 ]
          unique ordered fuelAllocationEndDate : nmeta.DateTime [1 ]
          unique ordered reference FossilFuel : FossilFuel [0..1] opposite FuelAllocationSchedules
          unique ordered reference ThermalGeneratingUnit : ThermalGeneratingUnit [0..1] opposite FuelAllocationSchedules
        }
        class Reservoir : cimCore.PowerSystemResource
        {
          unique ordered activeStorageCapacity : nmeta.Float [1 ]
          unique ordered spillTravelDelay : nmeta.Float [1 ]
          unique ordered riverOutletWorks : nmeta.String [1 ]
          unique ordered normalMinOperateLevel : nmeta.Float [1 ]
          unique ordered spillwayCrestLevel : nmeta.Float [1 ]
          unique ordered fullSupplyLevel : nmeta.Float [1 ]
          unique ordered spillwayCapacity : nmeta.Float [1 ]
          unique ordered spillWayGateType : SpillwayGateType [0..1]
          unique ordered spillwayCrestLength : nmeta.Float [1 ]
          unique ordered energyStorageRating : nmeta.Float [1 ]
          unique ordered grossCapacity : nmeta.Float [1 ]
          unique ordered reference UpstreamFromHydroPowerPlants : HydroPowerPlant [0..*] opposite GenSourcePumpDischargeReservoir
          unique ordered reference SpillsIntoReservoirs : Reservoir [0..*] opposite SpillsFromReservoir
          unique ordered reference SpillsFromReservoir : Reservoir [0..1] opposite SpillsIntoReservoirs
          unique ordered reference LevelVsVolumeCurves : LevelVsVolumeCurve [0..*] opposite Reservoir
          unique ordered reference InflowForecasts : InflowForecast [0..*] opposite Reservoir
          unique ordered reference TargetLevelSchedule : TargetLevelSchedule [0..1] opposite Reservoir
          unique ordered reference HydroPowerPlants : HydroPowerPlant [0..*] opposite Reservoir
        }
        class HydroGeneratingEfficiencyCurve : cimCore.Curve
        {
          unique ordered reference HydroGeneratingUnit : HydroGeneratingUnit [0..1] opposite HydroGeneratingEfficiencyCurves
        }
        class NuclearGeneratingUnit : GeneratingUnit
        {
        }
        class AirCompressor : cimCore.PowerSystemResource
        {
          unique ordered airCompressorRating : nmeta.Float [1 ]
          unique ordered reference CombustionTurbine : cimGenerationDynamics.CombustionTurbine [0..1] opposite AirCompressor
          unique ordered reference CAESPlant : CAESPlant [0..1] opposite AirCompressor
        }
        class EmissionAccount : cimCore.Curve
        {
          unique ordered emissionValueSource : EmissionValueSource [0..1]
          unique ordered emissionType : EmissionType [0..1]
          unique ordered reference ThermalGeneratingUnit : ThermalGeneratingUnit [0..1] opposite EmmissionAccounts
        }
        enum HydroEnergyConversionKind
        {
          pumpAndGenerator
          generator = 1
        }
        class GrossToNetActivePowerCurve : cimCore.Curve
        {
          unique ordered reference GeneratingUnit : GeneratingUnit [0..1] opposite GrossToNetActivePowerCurves
        }
        enum SurgeTankCode
        {
        }

      }

    }

    namespace SCADA ( cimSCADA ) = http://iec.ch/TC57/2009/CIM-schema-cim14#SCADA
    {
      enum Source
      {
        PROCESS
        SUBSTITUTED = 1
        DEFAULTED = 2
      }
      class CommunicationLink : cimCore.PowerSystemResource
      {
        unique ordered reference RemoteUnits : RemoteUnit [0..*] opposite CommunicationLinks
      }
      class RemotePoint : cimCore.IdentifiedObject
      {
        unique ordered reference RemoteUnit : RemoteUnit [0..1] opposite RemotePoints
      }
      class RemoteUnit : cimCore.PowerSystemResource
      {
        unique ordered remoteUnitType : RemoteUnitType [0..1]
        unique ordered reference RemotePoints : RemotePoint [0..*] opposite RemoteUnit
        unique ordered reference CommunicationLinks : CommunicationLink [0..*] opposite RemoteUnits
      }
      enum RemoteUnitType
      {
        IED
        SubstationControlSystem = 1
        ControlCenter = 2
        RTU = 3
      }
      class RemoteControl : RemotePoint
      {
        unique ordered actuatorMaximum : nmeta.Float [1 ]
        unique ordered remoteControlled : nmeta.Boolean [1 ]
        unique ordered actuatorMinimum : nmeta.Float [1 ]
        unique ordered reference Control : cimMeas.Control [0..1] opposite RemoteControl
      }
      class RemoteSource : RemotePoint
      {
        unique ordered deadband : nmeta.Float [1 ]
        unique ordered sensorMinimum : nmeta.Float [1 ]
        unique ordered scanInterval : nmeta.Float [1 ]
        unique ordered sensorMaximum : nmeta.Float [1 ]
        unique ordered reference MeasurementValue : cimMeas.MeasurementValue [0..1] opposite RemoteSource
      }

    }

    namespace Wires ( cimWires ) = http://iec.ch/TC57/2009/CIM-schema-cim14#Wires
    {
      class SeriesCompensator : cimCore.ConductingEquipment
      {
        unique ordered r : nmeta.Float [1 ]
        unique ordered x : nmeta.Float [1 ]
      }
      class PowerTransformer : cimCore.Equipment
      {
        unique ordered magBaseU : nmeta.Float [1 ]
        unique ordered magSatFlux : nmeta.Float [1 ]
        unique ordered bmagSat : nmeta.Float [1 ]
        unique ordered reference Flowgates : cimMarketOperations.Flowgate [0..*] opposite PowerTransormers
        unique ordered reference HeatExchanger : HeatExchanger [0..1] opposite PowerTransformer
        unique ordered reference TransformerWindings : TransformerWinding [0..*] opposite PowerTransformer
      }
      class Switch : cimCore.ConductingEquipment
      {
        unique ordered retained : nmeta.Boolean [1 ]
        unique ordered switchOnDate : nmeta.DateTime [1 ]
        unique ordered normalOpen : nmeta.Boolean [1 ]
        unique ordered switchOnCount : nmeta.Integer [1 ]
        unique ordered reference LoadMgmtFunctions : cimInfLoadControl.LoadMgmtFunction [0..*] opposite Switches
        unique ordered reference ConnectDisconnectFunctions : cimLoadControl.ConnectDisconnectFunction [0..*] opposite Switches
        unique ordered reference SwitchingOperations : cimOutage.SwitchingOperation [0..*] opposite Switches
        unique ordered reference SwitchSchedules : SwitchSchedule [0..*] opposite Switch
        unique ordered reference CompositeSwitch : CompositeSwitch [0..1] opposite Switches
      }
      class Jumper : Switch
      {
      }
      enum SVCControlMode
      {
        voltage
        reactivePower = 1
        off = 2
      }
      class Plant : cimCore.EquipmentContainer
      {
      }
      class Line : cimCore.EquipmentContainer
      {
        unique ordered reference TransmissionRightOfWay : cimEnergyScheduling.TransmissionRightOfWay [0..1] opposite Lines
        unique ordered reference Flowgates : cimMarketOperations.Flowgate [0..*] opposite Lines
        unique ordered reference Region : cimCore.SubGeographicalRegion [0..1] opposite Lines
      }
      enum PhaseTapChangerKind
      {
        asymmetrical
        symmetrical = 1
        unknown = 2
      }
      enum WindingType
      {
        tertiary
        quaternary = 1
        primary = 2
        secondary = 3
      }
      class EnergySource : cimCore.ConductingEquipment
      {
        unique ordered activePower : nmeta.Float [1 ]
        unique ordered r : nmeta.Float [1 ]
        unique ordered x : nmeta.Float [1 ]
        unique ordered rn : nmeta.Float [1 ]
        unique ordered voltageMagnitude : nmeta.Float [1 ]
        unique ordered r0 : nmeta.Float [1 ]
        unique ordered voltageAngle : nmeta.Float [1 ]
        unique ordered xn : nmeta.Float [1 ]
        unique ordered nominalVoltage : nmeta.Float [1 ]
        unique ordered x0 : nmeta.Float [1 ]
      }
      class FrequencyConverter : RegulatingCondEq
      {
        unique ordered operatingMode : nmeta.String [1 ]
        unique ordered frequency : nmeta.Float [1 ]
        unique ordered maxP : nmeta.Float [1 ]
        unique ordered maxU : nmeta.Float [1 ]
        unique ordered minU : nmeta.Float [1 ]
        unique ordered minP : nmeta.Float [1 ]
      }
      class Connector : cimCore.ConductingEquipment
      {
      }
      class Ground : cimCore.ConductingEquipment
      {
        unique ordered reference WindingInsulations : cimInfAssets.WindingInsulation [0..*] opposite Ground
      }
      class LoadBreakSwitch : ProtectedSwitch
      {
        unique ordered ratedCurrent : nmeta.Float [1 ]
      }
      class ImpedanceVariationCurve : cimCore.Curve
      {
        unique ordered reference TapChanger : TapChanger [0..1] opposite ImpedanceVariationCurve
      }
      class TapSchedule : cimLoadModel.SeasonDayTypeSchedule
      {
        unique ordered lineDropCompensation : nmeta.Boolean [1 ]
        unique ordered lineDropX : nmeta.Float [1 ]
        unique ordered lineDropR : nmeta.Float [1 ]
        unique ordered reference TapChanger : TapChanger [0..1] opposite TapSchedules
      }
      class MutualCoupling : cimCore.IdentifiedObject
      {
        unique ordered distance11 : nmeta.Float [1 ]
        unique ordered distance12 : nmeta.Float [1 ]
        unique ordered b0ch : nmeta.Float [1 ]
        unique ordered g0ch : nmeta.Float [1 ]
        unique ordered x0 : nmeta.Float [1 ]
        unique ordered r0 : nmeta.Float [1 ]
        unique ordered distance22 : nmeta.Float [1 ]
        unique ordered distance21 : nmeta.Float [1 ]
        unique ordered reference Second_Terminal : cimCore.Terminal [0..1] opposite HasSecond_MutualCoupling
        unique ordered reference First_Terminal : cimCore.Terminal [0..1] opposite HasFirst_MutualCoupling
      }
      class DCLineSegment : Conductor
      {
        unique ordered dcSegmentResistance : nmeta.Float [1 ]
        unique ordered dcSegmentInductance : nmeta.Float [1 ]
      }
      class SwitchSchedule : cimLoadModel.SeasonDayTypeSchedule
      {
        unique ordered reference Switch : Switch [0..1] opposite SwitchSchedules
      }
      class CompositeSwitch : cimCore.Equipment
      {
        unique ordered compositeSwitchType : nmeta.String [1 ]
        unique ordered reference Switches : Switch [0..*] opposite CompositeSwitch
      }
      class ACLineSegment : Conductor
      {
        unique ordered g0ch : nmeta.Float [1 ]
        unique ordered x : nmeta.Float [1 ]
        unique ordered gch : nmeta.Float [1 ]
        unique ordered r : nmeta.Float [1 ]
        unique ordered x0 : nmeta.Float [1 ]
        unique ordered bch : nmeta.Float [1 ]
        unique ordered r0 : nmeta.Float [1 ]
        unique ordered b0ch : nmeta.Float [1 ]
      }
      class PhaseTapChanger : TapChanger
      {
        unique ordered windingConnectionAngle : nmeta.Float [1 ]
        unique ordered phaseTapChangerType : PhaseTapChangerKind [0..1]
        unique ordered stepPhaseShiftIncrement : nmeta.Float [1 ]
        unique ordered voltageStepIncrementOutOfPhase : nmeta.Float [1 ]
        unique ordered nominalVoltageOutOfPhase : nmeta.Float [1 ]
        unique ordered xStepMax : nmeta.Float [1 ]
        unique ordered xStepMin : nmeta.Float [1 ]
        unique ordered reference TransformerWinding : TransformerWinding [0..1] opposite PhaseTapChanger
        unique ordered reference Winding : cimWiresExt.DistributionTransformerWinding [0..1] opposite PhaseTapChanger
        unique ordered reference PhaseVariationCurve : PhaseVariationCurve [0..1] opposite PhaseTapChanger
      }
      class EnergyConsumer : cimCore.ConductingEquipment
      {
        unique ordered pfixed : nmeta.Float [1 ]
        unique ordered qfixedPct : nmeta.Float [1 ]
        unique ordered customerCount : nmeta.Integer [1 ]
        unique ordered pfixedPct : nmeta.Float [1 ]
        unique ordered qfixed : nmeta.Float [1 ]
        unique ordered reference ServiceDeliveryPoints : cimMetering.ServiceDeliveryPoint [0..*] opposite EnergyConsumer
        unique ordered reference PowerCutZone : cimLoadModel.PowerCutZone [0..1] opposite EnergyConsumers
        unique ordered reference LoadResponse : cimLoadModel.LoadResponseCharacteristic [0..1] opposite EnergyConsumer
      }
      class RegulatingCondEq : cimCore.ConductingEquipment
      {
        unique ordered reference Controls : cimMeas.Control [0..*] opposite RegulatingCondEq
        unique ordered reference RegulatingControl : RegulatingControl [0..1] opposite RegulatingCondEq
      }
      class HeatExchanger : cimCore.Equipment
      {
        unique ordered reference PowerTransformer : PowerTransformer [0..1] opposite HeatExchanger
      }
      class StaticVarCompensator : RegulatingCondEq
      {
        unique ordered sVCControlMode : SVCControlMode [0..1]
        unique ordered inductiveRating : nmeta.Float [1 ]
        unique ordered capacitiveRating : nmeta.Float [1 ]
        unique ordered voltageSetPoint : nmeta.Float [1 ]
        unique ordered slope : nmeta.Float [1 ]
      }
      class PhaseVariationCurve : cimCore.Curve
      {
        unique ordered reference PhaseTapChanger : PhaseTapChanger [0..1] opposite PhaseVariationCurve
      }
      class TapChanger : cimCore.PowerSystemResource
      {
        unique ordered initialDelay : nmeta.Float [1 ]
        unique ordered subsequentDelay : nmeta.Float [1 ]
        unique ordered ltcFlag : nmeta.Boolean [1 ]
        unique ordered regulationStatus : nmeta.Boolean [1 ]
        unique ordered neutralStep : nmeta.Integer [1 ]
        unique ordered neutralU : nmeta.Float [1 ]
        unique ordered lowStep : nmeta.Integer [1 ]
        unique ordered highStep : nmeta.Integer [1 ]
        unique ordered stepVoltageIncrement : nmeta.Float [1 ]
        unique ordered normalStep : nmeta.Integer [1 ]
        unique ordered reference TapSchedules : TapSchedule [0..*] opposite TapChanger
        unique ordered reference RegulatingControl : RegulatingControl [0..1] opposite TapChanger
        unique ordered reference ImpedanceVariationCurve : ImpedanceVariationCurve [0..1] opposite TapChanger
        unique ordered reference SvTapStep : cimStateVariables.SvTapStep [0..1] opposite TapChanger
      }
      enum SynchronousMachineType
      {
        condenser
        generator_or_condenser = 1
        generator = 2
      }
      class WindingTest : cimCore.IdentifiedObject
      {
        unique ordered fromTapStep : nmeta.Integer [1 ]
        unique ordered leakageImpedance : nmeta.Float [1 ]
        unique ordered noLoadLoss : nmeta.Float [1 ]
        unique ordered phaseShift : nmeta.Float [1 ]
        unique ordered loadLoss : nmeta.Float [1 ]
        unique ordered toTapStep : nmeta.Integer [1 ]
        unique ordered voltage : nmeta.Float [1 ]
        unique ordered excitingCurrent : nmeta.Float [1 ]
        unique ordered reference From_TransformerWinding : TransformerWinding [0..1] opposite From_WindingTest
        unique ordered reference To_TransformerWinding : TransformerWinding [0..1] opposite To_WindingTest
      }
      class Fuse : Switch
      {
        unique ordered ratingCurrent : nmeta.Float [1 ]
      }
      class RegulatingControl : cimCore.PowerSystemResource
      {
        unique ordered mode : RegulatingControlModeKind [0..1]
        unique ordered targetRange : nmeta.Float [1 ]
        unique ordered targetValue : nmeta.Float [1 ]
        unique ordered discrete : nmeta.Boolean [1 ]
        unique ordered reference TapChanger : TapChanger [0..*] opposite RegulatingControl
        unique ordered reference Terminal : cimCore.Terminal [0..1] opposite RegulatingControl
        unique ordered reference RegulatingCondEq : RegulatingCondEq [0..*] opposite RegulatingControl
        unique ordered reference RegulationSchedule : RegulationSchedule [0..*] opposite RegulatingControl
      }
      enum CoolantType
      {
        water
        air = 1
        hydrogenGas = 2
      }
      class BusbarSection : Connector
      {
        unique ordered reference VoltageControlZone : VoltageControlZone [0..1] opposite BusbarSection
      }
      enum TransformerControlMode
      {
        reactive
        volt = 1
      }
      class Resistor : cimCore.ConductingEquipment
      {
      }
      class RatioVariationCurve : cimCore.Curve
      {
        unique ordered reference RatioTapChanger : RatioTapChanger [0..1] opposite RatioVariationCurve
      }
      enum SynchronousMachineOperatingMode
      {
        condenser
        generator = 1
      }
      class RectifierInverter : cimCore.ConductingEquipment
      {
        unique ordered minCompoundVoltage : nmeta.Float [1 ]
        unique ordered minP : nmeta.Float [1 ]
        unique ordered maxU : nmeta.Float [1 ]
        unique ordered operatingMode : nmeta.String [1 ]
        unique ordered frequency : nmeta.Float [1 ]
        unique ordered maxP : nmeta.Float [1 ]
        unique ordered commutatingReactance : nmeta.Float [1 ]
        unique ordered commutatingResistance : nmeta.Float [1 ]
        unique ordered ratedU : nmeta.Float [1 ]
        unique ordered minU : nmeta.Float [1 ]
        unique ordered bridges : nmeta.Integer [1 ]
        unique ordered compoundResistance : nmeta.Float [1 ]
      }
      class Breaker : ProtectedSwitch
      {
        unique ordered ratedCurrent : nmeta.Float [1 ]
        unique ordered inTransitTime : nmeta.Float [1 ]
      }
      class TransformerWinding : cimCore.ConductingEquipment
      {
        unique ordered g0 : nmeta.Float [1 ]
        unique ordered rground : nmeta.Float [1 ]
        unique ordered grounded : nmeta.Boolean [1 ]
        unique ordered shortTermS : nmeta.Float [1 ]
        unique ordered g : nmeta.Float [1 ]
        unique ordered b : nmeta.Float [1 ]
        unique ordered x : nmeta.Float [1 ]
        unique ordered r : nmeta.Float [1 ]
        unique ordered r0 : nmeta.Float [1 ]
        unique ordered b0 : nmeta.Float [1 ]
        unique ordered windingType : WindingType [0..1]
        unique ordered x0 : nmeta.Float [1 ]
        unique ordered ratedS : nmeta.Float [1 ]
        unique ordered ratedU : nmeta.Float [1 ]
        unique ordered insulationU : nmeta.Float [1 ]
        unique ordered emergencyS : nmeta.Float [1 ]
        unique ordered connectionType : WindingConnection [0..1]
        unique ordered xground : nmeta.Float [1 ]
        unique ordered reference To_WindingTest : WindingTest [0..*] opposite To_TransformerWinding
        unique ordered reference PhaseTapChanger : PhaseTapChanger [0..1] opposite TransformerWinding
        unique ordered reference PowerTransformer : PowerTransformer [0..1] opposite TransformerWindings
        unique ordered reference From_WindingTest : WindingTest [0..*] opposite From_TransformerWinding
        unique ordered reference RatioTapChanger : RatioTapChanger [0..1] opposite TransformerWinding
      }
      enum WindingConnection
      {
        I
        Z = 1
        Yn = 2
        Y = 3
        A = 4
        D = 5
        Zn = 6
      }
      class GroundDisconnector : Switch
      {
      }
      class VoltageControlZone : cimCore.PowerSystemResource
      {
        unique ordered reference RegulationSchedule : RegulationSchedule [0..1] opposite VoltageControlZones
        unique ordered reference BusbarSection : BusbarSection [0..1] opposite VoltageControlZone
      }
      class ProtectedSwitch : Switch
      {
        unique ordered reference RecloseSequences : cimProtection.RecloseSequence [0..*] opposite ProtectedSwitch
      }
      class ShuntCompensator : RegulatingCondEq
      {
        unique ordered normalSections : nmeta.Integer [1 ]
        unique ordered minU : nmeta.Float [1 ]
        unique ordered b0PerSection : nmeta.Float [1 ]
        unique ordered nomQ : nmeta.Float [1 ]
        unique ordered nomU : nmeta.Float [1 ]
        unique ordered maximumSections : nmeta.Integer [1 ]
        unique ordered switchOnCount : nmeta.Integer [1 ]
        unique ordered maxU : nmeta.Float [1 ]
        unique ordered bPerSection : nmeta.Float [1 ]
        unique ordered gPerSection : nmeta.Float [1 ]
        unique ordered switchOnDate : nmeta.DateTime [1 ]
        unique ordered aVRDelay : nmeta.Float [1 ]
        unique ordered voltageSensitivity : nmeta.Float [1 ]
        unique ordered g0PerSection : nmeta.Float [1 ]
        unique ordered reactivePerSection : nmeta.Float [1 ]
        unique ordered reference SvShuntCompensatorSections : cimStateVariables.SvShuntCompensatorSections [0..1] opposite ShuntCompensator
      }
      class Conductor : cimCore.ConductingEquipment
      {
        unique ordered length : nmeta.Float [1 ]
      }
      class Disconnector : Switch
      {
      }
      class SynchronousMachine : RegulatingCondEq
      {
        unique ordered xDirectSync : nmeta.Float [1 ]
        unique ordered xQuadTrans : nmeta.Float [1 ]
        unique ordered coolantCondition : nmeta.Float [1 ]
        unique ordered xQuadSubtrans : nmeta.Float [1 ]
        unique ordered coolantType : CoolantType [0..1]
        unique ordered condenserP : nmeta.Float [1 ]
        unique ordered aVRToManualLag : nmeta.Float [1 ]
        unique ordered minQ : nmeta.Float [1 ]
        unique ordered aVRToManualLead : nmeta.Float [1 ]
        unique ordered maxU : nmeta.Float [1 ]
        unique ordered damping : nmeta.Float [1 ]
        unique ordered maxQ : nmeta.Float [1 ]
        unique ordered r0 : nmeta.Float [1 ]
        unique ordered type : SynchronousMachineType [0..1]
        unique ordered r2 : nmeta.Float [1 ]
        unique ordered referencePriority : nmeta.Integer [1 ]
        unique ordered x0 : nmeta.Float [1 ]
        unique ordered x2 : nmeta.Float [1 ]
        unique ordered r : nmeta.Float [1 ]
        unique ordered xDirectSubtrans : nmeta.Float [1 ]
        unique ordered x : nmeta.Float [1 ]
        unique ordered qPercent : nmeta.Float [1 ]
        unique ordered xQuadSync : nmeta.Float [1 ]
        unique ordered ratedS : nmeta.Float [1 ]
        unique ordered manualToAVR : nmeta.Float [1 ]
        unique ordered inertia : nmeta.Float [1 ]
        unique ordered minU : nmeta.Float [1 ]
        unique ordered xDirectTrans : nmeta.Float [1 ]
        unique ordered baseQ : nmeta.Float [1 ]
        unique ordered operatingMode : SynchronousMachineOperatingMode [0..1]
        unique ordered reference ReactiveCapabilityCurves : ReactiveCapabilityCurve [0..*] opposite SynchronousMachines
        unique ordered reference GeneratingUnit : cimProduction.GeneratingUnit [0..1] opposite SynchronousMachines
        unique ordered reference InitialReactiveCapabilityCurve : ReactiveCapabilityCurve [0..1] opposite InitiallyUsedBySynchronousMachines
        unique ordered reference HydroPump : cimProduction.HydroPump [0..1] opposite SynchronousMachine
        unique ordered reference PrimeMovers : cimGenerationDynamics.PrimeMover [0..*] opposite SynchronousMachines
      }
      enum TapChangerKind
      {
        phaseControl
        fixed = 1
        voltageAndPhaseControl = 2
        voltageControl = 3
      }
      class Junction : Connector
      {
      }
      class RegulationSchedule : cimLoadModel.SeasonDayTypeSchedule
      {
        unique ordered lineDropR : nmeta.Float [1 ]
        unique ordered lineDropX : nmeta.Float [1 ]
        unique ordered lineDropCompensation : nmeta.Boolean [1 ]
        unique ordered reference RegulatingControl : RegulatingControl [0..1] opposite RegulationSchedule
        unique ordered reference VoltageControlZones : VoltageControlZone [0..*] opposite RegulationSchedule
      }
      class ReactiveCapabilityCurve : cimCore.Curve
      {
        unique ordered hydrogenPressure : nmeta.Float [1 ]
        unique ordered coolantTemperature : nmeta.Float [1 ]
        unique ordered reference InitiallyUsedBySynchronousMachines : SynchronousMachine [0..*] opposite InitialReactiveCapabilityCurve
        unique ordered reference SynchronousMachines : SynchronousMachine [0..*] opposite ReactiveCapabilityCurves
      }
      enum RegulatingControlModeKind
      {
        reactivePower
        timeScheduled = 1
        voltage = 2
        activePower = 3
        currentFlow = 4
        fixed = 5
        temperature = 6
        powerFactor = 7
        admittance = 8
      }
      class RatioTapChanger : TapChanger
      {
        unique ordered tculControlMode : TransformerControlMode [0..1]
        unique ordered reference RatioVariationCurve : RatioVariationCurve [0..1] opposite RatioTapChanger
        unique ordered reference TransformerWinding : TransformerWinding [0..1] opposite RatioTapChanger
        unique ordered reference Winding : cimWiresExt.DistributionTransformerWinding [0..1] opposite RatioTapChanger
      }

    }

    namespace Core ( cimCore ) = http://iec.ch/TC57/2009/CIM-schema-cim14#Core
    {
      class Bay : EquipmentContainer
      {
        unique ordered bayEnergyMeasFlag : nmeta.Boolean [1 ]
        unique ordered busBarConfiguration : BusbarConfiguration [0..1]
        unique ordered bayPowerMeasFlag : nmeta.Boolean [1 ]
        unique ordered breakerConfiguration : BreakerConfiguration [0..1]
        unique ordered reference VoltageLevel : VoltageLevel [0..1] opposite Bays
        unique ordered reference Substation : Substation [0..1] opposite Bays
      }
      enum BreakerConfiguration
      {
        breakerAndAHalf
        singleBreaker = 1
        doubleBreaker = 2
        noBreaker = 3
      }
      class Terminal : IdentifiedObject
      {
        unique ordered connected : nmeta.Boolean [1 ]
        unique ordered sequenceNumber : nmeta.Integer [1 ]
        unique ordered reference ConnectivityNode : ConnectivityNode [0..1] opposite Terminals
        unique ordered reference SvPowerFlow : cimStateVariables.SvPowerFlow [0..1] opposite Terminal
        unique ordered reference HasFirst_MutualCoupling : cimWires.MutualCoupling [0..*] opposite First_Terminal
        unique ordered reference TerminalConstraints : cimMarketOperations.TerminalConstraintTerm [0..*] opposite Terminal
        unique ordered reference RegulatingControl : cimWires.RegulatingControl [0..*] opposite Terminal
        unique ordered reference Measurements : cimMeas.Measurement [0..*] opposite Terminal
        unique ordered reference TieFlow : cimControlArea.TieFlow [0..*] opposite Terminal
        unique ordered reference TopologicalNode : cimTopology.TopologicalNode [0..1] opposite Terminal
        unique ordered reference BranchGroupTerminal : cimOperationalLimits.BranchGroupTerminal [0..*] opposite Terminal
        unique ordered reference BushingInfo : cimInfAssets.BushingInfo [0..1] opposite Terminal
        unique ordered reference ConductingEquipment : ConductingEquipment [0..1] opposite Terminals
        unique ordered reference HasSecond_MutualCoupling : cimWires.MutualCoupling [0..*] opposite Second_Terminal
        unique ordered reference OperationalLimitSet : cimOperationalLimits.OperationalLimitSet [0..*] opposite Terminal
      }
      enum BusbarConfiguration
      {
        mainWithTransfer
        ringBus = 1
        doubleBus = 2
        singleBus = 3
      }
      class ReportingGroup : IdentifiedObject
      {
        unique ordered reference PowerSystemResource : PowerSystemResource [0..*] opposite ReportingGroup
        unique ordered reference BusNameMarker : cimTopology.BusNameMarker [0..*] opposite ReportingGroup
        unique ordered reference TopologicalNode : cimTopology.TopologicalNode [0..*] opposite ReportingGroup
        unique ordered reference ReportingSuperGroup : ReportingSuperGroup [0..1] opposite ReportingGroup
      }
      enum CompanyType
      {
        municipal
        isPrivate = 1
        pool = 2
      }
      class BasePower : IdentifiedObject
      {
        unique ordered basePower : nmeta.Float [1 ]
      }
      class RegularIntervalSchedule : BasicIntervalSchedule
      {
        unique ordered endTime : nmeta.String [1 ]
        unique ordered timeStep : nmeta.Float [1 ]
        unique ordered reference TimePoints : RegularTimePoint [0..*] opposite IntervalSchedule
      }
      class Curve : IdentifiedObject
      {
        unique ordered y2Unit : cimDomain.UnitSymbol [0..1]
        unique ordered xMultiplier : cimDomain.UnitMultiplier [0..1]
        unique ordered y3Multiplier : cimDomain.UnitMultiplier [0..1]
        unique ordered y1Unit : cimDomain.UnitSymbol [0..1]
        unique ordered curveStyle : CurveStyle [0..1]
        unique ordered y3Unit : cimDomain.UnitSymbol [0..1]
        unique ordered xUnit : cimDomain.UnitSymbol [0..1]
        unique ordered y2Multiplier : cimDomain.UnitMultiplier [0..1]
        unique ordered y1Multiplier : cimDomain.UnitMultiplier [0..1]
        unique ordered reference CurveDatas : CurveData [0..*] opposite Curve
      }
      class BaseVoltage : IdentifiedObject
      {
        unique ordered nominalVoltage : nmeta.Float [1 ]
        unique ordered isDC : nmeta.Boolean [1 ]
        unique ordered reference TopologicalNode : cimTopology.TopologicalNode [0..*] opposite BaseVoltage
        unique ordered reference VoltageLevel : VoltageLevel [0..*] opposite BaseVoltage
        unique ordered reference ConductingEquipment : ConductingEquipment [0..*] opposite BaseVoltage
      }
      class OperatingShare : Element
      {
        unique ordered percentage : nmeta.Float [1 ]
        unique ordered reference PowerSystemResource : PowerSystemResource [0..1] opposite OperatingShare
        unique ordered reference OperatingParticipant : OperatingParticipant [0..1] opposite OperatingShare
      }
      class ConnectivityNodeContainer : PowerSystemResource
      {
        unique ordered reference ConnectivityNodes : ConnectivityNode [0..*] opposite ConnectivityNodeContainer
        unique ordered reference TopologicalNode : cimTopology.TopologicalNode [0..*] opposite ConnectivityNodeContainer
      }
      class IrregularTimePoint : Element
      {
        unique ordered value1 : nmeta.Float [1 ]
        unique ordered value2 : nmeta.Float [1 ]
        unique ordered time : nmeta.Float [1 ]
        unique ordered reference IntervalSchedule : IrregularIntervalSchedule [0..1] opposite TimePoints
      }
      class Equipment : PowerSystemResource
      {
        unique ordered normaIlyInService : nmeta.Boolean [1 ]
        unique ordered aggregate : nmeta.Boolean [1 ]
        unique ordered reference OperationalLimitSet : cimOperationalLimits.OperationalLimitSet [0..*] opposite Equipment
        unique ordered reference ContingencyEquipment : cimContingency.ContingencyEquipment [0..*] opposite Equipment
        unique ordered reference CustomerAgreements : cimCustomers.CustomerAgreement [0..*] opposite Equipments
        unique ordered reference EquipmentContainer : EquipmentContainer [0..1] opposite Equipments
      }
      class SubGeographicalRegion : IdentifiedObject
      {
        unique ordered reference Lines : cimWires.Line [0..*] opposite Region
        unique ordered reference Region : GeographicalRegion [0..1] opposite Regions
        unique ordered reference Substations : Substation [0..*] opposite Region
      }
      class Unit : IdentifiedObject
      {
        unique ordered reference Controls : cimMeas.Control [0..*] opposite Unit
        unique ordered reference ProtectionEquipments : cimProtection.ProtectionEquipment [0..*] opposite Unit
        unique ordered reference Measurements : cimMeas.Measurement [0..*] opposite Unit
      }
      class ReportingSuperGroup : IdentifiedObject
      {
        unique ordered reference ReportingGroup : ReportingGroup [0..*] opposite ReportingSuperGroup
      }
      enum CurveStyle
      {
        straightLineYValues
        rampYValue = 1
        constantYValue = 2
        formula = 3
      }
      class RegularTimePoint : Element
      {
        unique ordered value1 : nmeta.Float [1 ]
        unique ordered value2 : nmeta.Float [1 ]
        unique ordered sequenceNumber : nmeta.Integer [1 ]
        unique ordered reference IntervalSchedule : RegularIntervalSchedule [0..1] opposite TimePoints
      }
      class PsrList : IdentifiedObject
      {
        unique ordered typePSRList : nmeta.String [1 ]
        unique ordered reference PowerSystemResources : PowerSystemResource [0..*] opposite PsrLists
      }
      class BasicIntervalSchedule : IdentifiedObject
      {
        unique ordered value2Multiplier : cimDomain.UnitMultiplier [0..1]
        unique ordered value1Multiplier : cimDomain.UnitMultiplier [0..1]
        unique ordered startTime : nmeta.String [1 ]
        unique ordered value2Unit : cimDomain.UnitSymbol [0..1]
        unique ordered value1Unit : cimDomain.UnitSymbol [0..1]
      }
      class IrregularIntervalSchedule : BasicIntervalSchedule
      {
        unique ordered reference TimePoints : IrregularTimePoint [0..*] opposite IntervalSchedule
      }
      class PSRType : IdentifiedObject
      {
        unique ordered reference PowerSystemResources : PowerSystemResource [0..*] opposite PSRType
      }
      class OperatingParticipant : IdentifiedObject
      {
        unique ordered reference OperatingShare : OperatingShare [0..*] opposite OperatingParticipant
      }
      class CurveData : Element
      {
        unique ordered xvalue : nmeta.Float [1 ]
        unique ordered y2value : nmeta.Float [1 ]
        unique ordered y3value : nmeta.Float [1 ]
        unique ordered y1value : nmeta.Float [1 ]
        unique ordered reference Curve : Curve [0..1] opposite CurveDatas
      }
      class EquipmentContainer : ConnectivityNodeContainer
      {
        unique ordered reference Equipments : Equipment [0..*] opposite EquipmentContainer
      }
      class PowerSystemResource : IdentifiedObject
      {
        unique ordered reference ReportingGroup : ReportingGroup [0..*] opposite PowerSystemResource
        unique ordered reference NetworkDataSets : cimInfOperations.NetworkDataSet [0..*] opposite PowerSystemResources
        unique ordered reference Location : cimCommon.Location [0..1] opposite PowerSystemResources
        unique ordered reference OutageSchedule : cimOutage.OutageSchedule [0..1] opposite PowerSystemResource
        unique ordered reference PSREvent : cimInfOperations.PSREvent [0..*] opposite PowerSystemResource
        unique ordered reference SafetyDocuments : cimInfOperations.SafetyDocument [0..*] opposite PowerSystemResource
        unique ordered reference ErpOrganisationRoles : cimInfOperations.OrgPsrRole [0..*] opposite PowerSystemResource
        unique ordered reference CircuitSections : cimInfOperations.CircuitSection [0..*] opposite PowerSystemResources
        unique ordered reference Measurements : cimMeas.Measurement [0..*] opposite PowerSystemResource
        unique ordered reference Assets : cimAssets.Asset [0..*] opposite PowerSystemResources
        unique ordered reference ScheduleSteps : cimInfOperations.SwitchingStep [0..*] opposite PowerSystemResources
        unique ordered reference PSRType : PSRType [0..1] opposite PowerSystemResources
        unique ordered reference PsrLists : PsrList [0..*] opposite PowerSystemResources
        unique ordered reference OperatingShare : OperatingShare [0..*] opposite PowerSystemResource
        unique ordered reference ChangeItems : cimInfOperations.ChangeItem [0..*] opposite PowerSystemResource
        unique ordered reference DocumentRoles : cimInfCommon.DocPsrRole [0..*] opposite PowerSystemResource
      }
      class Substation : EquipmentContainer
      {
        unique ordered reference Bays : Bay [0..*] opposite Substation
        unique ordered reference Region : SubGeographicalRegion [0..1] opposite Substations
        unique ordered reference VoltageLevels : VoltageLevel [0..*] opposite Substation
      }
      enum PhaseCode
      {
        ABC
        splitSecondary2N = 1
        ABN = 2
        CN = 3
        ACN = 4
        BC = 5
        AN = 6
        AB = 7
        BN = 8
        splitSecondary1N = 9
        N = 10
        AC = 11
        C = 12
        ABCN = 13
        splitSecondary12N = 14
        A = 15
        B = 16
        BCN = 17
      }
      class GeographicalRegion : IdentifiedObject
      {
        unique ordered reference Regions : SubGeographicalRegion [0..*] opposite Region
      }
      class IdentifiedObject : Element
      {
        unique ordered mRID : nmeta.String [1 ]
        unique ordered name : nmeta.String [1 ]
        unique ordered description : nmeta.String [1 ]
        unique ordered pathName : nmeta.String [1 ]
        unique ordered localName : nmeta.String [1 ]
        unique ordered aliasName : nmeta.String [1 ]
        unique ordered reference ModelingAuthoritySet : cimInfCore.ModelingAuthoritySet [0..1] opposite IdentifiedObjects
      }
      class VoltageLevel : EquipmentContainer
      {
        unique ordered lowVoltageLimit : nmeta.Float [1 ]
        unique ordered highVoltageLimit : nmeta.Float [1 ]
        unique ordered reference Bays : Bay [0..*] opposite VoltageLevel
        unique ordered reference BaseVoltage : BaseVoltage [0..1] opposite VoltageLevel
        unique ordered reference Substation : Substation [0..1] opposite VoltageLevels
      }
      class ConnectivityNode : IdentifiedObject
      {
        unique ordered reference ConnectivityNodeContainer : ConnectivityNodeContainer [0..1] opposite ConnectivityNodes
        unique ordered reference TopologicalNode : cimTopology.TopologicalNode [0..1] opposite ConnectivityNodes
        unique ordered reference BusNameMarker : cimTopology.BusNameMarker [0..1] opposite ConnectivityNode
        unique ordered reference LossPenaltyFactors : cimMarketOperations.LossPenaltyFactor [0..*] opposite ConnectivityNodes
        unique ordered reference NodeConstraintTerms : cimMarketOperations.NodeConstraintTerm [0..*] opposite ConnectivityNode
        unique ordered reference Terminals : Terminal [0..*] opposite ConnectivityNode
        unique ordered reference Pnode : cimMarketOperations.Pnode [0..1] opposite ConnectivityNode
      }
      class ConductingEquipment : Equipment
      {
        unique ordered phases : PhaseCode [0..1]
        unique ordered reference ProtectionEquipments : cimProtection.ProtectionEquipment [0..*] opposite ConductingEquipments
        unique ordered reference OutageStepRoles : cimInfOperations.OutageStepPsrRole [0..*] opposite ConductingEquipment
        unique ordered reference BaseVoltage : BaseVoltage [0..1] opposite ConductingEquipment
        unique ordered reference ClearanceTags : cimOutage.ClearanceTag [0..*] opposite ConductingEquipment
        unique ordered reference SvStatus : cimStateVariables.SvStatus [0..1] opposite ConductingEquipment
        unique ordered reference ElectricalAssets : cimInfAssets.ElectricalAsset [0..*] opposite ConductingEquipment
        unique ordered reference Terminals : Terminal [0..*] opposite ConductingEquipment
      }

    }

    namespace StateVariables ( cimStateVariables ) = http://iec.ch/TC57/2009/CIM-schema-cim14#StateVariables
    {
      class SvInjection : StateVariable
      {
        unique ordered qNetInjection : nmeta.Float [1 ]
        unique ordered pNetInjection : nmeta.Float [1 ]
        unique ordered reference TopologicalNode : cimTopology.TopologicalNode [0..1] opposite SvInjection
      }
      class SvPowerFlow : StateVariable
      {
        unique ordered p : nmeta.Float [1 ]
        unique ordered q : nmeta.Float [1 ]
        unique ordered reference Terminal : cimCore.Terminal [0..1] opposite SvPowerFlow
      }
      class TopologicalIsland : cimCore.IdentifiedObject
      {
        unique ordered reference AngleRef_TopologicalNode : cimTopology.TopologicalNode [0..1] opposite AngleRef_TopologicalIsland
        unique ordered reference TopologicalNodes : cimTopology.TopologicalNode [0..*] opposite TopologicalIsland
      }
      class SvStatus : StateVariable
      {
        unique ordered inService : nmeta.Boolean [1 ]
        unique ordered reference ConductingEquipment : cimCore.ConductingEquipment [0..1] opposite SvStatus
      }
      class StateVariable : Element
      {
      }
      class SvShortCircuit : StateVariable
      {
        unique ordered r0PerR : nmeta.Float [1 ]
        unique ordered sShortCircuit : nmeta.Float [1 ]
        unique ordered xPerR : nmeta.Float [1 ]
        unique ordered x0PerX : nmeta.Float [1 ]
        unique ordered reference TopologicalNode : cimTopology.TopologicalNode [0..1] opposite SvShortCircuit
      }
      class SvTapStep : StateVariable
      {
        unique ordered continuousPosition : nmeta.Float [1 ]
        unique ordered position : nmeta.Integer [1 ]
        unique ordered reference TapChanger : cimWires.TapChanger [0..1] opposite SvTapStep
      }
      class SvVoltage : StateVariable
      {
        unique ordered v : nmeta.Float [1 ]
        unique ordered angle : nmeta.Float [1 ]
        unique ordered reference TopologicalNode : cimTopology.TopologicalNode [0..1] opposite SvVoltage
      }
      class SvShuntCompensatorSections : StateVariable
      {
        unique ordered continuousSections : nmeta.Float [1 ]
        unique ordered sections : nmeta.Integer [1 ]
        unique ordered reference ShuntCompensator : cimWires.ShuntCompensator [0..1] opposite SvShuntCompensatorSections
      }

    }

    namespace Equivalents ( cimEquivalents ) = http://iec.ch/TC57/2009/CIM-schema-cim14#Equivalents
    {
      class EquivalentEquipment : cimCore.ConductingEquipment
      {
        unique ordered reference EquivalentNetwork : EquivalentNetwork [0..1] opposite EquivalentEquipments
      }
      class EquivalentInjection : EquivalentEquipment
      {
        unique ordered regulationStatus : nmeta.Boolean [1 ]
        unique ordered regulationCapability : nmeta.Boolean [1 ]
        unique ordered minP : nmeta.Float [1 ]
        unique ordered maxP : nmeta.Float [1 ]
        unique ordered regulationTarget : nmeta.Float [1 ]
      }
      class EquivalentNetwork : cimCore.ConnectivityNodeContainer
      {
        unique ordered reference EquivalentEquipments : EquivalentEquipment [0..*] opposite EquivalentNetwork
      }
      class EquivalentShunt : EquivalentEquipment
      {
        unique ordered b : nmeta.Float [1 ]
        unique ordered g : nmeta.Float [1 ]
      }
      class EquivalentBranch : EquivalentEquipment
      {
        unique ordered r : nmeta.Float [1 ]
        unique ordered x : nmeta.Float [1 ]
      }

    }

    namespace Domain ( cimDomain ) = http://iec.ch/TC57/2009/CIM-schema-cim14#Domain
    {
      enum Currency
      {
        GBP
        CNY = 1
        SEK = 2
        NOK = 3
        AUD = 4
        JPY = 5
        RUR = 6
        EUR = 7
        other = 8
        CAD = 9
        INR = 10
        CHF = 11
        USD = 12
        DKK = 13
      }
      enum UnitSymbol
      {
        A
        rad = 1
        none = 2
        V = 3
        g = 4
        WHz = 5
        m2 = 6
        VA = 7
        VArh = 8
        N = 9
        Pa = 10
        VAh = 11
        F = 12
        H = 13
        Hzminus1 = 14
        J = 15
        Ws = 16
        m = 17
        S = 18
        min = 19
        deg = 20
        Js = 21
        s = 22
        Wh = 23
        m3 = 24
        degC = 25
        VVAr = 26
        sminus1 = 27
        h_ = 28
        W = 29
        ohm = 30
        Hz = 31
        VAr = 32
        kgJ = 33
      }
      enum MonetaryAmountPerHeatUnit
      {
        USD_per_J
        EUR_per_J = 1
      }
      enum MonetaryAmountRate
      {
        EUR_per_s
        USD_per_s = 1
      }
      enum MonetaryAmountPerEnergyUnit
      {
        EUR_per_Wh
        USD_per_Wh = 1
      }
      enum UnitMultiplier
      {
        m
        p = 1
        c = 2
        T = 3
        d = 4
        k = 5
        M = 6
        micro = 7
        none = 8
        n = 9
        G = 10
      }

    }

    namespace LoadModel ( cimLoadModel ) = http://iec.ch/TC57/2009/CIM-schema-cim14#LoadModel
    {
      enum SeasonName
      {
        winter
        fall = 1
        spring = 2
        summer = 3
      }
      class ConformLoadSchedule : SeasonDayTypeSchedule
      {
        unique ordered reference ConformLoadGroup : ConformLoadGroup [0..1] opposite ConformLoadSchedules
      }
      class NonConformLoadGroup : LoadGroup
      {
        unique ordered reference NonConformLoadSchedules : NonConformLoadSchedule [0..*] opposite NonConformLoadGroup
        unique ordered reference EnergyConsumers : NonConformLoad [0..*] opposite LoadGroup
      }
      class NonConformLoad : cimWires.EnergyConsumer
      {
        unique ordered reference LoadGroup : NonConformLoadGroup [0..1] opposite EnergyConsumers
      }
      class DayType : cimCore.IdentifiedObject
      {
        unique ordered reference SeasonDayTypeSchedules : SeasonDayTypeSchedule [0..*] opposite DayType
      }
      class SubLoadArea : EnergyArea
      {
        unique ordered reference LoadArea : LoadArea [0..1] opposite SubLoadAreas
        unique ordered reference LoadGroups : LoadGroup [0..*] opposite SubLoadArea
      }
      class ConformLoadGroup : LoadGroup
      {
        unique ordered reference EnergyConsumers : ConformLoad [0..*] opposite LoadGroup
        unique ordered reference ConformLoadSchedules : ConformLoadSchedule [0..*] opposite ConformLoadGroup
      }
      class StationSupply : cimWires.EnergyConsumer
      {
      }
      class SeasonDayTypeSchedule : cimCore.RegularIntervalSchedule
      {
        unique ordered reference DayType : DayType [0..1] opposite SeasonDayTypeSchedules
        unique ordered reference Season : Season [0..1] opposite SeasonDayTypeSchedules
      }
      class NonConformLoadSchedule : SeasonDayTypeSchedule
      {
        unique ordered reference NonConformLoadGroup : NonConformLoadGroup [0..1] opposite NonConformLoadSchedules
      }
      class LoadArea : EnergyArea
      {
        unique ordered reference SubLoadAreas : SubLoadArea [0..*] opposite LoadArea
      }
      class EnergyArea : cimCore.IdentifiedObject
      {
        unique ordered reference ControlArea : cimControlArea.ControlArea [0..1] opposite EnergyArea
      }
      class LoadResponseCharacteristic : cimCore.IdentifiedObject
      {
        unique ordered exponentModel : nmeta.Boolean [1 ]
        unique ordered pConstantCurrent : nmeta.Float [1 ]
        unique ordered qConstantImpedance : nmeta.Float [1 ]
        unique ordered qFrequencyExponent : nmeta.Float [1 ]
        unique ordered pFrequencyExponent : nmeta.Float [1 ]
        unique ordered pConstantImpedance : nmeta.Float [1 ]
        unique ordered qVoltageExponent : nmeta.Float [1 ]
        unique ordered pVoltageExponent : nmeta.Float [1 ]
        unique ordered qConstantCurrent : nmeta.Float [1 ]
        unique ordered pConstantPower : nmeta.Float [1 ]
        unique ordered qConstantPower : nmeta.Float [1 ]
        unique ordered reference EnergyConsumer : cimWires.EnergyConsumer [0..*] opposite LoadResponse
      }
      class LoadGroup : cimCore.IdentifiedObject
      {
        unique ordered reference RegisteredLoads : cimMarketOperations.RegisteredLoad [0..*] opposite LoadArea
        unique ordered reference SubLoadArea : SubLoadArea [0..1] opposite LoadGroups
      }
      class Season : Element
      {
        unique ordered startDate : nmeta.DateTime [1 ]
        unique ordered name : SeasonName [0..1]
        unique ordered endDate : nmeta.DateTime [1 ]
        unique ordered reference ViolationLimits : cimMarketOperations.ViolationLimit [0..*] opposite Season
        unique ordered reference SeasonDayTypeSchedules : SeasonDayTypeSchedule [0..*] opposite Season
        unique ordered reference CapacityBenefitMargin : cimMarketOperations.CapacityBenefitMargin [0..*] opposite Season
      }
      class PowerCutZone : cimCore.PowerSystemResource
      {
        unique ordered cutLevel1 : nmeta.Float [1 ]
        unique ordered cutLevel2 : nmeta.Float [1 ]
        unique ordered reference EnergyConsumers : cimWires.EnergyConsumer [0..*] opposite PowerCutZone
      }
      class ConformLoad : cimWires.EnergyConsumer
      {
        unique ordered reference LoadGroup : ConformLoadGroup [0..1] opposite EnergyConsumers
      }

    }

    namespace Protection ( cimProtection ) = http://iec.ch/TC57/2009/CIM-schema-cim14#Protection
    {
      class CurrentRelay : ProtectionEquipment
      {
        unique ordered timeDelay1 : nmeta.Float [1 ]
        unique ordered timeDelay2 : nmeta.Float [1 ]
        unique ordered timeDelay3 : nmeta.Float [1 ]
        unique ordered inverseTimeFlag : nmeta.Boolean [1 ]
        unique ordered currentLimit3 : nmeta.Float [1 ]
        unique ordered currentLimit2 : nmeta.Float [1 ]
        unique ordered currentLimit1 : nmeta.Float [1 ]
      }
      class SynchrocheckRelay : ProtectionEquipment
      {
        unique ordered maxVoltDiff : nmeta.Float [1 ]
        unique ordered maxFreqDiff : nmeta.Float [1 ]
        unique ordered maxAngleDiff : nmeta.Float [1 ]
      }
      class RecloseSequence : cimCore.IdentifiedObject
      {
        unique ordered recloseDelay : nmeta.Float [1 ]
        unique ordered recloseStep : nmeta.Integer [1 ]
        unique ordered reference ProtectedSwitch : cimWires.ProtectedSwitch [0..1] opposite RecloseSequences
      }
      class SurgeProtector : cimCore.Equipment
      {
      }
      class ProtectionEquipment : cimCore.Equipment
      {
        unique ordered highLimit : nmeta.Float [1 ]
        unique ordered relayDelayTime : nmeta.Float [1 ]
        unique ordered powerDirectionFlag : nmeta.Boolean [1 ]
        unique ordered lowLimit : nmeta.Float [1 ]
        unique ordered reference ConductingEquipments : cimCore.ConductingEquipment [0..*] opposite ProtectionEquipments
        unique ordered reference Unit : cimCore.Unit [0..1] opposite ProtectionEquipments
        unique ordered reference ProtectedSwitches : cimWires.ProtectedSwitch [0..*]
      }
      class FaultIndicator : cimCore.Equipment
      {
      }

    }

    namespace Outage ( cimOutage ) = http://iec.ch/TC57/2009/CIM-schema-cim14#Outage
    {
      class OutageSchedule : cimCore.IrregularIntervalSchedule
      {
        unique ordered reference PlannedOutage : cimInfOperations.PlannedOutage [0..1] opposite OutageSchedules
        unique ordered reference PowerSystemResource : cimCore.PowerSystemResource [0..1] opposite OutageSchedule
        unique ordered reference SwitchingOperations : SwitchingOperation [0..*] opposite OutageSchedule
      }
      class ClearanceTagType : cimCore.IdentifiedObject
      {
        unique ordered reference ClearanceTags : ClearanceTag [0..*] opposite ClearanceTagType
      }
      enum SwitchState
      {
        open
        close = 1
      }
      class ClearanceTag : cimCore.IdentifiedObject
      {
        unique ordered groundReqFlag : nmeta.Boolean [1 ]
        unique ordered tagIssueTime : nmeta.DateTime [1 ]
        unique ordered workEndTime : nmeta.DateTime [1 ]
        unique ordered authorityName : nmeta.String [1 ]
        unique ordered phaseCheckReqFlag : nmeta.Boolean [1 ]
        unique ordered deenergizeReqFlag : nmeta.Boolean [1 ]
        unique ordered workStartTime : nmeta.DateTime [1 ]
        unique ordered workDescription : nmeta.String [1 ]
        unique ordered reference SafetyDocument : cimInfOperations.SafetyDocument [0..1] opposite ClearanceTags
        unique ordered reference ClearanceTagType : ClearanceTagType [0..1] opposite ClearanceTags
        unique ordered reference ConductingEquipment : cimCore.ConductingEquipment [0..1] opposite ClearanceTags
      }
      class SwitchingOperation : cimCore.IdentifiedObject
      {
        unique ordered operationTime : nmeta.DateTime [1 ]
        unique ordered newState : SwitchState [0..1]
        unique ordered reference Switches : cimWires.Switch [0..*] opposite SwitchingOperations
        unique ordered reference OutageSchedule : OutageSchedule [0..1] opposite SwitchingOperations
      }

    }

    namespace ControlArea ( cimControlArea ) = http://iec.ch/TC57/2009/CIM-schema-cim14#ControlArea
    {
      class ControlArea : cimCore.PowerSystemResource
      {
        unique ordered type : ControlAreaTypeKind [0..1]
        unique ordered pTolerance : nmeta.Float [1 ]
        unique ordered netInterchange : nmeta.Float [1 ]
        unique ordered reference ControlAreaGeneratingUnit : ControlAreaGeneratingUnit [0..*] opposite ControlArea
        unique ordered reference EnergyArea : cimLoadModel.EnergyArea [0..1] opposite ControlArea
        unique ordered reference TieFlow : TieFlow [0..*] opposite ControlArea
      }
      class AltGeneratingUnitMeas : Element
      {
        unique ordered priority : nmeta.Integer [1 ]
        unique ordered reference ControlAreaGeneratingUnit : ControlAreaGeneratingUnit [0..1] opposite AltGeneratingUnitMeas
        unique ordered reference AnalogValue : cimMeas.AnalogValue [0..1] opposite AltGeneratingUnit
      }
      class TieFlow : Element
      {
        unique ordered positiveFlowIn : nmeta.Boolean [1 ]
        unique ordered reference Terminal : cimCore.Terminal [0..1] opposite TieFlow
        unique ordered reference AltTieMeas : AltTieMeas [0..*] opposite TieFlow
        unique ordered reference ControlArea : ControlArea [0..1] opposite TieFlow
      }
      enum ControlAreaTypeKind
      {
        Interchange
        Forecast = 1
        AGC = 2
      }
      class ControlAreaGeneratingUnit : Element
      {
        unique ordered reference ControlArea : ControlArea [0..1] opposite ControlAreaGeneratingUnit
        unique ordered reference AltGeneratingUnitMeas : AltGeneratingUnitMeas [0..*] opposite ControlAreaGeneratingUnit
        unique ordered reference GeneratingUnit : cimProduction.GeneratingUnit [0..1] opposite ControlAreaGeneratingUnit
      }
      class AltTieMeas : Element
      {
        unique ordered priority : nmeta.Integer [1 ]
        unique ordered reference AnalogValue : cimMeas.AnalogValue [0..1] opposite AltTieMeas
        unique ordered reference TieFlow : TieFlow [0..1] opposite AltTieMeas
      }

    }

    namespace Contingency ( cimContingency ) = http://iec.ch/TC57/2009/CIM-schema-cim14#Contingency
    {
      class Contingency : cimCore.IdentifiedObject
      {
        unique ordered mustStudy : nmeta.Boolean [1 ]
        unique ordered reference ContingencyConstraintLimit : cimMarketOperations.ContingencyConstraintLimit [0..*] opposite Contingency
        unique ordered reference ContingencyElement : ContingencyElement [0..*] opposite Contingency
      }
      enum ContingencyEquipmentStatusKind
      {
        outOfService
        inService = 1
      }
      class ContingencyEquipment : ContingencyElement
      {
        unique ordered contingentStatus : ContingencyEquipmentStatusKind [0..1]
        unique ordered reference Equipment : cimCore.Equipment [0..1] opposite ContingencyEquipment
      }
      class ContingencyElement : cimCore.IdentifiedObject
      {
        unique ordered reference Contingency : Contingency [0..1] opposite ContingencyElement
      }

    }

    namespace Topology ( cimTopology ) = http://iec.ch/TC57/2009/CIM-schema-cim14#Topology
    {
      class TopologicalNode : cimCore.IdentifiedObject
      {
        unique ordered reference ReportingGroup : cimCore.ReportingGroup [0..1] opposite TopologicalNode
        unique ordered reference TopologicalIsland : cimStateVariables.TopologicalIsland [0..1] opposite TopologicalNodes
        unique ordered reference SvInjection : cimStateVariables.SvInjection [0..1] opposite TopologicalNode
        unique ordered reference Terminal : cimCore.Terminal [0..*] opposite TopologicalNode
        unique ordered reference ConnectivityNodeContainer : cimCore.ConnectivityNodeContainer [0..1] opposite TopologicalNode
        unique ordered reference ConnectivityNodes : cimCore.ConnectivityNode [0..*] opposite TopologicalNode
        unique ordered reference BaseVoltage : cimCore.BaseVoltage [0..1] opposite TopologicalNode
        unique ordered reference SvVoltage : cimStateVariables.SvVoltage [0..1] opposite TopologicalNode
        unique ordered reference SvShortCircuit : cimStateVariables.SvShortCircuit [0..1] opposite TopologicalNode
        unique ordered reference AngleRef_TopologicalIsland : cimStateVariables.TopologicalIsland [0..1] opposite AngleRef_TopologicalNode
      }
      class BusNameMarker : cimCore.IdentifiedObject
      {
        unique ordered reference ReportingGroup : cimCore.ReportingGroup [0..1] opposite BusNameMarker
        unique ordered reference ConnectivityNode : cimCore.ConnectivityNode [0..*] opposite BusNameMarker
      }

    }
    class IEC61970CIMVersion : Element
    {
      unique ordered date : nmeta.DateTime [1 ]
      unique ordered version : nmeta.String [1 ]
    }

  }

  namespace PackageDependencies ( cimPackageDependencies ) = http://iec.ch/TC57/2009/CIM-schema-cim14#PackageDependencies
  {
    class PackageDependenciesCIMVeresion : Element
    {
      unique ordered date : nmeta.DateTime [1 ]
      unique ordered vesion : nmeta.String [1 ]
    }

  }

  namespace IEC61968 ( cimIEC61968 ) = http://iec.ch/TC57/2009/CIM-schema-cim14#IEC61968
  {

    namespace Metering ( cimMetering ) = http://iec.ch/TC57/2009/CIM-schema-cim14#Metering
    {
      class EndDeviceEvent : cimCommon.ActivityRecord
      {
        unique ordered userID : nmeta.String [1 ]
        unique ordered reference MeterReading : MeterReading [0..1] opposite EndDeviceEvents
        unique ordered reference DeviceFunction : DeviceFunction [0..1] opposite EndDeviceEvents
      }
      class ReadingType : cimCore.IdentifiedObject
      {
        unique ordered intervalLength : nmeta.Float [1 ]
        unique ordered unit : cimDomain.UnitSymbol [0..1]
        unique ordered defaultQuality : nmeta.String [1 ]
        unique ordered kind : ReadingKind [0..1]
        unique ordered channelNumber : nmeta.Integer [1 ]
        unique ordered multiplier : cimDomain.UnitMultiplier [0..1]
        unique ordered defaultValueDataType : nmeta.String [1 ]
        unique ordered reverseChronology : nmeta.Boolean [1 ]
        unique ordered reference dynamicConfiguration : DynamicDemand [0..1]
        unique ordered reference Register : Register [0..1] opposite ReadingType
        unique ordered reference IntervalBlocks : IntervalBlock [0..*] opposite ReadingType
        unique ordered reference Readings : Reading [0..*] opposite ReadingType
        unique ordered reference Pending : Pending [0..1] opposite ReadingType
      }
      class MeterServiceWork : cimWork.Work
      {
        unique ordered reference OldMeterAsset : MeterAsset [0..1] opposite MeterReplacementWorks
        unique ordered reference MeterAsset : MeterAsset [0..1] opposite MeterServiceWorks
      }
      class DeviceFunction : cimAssets.AssetFunction
      {
        unique ordered disabled : nmeta.Boolean [1 ]
        unique ordered reference ComEquipmentAsset : cimInfAssets.ComEquipmentInfo [0..1] opposite DeviceFunctions
        unique ordered reference EndDeviceAsset : EndDeviceAsset [0..1] opposite DeviceFunctions
        unique ordered reference EndDeviceEvents : EndDeviceEvent [0..*] opposite DeviceFunction
        unique ordered reference Registers : Register [0..*] opposite DeviceFunction
      }
      class EndDeviceGroup : cimCore.IdentifiedObject
      {
        unique ordered groupAddress : nmeta.Integer [1 ]
        unique ordered reference DemandResponseProgram : DemandResponseProgram [0..1] opposite EndDeviceGroups
        unique ordered reference EndDeviceAssets : EndDeviceAsset [0..*] opposite EndDeviceGroups
        unique ordered reference EndDeviceControls : EndDeviceControl [0..*] opposite EndDeviceGroup
      }
      class DynamicDemand : Element
      {
        unique ordered subInterval : nmeta.Float [1 ]
        unique ordered interval : nmeta.Float [1 ]
        unique ordered kind : DemandKind [0..1]
      }
      class IntervalReading : cimMeas.MeasurementValue
      {
        unique ordered value : nmeta.Float [1 ]
        unique ordered reference ReadingQualities : ReadingQuality [0..*] opposite IntervalReading
        unique ordered reference IntervalBlocks : IntervalBlock [0..*] opposite IntervalReadings
      }
      class SDPLocation : cimCommon.Location
      {
        unique ordered accessMethod : nmeta.String [1 ]
        unique ordered remark : nmeta.String [1 ]
        unique ordered siteAccessProblem : nmeta.String [1 ]
        unique ordered occupancyDate : nmeta.String [1 ]
        unique ordered reference ServiceDeliveryPoints : ServiceDeliveryPoint [0..*] opposite SDPLocations
      }
      class EndDeviceAsset : cimAssets.AssetContainer
      {
        unique ordered disconnect : nmeta.Boolean [1 ]
        unique ordered relayCapable : nmeta.Boolean [1 ]
        unique ordered metrology : nmeta.Boolean [1 ]
        unique ordered ratedVoltage : nmeta.Float [1 ]
        unique ordered ratedCurrent : nmeta.Float [1 ]
        unique ordered timeZoneOffset : nmeta.Float [1 ]
        unique ordered readRequest : nmeta.Boolean [1 ]
        unique ordered dstEnabled : nmeta.Boolean [1 ]
        unique ordered phaseCount : nmeta.Integer [1 ]
        unique ordered reverseFlowHandling : nmeta.Boolean [1 ]
        unique ordered demandResponse : nmeta.Boolean [1 ]
        unique ordered amrSystem : nmeta.String [1 ]
        unique ordered loadControl : nmeta.Boolean [1 ]
        unique ordered outageReport : nmeta.Boolean [1 ]
        unique ordered reference Readings : Reading [0..*] opposite EndDeviceAsset
        unique ordered reference ServiceDeliveryPoint : ServiceDeliveryPoint [0..1] opposite EndDeviceAssets
        unique ordered reference ServiceLocation : cimCustomers.ServiceLocation [0..1] opposite EndDeviceAssets
        unique ordered reference EndDeviceControls : EndDeviceControl [0..*] opposite EndDeviceAsset
        unique ordered reference EndDeviceModel : cimAssetModels.EndDeviceModel [0..1] opposite EndDeviceAssets
        unique ordered reference DeviceFunctions : DeviceFunction [0..*] opposite EndDeviceAsset
        unique ordered reference Customer : cimCustomers.Customer [0..1] opposite EndDeviceAssets
        unique ordered reference EndDeviceGroups : EndDeviceGroup [0..*] opposite EndDeviceAssets
      }
      enum ReadingKind
      {
        voltageAngle
        powerFactor = 1
        demand = 2
        current = 3
        date = 4
        currentAngle = 5
        power = 6
        time = 7
        other = 8
        voltage = 9
        energy = 10
        frequency = 11
        pressure = 12
        volume = 13
        phaseAngle = 14
      }
      class IntervalBlock : Element
      {
        unique ordered reference MeterReading : MeterReading [0..1] opposite IntervalBlocks
        unique ordered reference IntervalReadings : IntervalReading [0..*] opposite IntervalBlocks
        unique ordered reference Pending : Pending [0..1] opposite IntervalBlocks
        unique ordered reference ReadingType : ReadingType [0..1] opposite IntervalBlocks
      }
      class ReadingQuality : Element
      {
        unique ordered quality : nmeta.String [1 ]
        unique ordered reference IntervalReading : IntervalReading [0..1] opposite ReadingQualities
        unique ordered reference Reading : Reading [0..1] opposite ReadingQualities
      }
      class MeterAsset : EndDeviceAsset
      {
        unique ordered kR : nmeta.Float [1 ]
        unique ordered kH : nmeta.Float [1 ]
        unique ordered formNumber : nmeta.String [1 ]
        unique ordered reference MeterAssetModel : cimInfAssetModels.MeterAssetModel [0..1] opposite MeterAssets
        unique ordered reference VendingTransactions : cimPaymentMetering.Transaction [0..*] opposite MeterAsset
        unique ordered reference MeterServiceWorks : MeterServiceWork [0..*] opposite MeterAsset
        unique ordered reference MeterReadings : MeterReading [0..*] opposite MeterAsset
        unique ordered reference MeterReplacementWorks : MeterServiceWork [0..*] opposite OldMeterAsset
      }
      class MeterReading : cimCore.IdentifiedObject
      {
        unique ordered reference EndDeviceEvents : EndDeviceEvent [0..*] opposite MeterReading
        unique ordered reference ServiceDeliveryPoint : ServiceDeliveryPoint [0..1] opposite MeterReadings
        unique ordered reference CustomerAgreement : cimCustomers.CustomerAgreement [0..1] opposite MeterReadings
        unique ordered reference MeterAsset : MeterAsset [0..1] opposite MeterReadings
        unique ordered reference valuesInterval : cimCommon.DateTimeInterval [0..1]
        unique ordered reference Readings : Reading [0..*] opposite MeterReadings
        unique ordered reference IntervalBlocks : IntervalBlock [0..*] opposite MeterReading
      }
      class Reading : cimMeas.MeasurementValue
      {
        unique ordered value : nmeta.Float [1 ]
        unique ordered reference EndDeviceAsset : EndDeviceAsset [0..1] opposite Readings
        unique ordered reference ReadingQualities : ReadingQuality [0..*] opposite Reading
        unique ordered reference MeterReadings : MeterReading [0..*] opposite Readings
        unique ordered reference ReadingType : ReadingType [0..1] opposite Readings
      }
      class DemandResponseProgram : cimCore.IdentifiedObject
      {
        unique ordered type : nmeta.String [1 ]
        unique ordered reference CustomerAgreements : cimCustomers.CustomerAgreement [0..*] opposite DemandResponseProgram
        unique ordered reference validityInterval : cimCommon.DateTimeInterval [0..1]
        unique ordered reference EndDeviceGroups : EndDeviceGroup [0..*] opposite DemandResponseProgram
        unique ordered reference EndDeviceControls : EndDeviceControl [0..*] opposite DemandResponseProgram
      }
      class ComFunction : DeviceFunction
      {
        unique ordered twoWay : nmeta.Boolean [1 ]
        unique ordered amrAddress : nmeta.String [1 ]
        unique ordered amrRouter : nmeta.String [1 ]
      }
      class ServiceDeliveryPoint : cimCore.IdentifiedObject
      {
        unique ordered phaseCode : cimCore.PhaseCode [0..1]
        unique ordered ratedPower : nmeta.Float [1 ]
        unique ordered grounded : nmeta.Boolean [1 ]
        unique ordered ratedCurrent : nmeta.Float [1 ]
        unique ordered nominalServiceVoltage : nmeta.Integer [1 ]
        unique ordered estimatedLoad : nmeta.Float [1 ]
        unique ordered servicePriority : nmeta.String [1 ]
        unique ordered serviceDeliveryRemark : nmeta.String [1 ]
        unique ordered checkBilling : nmeta.Boolean [1 ]
        unique ordered ctptReference : nmeta.Integer [1 ]
        unique ordered reference ServiceLocation : cimCustomers.ServiceLocation [0..1] opposite ServiceDeliveryPoints
        unique ordered reference PowerQualityPricings : cimInfCustomers.PowerQualityPricing [0..*] opposite ServiceDeliveryPoints
        unique ordered reference CustomerAgreement : cimCustomers.CustomerAgreement [0..1] opposite ServiceDeliveryPoints
        unique ordered reference EnergyConsumer : cimWires.EnergyConsumer [0..1] opposite ServiceDeliveryPoints
        unique ordered reference ServiceCategory : cimCustomers.ServiceCategory [0..1] opposite ServiceDeliveryPoints
        unique ordered reference EndDeviceAssets : EndDeviceAsset [0..*] opposite ServiceDeliveryPoint
        unique ordered reference ServiceSupplier : cimPaymentMetering.ServiceSupplier [0..1] opposite ServiceDeliveryPoints
        unique ordered reference PricingStructures : cimCustomers.PricingStructure [0..*] opposite ServiceDeliveryPoints
        unique ordered reference Transformer : cimWiresExt.DistributionTransformer [0..1] opposite ServiceDeliveryPoints
        unique ordered reference MeterReadings : MeterReading [0..*] opposite ServiceDeliveryPoint
        unique ordered reference SDPLocations : SDPLocation [0..*] opposite ServiceDeliveryPoints
      }
      enum DemandKind
      {
        rollingBlock
        logarithmic = 1
        fixedBlock = 2
      }
      class Register : cimCore.IdentifiedObject
      {
        unique ordered leftDigitCount : nmeta.Integer [1 ]
        unique ordered rightDigitCount : nmeta.Integer [1 ]
        unique ordered reference ReadingType : ReadingType [0..1] opposite Register
        unique ordered reference DeviceFunction : DeviceFunction [0..1] opposite Registers
      }
      class EndDeviceControl : cimCore.IdentifiedObject
      {
        unique ordered drProgramMandatory : nmeta.Boolean [1 ]
        unique ordered drProgramLevel : nmeta.Integer [1 ]
        unique ordered type : nmeta.String [1 ]
        unique ordered priceSignal : nmeta.Float [1 ]
        unique ordered reference scheduledInterval : cimCommon.DateTimeInterval [0..1]
        unique ordered reference CustomerAgreement : cimCustomers.CustomerAgreement [0..1] opposite EndDeviceControls
        unique ordered reference EndDeviceAsset : EndDeviceAsset [0..1] opposite EndDeviceControls
        unique ordered reference EndDeviceGroup : EndDeviceGroup [0..1] opposite EndDeviceControls
        unique ordered reference DemandResponseProgram : DemandResponseProgram [0..1] opposite EndDeviceControls
      }
      class Pending : Element
      {
        unique ordered offset : nmeta.Integer [1 ]
        unique ordered multiplyBeforeAdd : nmeta.Boolean [1 ]
        unique ordered scalarFloat : nmeta.Float [1 ]
        unique ordered scalarDenominator : nmeta.Integer [1 ]
        unique ordered scalarNumerator : nmeta.Integer [1 ]
        unique ordered reference ReadingType : ReadingType [0..1] opposite Pending
        unique ordered reference IntervalBlocks : IntervalBlock [0..*] opposite Pending
      }
      class ElectricMeteringFunction : DeviceFunction
      {
        unique ordered demandMultiplierApplied : nmeta.Boolean [1 ]
        unique ordered transformerCTRatio : nmeta.Float [1 ]
        unique ordered billingMultiplier : nmeta.Float [1 ]
        unique ordered currentRating : nmeta.Float [1 ]
        unique ordered transformerRatiosApplied : nmeta.Boolean [1 ]
        unique ordered kWMultiplier : nmeta.Integer [1 ]
        unique ordered billingMultiplierApplied : nmeta.Boolean [1 ]
        unique ordered demandMultiplier : nmeta.Float [1 ]
        unique ordered kWhMultiplier : nmeta.Integer [1 ]
        unique ordered transformerVTRatio : nmeta.Float [1 ]
        unique ordered voltageRating : nmeta.Float [1 ]
        unique ordered reference MeteringFunctionConfiguration : cimInfMetering.MeteringFunctionConfiguration [0..1] opposite ElectricMeteringFunctions
      }

    }

    namespace WiresExt ( cimWiresExt ) = http://iec.ch/TC57/2009/CIM-schema-cim14#WiresExt
    {
      class DistributionTransformerWinding : cimCore.ConductingEquipment
      {
        unique ordered grounded : nmeta.Boolean [1 ]
        unique ordered xground : nmeta.Float [1 ]
        unique ordered rground : nmeta.Float [1 ]
        unique ordered reference FromWindingInsulations : cimInfAssets.WindingInsulation [0..*] opposite FromWinding
        unique ordered reference RatioTapChanger : cimWires.RatioTapChanger [0..1] opposite Winding
        unique ordered reference PhaseTapChanger : cimWires.PhaseTapChanger [0..1] opposite Winding
        unique ordered reference PiImpedance : WindingPiImpedance [0..1] opposite Windings
        unique ordered reference ToWindingInsulations : cimInfAssets.WindingInsulation [0..*] opposite ToWinding
        unique ordered reference Transformer : DistributionTransformer [0..1] opposite Windings
        unique ordered reference WindingInfo : cimAssetModels.WindingInfo [0..1] opposite Windings
      }
      class PerLengthPhaseImpedance : cimCore.IdentifiedObject
      {
        unique ordered conductorCount : nmeta.Integer [1 ]
        unique ordered reference ConductorSegments : DistributionLineSegment [0..*] opposite PhaseImpedance
        unique ordered reference PhaseImpedanceData : PhaseImpedanceData [0..*] opposite PhaseImpedance
      }
      class DistributionTapChanger : cimWires.RatioTapChanger
      {
        unique ordered ptRatio : nmeta.Float [1 ]
        unique ordered limitVoltage : nmeta.Float [1 ]
        unique ordered reverseLineDropR : nmeta.Float [1 ]
        unique ordered reverseLineDropX : nmeta.Float [1 ]
        unique ordered ctRating : nmeta.Float [1 ]
        unique ordered lineDropR : nmeta.Float [1 ]
        unique ordered bandVoltage : nmeta.Float [1 ]
        unique ordered lineDropX : nmeta.Float [1 ]
        unique ordered ctRatio : nmeta.Float [1 ]
        unique ordered lineDropCompensation : nmeta.Boolean [1 ]
        unique ordered monitoredPhase : cimCore.PhaseCode [0..1]
        unique ordered targetVoltage : nmeta.Float [1 ]
      }
      class PerLengthSequenceImpedance : cimCore.IdentifiedObject
      {
        unique ordered x0 : nmeta.Float [1 ]
        unique ordered bch : nmeta.Float [1 ]
        unique ordered r0 : nmeta.Float [1 ]
        unique ordered g0ch : nmeta.Float [1 ]
        unique ordered r : nmeta.Float [1 ]
        unique ordered x : nmeta.Float [1 ]
        unique ordered gch : nmeta.Float [1 ]
        unique ordered b0ch : nmeta.Float [1 ]
        unique ordered reference ConductorSegments : DistributionLineSegment [0..*] opposite SequenceImpedance
      }
      class TransformerBank : cimCore.Equipment
      {
        unique ordered vectorGroup : nmeta.String [1 ]
        unique ordered reference Transformers : DistributionTransformer [0..*] opposite TransformerBank
      }
      class DistributionLineSegment : cimWires.ACLineSegment
      {
        unique ordered reference PhaseImpedance : PerLengthPhaseImpedance [0..1] opposite ConductorSegments
        unique ordered reference ConductorAssets : cimInfAssets.ConductorAsset [0..*] opposite ConductorSegment
        unique ordered reference SequenceImpedance : PerLengthSequenceImpedance [0..1] opposite ConductorSegments
        unique ordered reference ConductorInfo : cimAssetModels.ConductorInfo [0..1] opposite ConductorSegments
      }
      class PhaseImpedanceData : Element
      {
        unique ordered sequenceNumber : nmeta.Integer [1 ]
        unique ordered b : nmeta.Float [1 ]
        unique ordered x : nmeta.Float [1 ]
        unique ordered r : nmeta.Float [1 ]
        unique ordered reference PhaseImpedance : PerLengthPhaseImpedance [0..1] opposite PhaseImpedanceData
      }
      class WindingPiImpedance : cimCore.IdentifiedObject
      {
        unique ordered x : nmeta.Float [1 ]
        unique ordered r : nmeta.Float [1 ]
        unique ordered g : nmeta.Float [1 ]
        unique ordered r0 : nmeta.Float [1 ]
        unique ordered b : nmeta.Float [1 ]
        unique ordered x0 : nmeta.Float [1 ]
        unique ordered g0 : nmeta.Float [1 ]
        unique ordered b0 : nmeta.Float [1 ]
        unique ordered reference Windings : DistributionTransformerWinding [0..*] opposite PiImpedance
      }
      class DistributionTransformer : cimCore.Equipment
      {
        unique ordered reference TransformerBank : TransformerBank [0..1] opposite Transformers
        unique ordered reference TransformerObservations : cimInfAssets.TransformerObservation [0..*] opposite Transformer
        unique ordered reference TransformerInfo : cimAssetModels.TransformerInfo [0..1] opposite Transformers
        unique ordered reference ServiceDeliveryPoints : cimMetering.ServiceDeliveryPoint [0..*] opposite Transformer
        unique ordered reference Windings : DistributionTransformerWinding [0..*] opposite Transformer
      }

    }

    namespace Common ( cimCommon ) = http://iec.ch/TC57/2009/CIM-schema-cim14#Common
    {
      class DateTimeInterval : Element
      {
        unique ordered start : nmeta.DateTime [1 ]
        unique ordered end : nmeta.DateTime [1 ]
      }
      class PostalAddress : Element
      {
        unique ordered postalCode : nmeta.String [1 ]
        unique ordered poBox : nmeta.String [1 ]
        unique ordered reference townDetail : TownDetail [0..1]
        unique ordered reference streetDetail : StreetDetail [0..1]
      }
      class Organisation : cimCore.IdentifiedObject
      {
        unique ordered reference streetAddress : StreetAddress [0..1]
        unique ordered reference electronicAddress : ElectronicAddress [0..1]
        unique ordered reference postalAddress : PostalAddress [0..1]
        unique ordered reference phone1 : TelephoneNumber [0..1]
        unique ordered reference phone2 : TelephoneNumber [0..1]
        unique ordered reference MarketRoles : cimInfCommon.MarketRole [0..*] opposite Organisations
        unique ordered reference BusinessRoles : cimInfCommon.BusinessRole [0..*] opposite Organisations
      }
      class TelephoneNumber : Element
      {
        unique ordered countryCode : nmeta.String [1 ]
        unique ordered cityCode : nmeta.String [1 ]
        unique ordered localNumber : nmeta.String [1 ]
        unique ordered areaCode : nmeta.String [1 ]
        unique ordered extension : nmeta.String [1 ]
      }
      class StreetAddress : Element
      {
        unique ordered reference streetDetail : StreetDetail [0..1]
        unique ordered reference status : Status [0..1]
        unique ordered reference townDetail : TownDetail [0..1]
      }
      class TimeSchedule : Document
      {
        unique ordered recurrencePattern : nmeta.String [1 ]
        unique ordered disabled : nmeta.Boolean [1 ]
        unique ordered recurrencePeriod : nmeta.Float [1 ]
        unique ordered offset : nmeta.Float [1 ]
        unique ordered reference scheduleInterval : DateTimeInterval [0..1]
        unique ordered reference TimePoints : TimePoint [0..*] opposite TimeSchedule
      }
      class Document : cimCore.IdentifiedObject
      {
        unique ordered subject : nmeta.String [1 ]
        unique ordered createdDateTime : nmeta.DateTime [1 ]
        unique ordered revisionNumber : nmeta.String [1 ]
        unique ordered category : nmeta.String [1 ]
        unique ordered lastModifiedDateTime : nmeta.DateTime [1 ]
        unique ordered title : nmeta.String [1 ]
        unique ordered reference ScheduledEvents : cimInfCommon.ScheduledEvent [0..*] opposite Document
        unique ordered reference ErpOrganisationRoles : cimInfERPSupport.DocOrgRole [0..*] opposite Document
        unique ordered reference ToDocumentRoles : cimInfCommon.DocDocRole [0..*] opposite FromDocument
        unique ordered reference AssetRoles : cimInfAssets.DocAssetRole [0..*] opposite Document
        unique ordered reference ErpPersonRoles : cimInfERPSupport.DocErpPersonRole [0..*] opposite Document
        unique ordered reference electronicAddress : ElectronicAddress [0..1]
        unique ordered reference status : Status [0..1]
        unique ordered reference NetworkDataSets : cimInfOperations.NetworkDataSet [0..*] opposite Documents
        unique ordered reference PowerSystemResourceRoles : cimInfCommon.DocPsrRole [0..*] opposite Document
        unique ordered reference ActivityRecords : ActivityRecord [0..*] opposite Documents
        unique ordered reference Measurements : cimMeas.Measurement [0..*] opposite Documents
        unique ordered reference FromDocumentRoles : cimInfCommon.DocDocRole [0..*] opposite ToDocument
        unique ordered reference ChangeSets : cimInfOperations.ChangeSet [0..*] opposite Documents
        unique ordered reference docStatus : Status [0..1]
        unique ordered reference ChangeItems : cimInfOperations.ChangeItem [0..*] opposite Document
        unique ordered reference ScheduleParameterInfos : cimInfCommon.ScheduleParameterInfo [0..*] opposite Documents
      }
      class PositionPoint : Element
      {
        unique ordered sequenceNumber : nmeta.Integer [1 ]
        unique ordered xPosition : nmeta.String [1 ]
        unique ordered yPosition : nmeta.String [1 ]
        unique ordered zPosition : nmeta.String [1 ]
        unique ordered reference CoordinateSystem : CoordinateSystem [0..1] opposite PositionPoints
        unique ordered reference Location : Location [0..1]
      }
      class CoordinateSystem : Element
      {
        unique ordered name : nmeta.String [1 ]
        unique ordered reference GmlDiagramObjects : cimInfGMLSupport.GmlDiagramObject [0..*] opposite CoordinateSystems
        unique ordered reference Diagrams : cimInfGMLSupport.Diagram [0..*] opposite CoordinateSystem
        unique ordered reference Location : Location [0..1] opposite CoordinateSystems
        unique ordered reference PositionPoints : PositionPoint [0..*] opposite CoordinateSystem
      }
      class UserAttribute : Element
      {
        unique ordered sequenceNumber : nmeta.Integer [1 ]
        unique ordered name : nmeta.String [1 ]
        unique ordered value : nmeta.String [1 ]
        unique ordered reference PropertySpecification : cimInfAssets.Specification [0..1] opposite AssetProperites
        unique ordered reference PassThroughBills : cimMarketOperations.PassThroughBill [0..*] opposite UserAttributes
        unique ordered reference Transaction : cimPaymentMetering.Transaction [0..1] opposite UserAttributes
        unique ordered reference RatingAssets : cimAssets.Asset [0..*] opposite Ratings
        unique ordered reference ErpLedgerEntries : cimInfERPSupport.ErpLedgerEntry [0..*] opposite UserAttributes
        unique ordered reference PropertyAssets : cimAssets.Asset [0..*] opposite Properties
        unique ordered reference ErpStatementLineItems : cimMarketOperations.MarketStatementLineItem [0..*] opposite UserAttributes
        unique ordered reference ErpInvoiceLineItems : cimInfERPSupport.ErpInvoiceLineItem [0..*] opposite UserAttributes
        unique ordered reference ProcedureDataSets : cimInfAssets.ProcedureDataSet [0..*] opposite Properties
        unique ordered reference RatingSpecification : cimInfAssets.Specification [0..1] opposite Ratings
        unique ordered reference Procedure : cimInfAssets.Procedure [0..1] opposite ProcedureValues
        unique ordered reference BillDeterminants : cimMarketOperations.BillDeterminant [0..*] opposite UserAttributes
      }
      class Location : cimCore.IdentifiedObject
      {
        unique ordered geoInfoReference : nmeta.String [1 ]
        unique ordered category : nmeta.String [1 ]
        unique ordered corporateCode : nmeta.String [1 ]
        unique ordered direction : nmeta.String [1 ]
        unique ordered reference secondaryAddress : StreetAddress [0..1]
        unique ordered reference Measurements : cimMeas.Measurement [0..*] opposite Locations
        unique ordered reference Directions : cimInfLocations.Direction [0..*] opposite Location
        unique ordered reference PowerSystemResources : cimCore.PowerSystemResource [0..*] opposite Location
        unique ordered reference phone2 : TelephoneNumber [0..1]
        unique ordered reference phone1 : TelephoneNumber [0..1]
        unique ordered reference LandProperties : cimInfLocations.LandProperty [0..*] opposite Locations
        unique ordered reference DimensionsInfo : cimInfAssets.DimensionsInfo [0..1] opposite Locations
        unique ordered reference ChangeItems : cimInfOperations.ChangeItem [0..*] opposite Location
        unique ordered reference ErpOrganisations : cimInfERPSupport.ErpOrganisation [0..*] opposite Locations
        unique ordered reference CoordinateSystems : CoordinateSystem [0..*] opposite Location
        unique ordered reference Assets : cimAssets.Asset [0..*] opposite Location
        unique ordered reference Routes : cimInfLocations.Route [0..*] opposite Locations
        unique ordered reference Hazards : cimInfLocations.Hazard [0..*] opposite Locations
        unique ordered reference mainAddress : StreetAddress [0..1]
        unique ordered reference electronicAddress : ElectronicAddress [0..1]
        unique ordered reference RedLines : cimInfLocations.RedLine [0..*] opposite Locations
        unique ordered reference status : Status [0..1]
        unique ordered reference Crews : cimInfWork.Crew [0..*] opposite Locations
        unique ordered reference Position : PositionPoint [0..1]
      }
      class StreetDetail : Element
      {
        unique ordered name : nmeta.String [1 ]
        unique ordered prefix : nmeta.String [1 ]
        unique ordered buildingName : nmeta.String [1 ]
        unique ordered suiteNumber : nmeta.String [1 ]
        unique ordered withinTownLimits : nmeta.Boolean [1 ]
        unique ordered addressGeneral : nmeta.String [1 ]
        unique ordered number : nmeta.String [1 ]
        unique ordered suffix : nmeta.String [1 ]
        unique ordered type : nmeta.String [1 ]
        unique ordered code : nmeta.String [1 ]
      }
      class Agreement : Document
      {
        unique ordered signDate : nmeta.String [1 ]
        unique ordered reference validityInterval : DateTimeInterval [0..1]
      }
      class ActivityRecord : cimCore.IdentifiedObject
      {
        unique ordered severity : nmeta.String [1 ]
        unique ordered category : nmeta.String [1 ]
        unique ordered reason : nmeta.String [1 ]
        unique ordered createdDateTime : nmeta.DateTime [1 ]
        unique ordered reference MarketFactors : cimMarketOperations.MarketFactors [0..*]
        unique ordered reference Assets : cimAssets.Asset [0..*] opposite ActivityRecords
        unique ordered reference ScheduledEvent : cimInfCommon.ScheduledEvent [0..1] opposite ActivityRecord
        unique ordered reference status : Status [0..1]
        unique ordered reference Documents : Document [0..*] opposite ActivityRecords
        unique ordered reference Organisations : cimInfERPSupport.ErpOrganisation [0..*] opposite ActivityRecords
        unique ordered reference ErpPersons : cimInfERPSupport.ErpPerson [0..*] opposite ActivityRecords
      }
      class ElectronicAddress : Element
      {
        unique ordered lan : nmeta.String [1 ]
        unique ordered email : nmeta.String [1 ]
        unique ordered userID : nmeta.String [1 ]
        unique ordered web : nmeta.String [1 ]
        unique ordered password : nmeta.String [1 ]
        unique ordered radio : nmeta.String [1 ]
        unique ordered reference status : Status [0..1]
      }
      class Status : Element
      {
        unique ordered reason : nmeta.String [1 ]
        unique ordered value : nmeta.String [1 ]
        unique ordered remark : nmeta.String [1 ]
        unique ordered dateTime : nmeta.DateTime [1 ]
      }
      class TownDetail : Element
      {
        unique ordered country : nmeta.String [1 ]
        unique ordered code : nmeta.String [1 ]
        unique ordered name : nmeta.String [1 ]
        unique ordered section : nmeta.String [1 ]
        unique ordered stateOrProvince : nmeta.String [1 ]
      }
      class TimePoint : cimCore.IdentifiedObject
      {
        unique ordered sequenceNumber : nmeta.Integer [1 ]
        unique ordered relativeTimeInterval : nmeta.Float [1 ]
        unique ordered dateTime : nmeta.DateTime [1 ]
        unique ordered reference status : Status [0..1]
        unique ordered reference ScheduledEvents : cimInfCommon.ScheduledEvent [0..*] opposite TimePoint
        unique ordered reference window : DateTimeInterval [0..1]
        unique ordered reference TimeSchedule : TimeSchedule [0..1] opposite TimePoints
      }

    }

    namespace AssetModels ( cimAssetModels ) = http://iec.ch/TC57/2009/CIM-schema-cim14#AssetModels
    {
      enum ConductorMaterialKind
      {
        steel
        other = 1
        aluminum = 2
        copper = 3
        acsr = 4
      }
      class ConductorInfo : cimCore.IdentifiedObject
      {
        unique ordered phaseCount : nmeta.Integer [1 ]
        unique ordered insulated : nmeta.Boolean [1 ]
        unique ordered insulationThickness : nmeta.Float [1 ]
        unique ordered usage : ConductorUsageKind [0..1]
        unique ordered insulationMaterial : ConductorInsulationKind [0..1]
        unique ordered reference ConductorSegments : cimWiresExt.DistributionLineSegment [0..*] opposite ConductorInfo
        unique ordered reference WireArrangements : WireArrangement [0..*] opposite ConductorInfo
      }
      class WireType : cimCore.IdentifiedObject
      {
        unique ordered rAC75 : nmeta.Float [1 ]
        unique ordered rAC50 : nmeta.Float [1 ]
        unique ordered radius : nmeta.Float [1 ]
        unique ordered strandCount : nmeta.Integer [1 ]
        unique ordered coreRadius : nmeta.Float [1 ]
        unique ordered rAC25 : nmeta.Float [1 ]
        unique ordered rDC20 : nmeta.Float [1 ]
        unique ordered sizeDescription : nmeta.String [1 ]
        unique ordered coreStrandCount : nmeta.Integer [1 ]
        unique ordered ratedCurrent : nmeta.Float [1 ]
        unique ordered gmr : nmeta.Float [1 ]
        unique ordered material : ConductorMaterialKind [0..1]
        unique ordered reference ConcentricNeutralCableInfos : ConcentricNeutralCableInfo [0..*] opposite WireType
        unique ordered reference WireArrangements : WireArrangement [0..*] opposite WireType
      }
      class ConcentricNeutralCableInfo : CableInfo
      {
        unique ordered diameterOverNeutral : nmeta.Float [1 ]
        unique ordered neutralStrandCount : nmeta.Integer [1 ]
        unique ordered reference WireType : WireType [0..1] opposite ConcentricNeutralCableInfos
      }
      class WindingInfo : cimCore.IdentifiedObject
      {
        unique ordered emergencyS : nmeta.Float [1 ]
        unique ordered phaseAngle : nmeta.Integer [1 ]
        unique ordered ratedS : nmeta.Float [1 ]
        unique ordered ratedU : nmeta.Float [1 ]
        unique ordered r : nmeta.Float [1 ]
        unique ordered sequenceNumber : nmeta.Integer [1 ]
        unique ordered shortTermS : nmeta.Float [1 ]
        unique ordered connectionKind : cimWires.WindingConnection [0..1]
        unique ordered insulationU : nmeta.Float [1 ]
        unique ordered reference WindingTests : DistributionWindingTest [0..*] opposite FromWinding
        unique ordered reference Windings : cimWiresExt.DistributionTransformerWinding [0..*] opposite WindingInfo
        unique ordered reference ToWindingSpecs : ToWindingSpec [0..*] opposite ToWinding
        unique ordered reference TransformerInfo : TransformerInfo [0..1] opposite WindingInfos
      }
      class OverheadConductorInfo : ConductorInfo
      {
        unique ordered neutralInsulationThickness : nmeta.Float [1 ]
        unique ordered phaseConductorSpacing : nmeta.Float [1 ]
        unique ordered phaseConductorCount : nmeta.Integer [1 ]
        unique ordered reference MountingPoint : cimInfAssets.MountingPoint [0..1] opposite OverheadConductors
      }
      class ToWindingSpec : cimCore.IdentifiedObject
      {
        unique ordered voltage : nmeta.Float [1 ]
        unique ordered toTapStep : nmeta.Integer [1 ]
        unique ordered phaseShift : nmeta.Float [1 ]
        unique ordered reference OpenCircuitTests : OpenCircuitTest [0..*] opposite MeasuredWindingSpecs
        unique ordered reference ToWinding : WindingInfo [0..1] opposite ToWindingSpecs
        unique ordered reference ShortCircuitTests : ShortCircuitTest [0..*] opposite ShortedWindingSpecs
      }
      class AssetModel : cimCore.IdentifiedObject
      {
        unique ordered modelVersion : nmeta.String [1 ]
        unique ordered modelNumber : nmeta.String [1 ]
        unique ordered corporateStandardKind : CorporateStandardKind [0..1]
        unique ordered usageKind : AssetModelUsageKind [0..1]
        unique ordered weightTotal : nmeta.Float [1 ]
        unique ordered reference AssetInfo : cimInfAssets.AssetInfo [0..1] opposite AssetModel
        unique ordered reference AssetModelCatalogueItems : cimInfAssetModels.AssetModelCatalogueItem [0..*] opposite AssetModel
        unique ordered reference TypeAsset : cimInfTypeAsset.TypeAsset [0..1] opposite AssetModels
        unique ordered reference ErpInventoryCounts : cimInfERPSupport.ErpInventoryCount [0..*] opposite AssetModel
      }
      class CableInfo : ConductorInfo
      {
        unique ordered sheathAsNeutral : nmeta.Boolean [1 ]
        unique ordered isStrandFill : nmeta.Boolean [1 ]
        unique ordered outerJacketKind : CableOuterJacketKind [0..1]
        unique ordered constructionKind : CableConstructionKind [0..1]
        unique ordered diameterOverScreen : nmeta.Float [1 ]
        unique ordered nominalTemperature : nmeta.Float [1 ]
        unique ordered diameterOverJacket : nmeta.Float [1 ]
        unique ordered diameterOverCore : nmeta.Float [1 ]
        unique ordered diameterOverInsulation : nmeta.Float [1 ]
        unique ordered shieldMaterial : CableShieldMaterialKind [0..1]
        unique ordered reference DuctBankInfo : cimInfAssets.DuctInfo [0..1] opposite CableInfos
      }
      class OpenCircuitTest : DistributionWindingTest
      {
        unique ordered noLoadLoss : nmeta.Float [1 ]
        unique ordered excitingCurrent : nmeta.Float [1 ]
        unique ordered excitingCurrentZero : nmeta.Float [1 ]
        unique ordered noLoadLossZero : nmeta.Float [1 ]
        unique ordered reference MeasuredWindingSpecs : ToWindingSpec [0..*] opposite OpenCircuitTests
      }
      class DistributionWindingTest : cimCore.IdentifiedObject
      {
        unique ordered fromTapStep : nmeta.Integer [1 ]
        unique ordered reference FromWinding : WindingInfo [0..1] opposite WindingTests
      }
      class ShortCircuitTest : DistributionWindingTest
      {
        unique ordered loadLoss : nmeta.Float [1 ]
        unique ordered loadLossZero : nmeta.Float [1 ]
        unique ordered leakageImpedance : nmeta.Float [1 ]
        unique ordered leakageImpedanceZero : nmeta.Float [1 ]
        unique ordered reference ShortedWindingSpecs : ToWindingSpec [0..*] opposite ShortCircuitTests
      }
      class EndDeviceModel : AssetModel
      {
        unique ordered reference EndDeviceAssets : cimMetering.EndDeviceAsset [0..*] opposite EndDeviceModel
      }
      enum CorporateStandardKind
      {
        underEvaluation
        other = 1
        standard = 2
        experimental = 3
      }
      class TransformerInfo : cimCore.IdentifiedObject
      {
        unique ordered reference Transformers : cimWiresExt.DistributionTransformer [0..*] opposite TransformerInfo
        unique ordered reference WindingInfos : WindingInfo [0..*] opposite TransformerInfo
        unique ordered reference TransformerAssetModels : cimInfAssetModels.TransformerAssetModel [0..*] opposite TransformerInfo
        unique ordered reference TransformerAssets : cimInfAssets.TransformerAsset [0..*] opposite TransformerInfo
      }
      enum AssetModelUsageKind
      {
        streetlight
        other = 1
        substation = 2
        customerSubstation = 3
        distributionUnderground = 4
        distributionOverhead = 5
        transmission = 6
        unknown = 7
      }
      enum CableOuterJacketKind
      {
        insulating
        other = 1
        semiconducting = 2
        polyethylene = 3
        none = 4
        linearLowDensityPolyethylene = 5
        pvc = 6
      }
      enum ConductorUsageKind
      {
        secondary
        other = 1
        distribution = 2
        transmission = 3
      }
      enum CableConstructionKind
      {
        solid
        stranded = 1
        other = 2
        segmental = 3
        compacted = 4
        sector = 5
        compressed = 6
      }
      enum ConductorInsulationKind
      {
        crosslinkedPolyethylene
        butyl = 1
        treeRetardantCrosslinkedPolyethylene = 2
        asbestosAndVarnishedCambric = 3
        highPressureFluidFilled = 4
        ethylenePropyleneRubber = 5
        ozoneResistantRubber = 6
        oilPaper = 7
        varnishedDacronGlass = 8
        highMolecularWeightPolyethylene = 9
        varnishedCambricCloth = 10
        other = 11
        treeResistantHighMolecularWeightPolyethylene = 12
        unbeltedPilc = 13
        rubber = 14
        beltedPilc = 15
        lowCapacitanceRubber = 16
        siliconRubber = 17
      }
      enum CableShieldMaterialKind
      {
        other
        lead = 1
        steel = 2
        aluminum = 3
        copper = 4
      }
      class WireArrangement : cimCore.IdentifiedObject
      {
        unique ordered mountingPointX : nmeta.Float [1 ]
        unique ordered mountingPointY : nmeta.Float [1 ]
        unique ordered position : nmeta.Integer [1 ]
        unique ordered reference WireType : WireType [0..1] opposite WireArrangements
        unique ordered reference ConductorInfo : ConductorInfo [0..1] opposite WireArrangements
      }
      class TapeShieldCableInfo : CableInfo
      {
        unique ordered tapeLap : nmeta.Float [1 ]
        unique ordered tapeThickness : nmeta.Float [1 ]
      }

    }

    namespace PaymentMetering ( cimPaymentMetering ) = http://iec.ch/TC57/2009/CIM-schema-cim14#PaymentMetering
    {
      class Cashier : cimCore.IdentifiedObject
      {
        unique ordered reference CashierShifts : CashierShift [0..*] opposite Cashier
        unique ordered reference electronicAddress : cimCommon.ElectronicAddress [0..1]
        unique ordered reference Vendor : Vendor [0..1] opposite Cashiers
      }
      class Transactor : cimCore.IdentifiedObject
      {
        unique ordered reference MerchantAccounts : MerchantAccount [0..*] opposite Transactors
      }
      class TariffProfile : cimCommon.Document
      {
        unique ordered tariffCycle : nmeta.String [1 ]
        unique ordered reference TimeTariffIntervals : TimeTariffInterval [0..*] opposite TariffProfiles
        unique ordered reference Tariffs : cimCustomers.Tariff [0..*] opposite TariffProfiles
        unique ordered reference ConsumptionTariffIntervals : ConsumptionTariffInterval [0..*] opposite TariffProfiles
      }
      enum TransactionKind
      {
        tokenExchange
        other = 1
        taxChargePayment = 2
        tokenCancellation = 3
        tokenSalePayment = 4
        serviceChargePayment = 5
        accountPayment = 6
        tokenGrant = 7
        diversePayment = 8
        tokenFreeIssue = 9
        meterConfigurationToken = 10
        auxiliaryChargePayment = 11
        transactionReversal = 12
      }
      class MerchantAgreement : cimCommon.Agreement
      {
        unique ordered reference MerchantAccounts : MerchantAccount [0..*] opposite MerchantAgreement
      }
      enum SupplierKind
      {
        retailer
        utility = 1
        other = 2
      }
      enum ChargeKind
      {
        auxiliaryCharge
        consumptionCharge = 1
        other = 2
        demandCharge = 3
        taxCharge = 4
      }
      class VendorShift : Shift
      {
        unique ordered merchantDebitAmount : nmeta.Float [1 ]
        unique ordered posted : nmeta.Boolean [1 ]
        unique ordered reference Receipts : Receipt [0..*] opposite VendorShift
        unique ordered reference Vendor : Vendor [0..1] opposite VendorShifts
        unique ordered reference Transactions : Transaction [0..*] opposite VendorShift
        unique ordered reference MerchantAccount : MerchantAccount [0..1] opposite VendorShifts
      }
      class Transaction : cimCore.IdentifiedObject
      {
        unique ordered kind : TransactionKind [0..1]
        unique ordered serviceUnitsError : nmeta.Float [1 ]
        unique ordered reversedId : nmeta.String [1 ]
        unique ordered receiverReference : nmeta.String [1 ]
        unique ordered donorReference : nmeta.String [1 ]
        unique ordered serviceUnitsEnergy : nmeta.Float [1 ]
        unique ordered diverseReference : nmeta.String [1 ]
        unique ordered reference UserAttributes : cimCommon.UserAttribute [0..*] opposite Transaction
        unique ordered reference MeterAsset : cimMetering.MeterAsset [0..1] opposite VendingTransactions
        unique ordered reference line : LineDetail [0..1]
        unique ordered reference VendorShift : VendorShift [0..1] opposite Transactions
        unique ordered reference CashierShift : CashierShift [0..1] opposite Transactions
        unique ordered reference AuxiliaryAccount : AuxiliaryAccount [0..1] opposite PaymentTransactions
        unique ordered reference PricingStructure : cimCustomers.PricingStructure [0..1] opposite Transactions
        unique ordered reference CustomerAccount : cimCustomers.CustomerAccount [0..1] opposite PaymentTransactions
        unique ordered reference Receipt : Receipt [0..1] opposite Transactions
      }
      class Cheque : Element
      {
        unique ordered micrNumber : nmeta.String [1 ]
        unique ordered date : nmeta.String [1 ]
        unique ordered chequeNumber : nmeta.String [1 ]
        unique ordered kind : ChequeKind [0..1]
        unique ordered reference bankAccountDetail : BankAccountDetail [0..1]
        unique ordered reference Tender : Tender [0..1] opposite Cheque
      }
      class AuxiliaryAgreement : cimCommon.Agreement
      {
        unique ordered auxCycle : nmeta.String [1 ]
        unique ordered auxRef : nmeta.String [1 ]
        unique ordered subCategory : nmeta.String [1 ]
        unique ordered minAmount : nmeta.Float [1 ]
        unique ordered vendPortion : nmeta.Float [1 ]
        unique ordered auxPriorityCode : nmeta.String [1 ]
        unique ordered arrearsInterest : nmeta.Float [1 ]
        unique ordered fixedAmount : nmeta.Float [1 ]
        unique ordered payCycle : nmeta.String [1 ]
        unique ordered vendPortionArrear : nmeta.Float [1 ]
        unique ordered reference CustomerAgreement : cimCustomers.CustomerAgreement [0..1] opposite AuxiliaryAgreements
        unique ordered reference AuxiliaryAccounts : AuxiliaryAccount [0..*] opposite AuxiliaryAgreement
      }
      enum TenderKind
      {
        cash
        unspecified = 1
        other = 2
        card = 3
        cheque = 4
      }
      class Shift : cimCore.IdentifiedObject
      {
        unique ordered transactionsGrandTotal : nmeta.Float [1 ]
        unique ordered receiptsGrandTotalRounding : nmeta.Float [1 ]
        unique ordered transactionsGrandTotalRounding : nmeta.Float [1 ]
        unique ordered receiptsGrandTotalNonBankable : nmeta.Float [1 ]
        unique ordered receiptsGrandTotalBankable : nmeta.Float [1 ]
        unique ordered reference activityInterval : cimCommon.DateTimeInterval [0..1]
        unique ordered reference TransactionSummaries : cimInfPaymentMetering.TransactionSummary [0..*] opposite Shift
        unique ordered reference ReceiptSummaries : cimInfPaymentMetering.ReceiptSummary [0..*] opposite Shift
      }
      class ConsumptionTariffInterval : Element
      {
        unique ordered sequenceNumber : nmeta.Integer [1 ]
        unique ordered startValue : nmeta.Float [1 ]
        unique ordered reference TariffProfiles : TariffProfile [0..*] opposite ConsumptionTariffIntervals
        unique ordered reference Charges : Charge [0..*] opposite ConsumptionTariffIntervals
      }
      class Receipt : cimCore.IdentifiedObject
      {
        unique ordered isBankable : nmeta.Boolean [1 ]
        unique ordered reference Transactions : Transaction [0..*] opposite Receipt
        unique ordered reference CashierShift : CashierShift [0..1] opposite Receipts
        unique ordered reference Tenders : Tender [0..*] opposite Receipt
        unique ordered reference VendorShift : VendorShift [0..1] opposite Receipts
        unique ordered reference line : LineDetail [0..1]
      }
      class Due : Element
      {
        unique ordered interest : nmeta.Float [1 ]
        unique ordered principle : nmeta.Float [1 ]
        unique ordered current : nmeta.Float [1 ]
        unique ordered arrears : nmeta.Float [1 ]
        unique ordered charges : nmeta.Float [1 ]
      }
      class BankAccountDetail : Element
      {
        unique ordered bankName : nmeta.String [1 ]
        unique ordered accountNumber : nmeta.String [1 ]
        unique ordered holderID : nmeta.String [1 ]
        unique ordered branchCode : nmeta.String [1 ]
        unique ordered holderName : nmeta.String [1 ]
      }
      enum CreditKind
      {
        tokenCredit
        lifelineCredit = 1
        grantCredit = 2
        reserveCredit = 3
        other = 4
        advanceCredit = 5
      }
      class LineDetail : Element
      {
        unique ordered rounding : nmeta.Float [1 ]
        unique ordered amount : nmeta.Float [1 ]
        unique ordered dateTime : nmeta.DateTime [1 ]
        unique ordered note : nmeta.String [1 ]
      }
      class ServiceSupplier : cimCommon.Organisation
      {
        unique ordered issuerIdentificationNumber : nmeta.String [1 ]
        unique ordered kind : SupplierKind [0..1]
        unique ordered reference ServiceDeliveryPoints : cimMetering.ServiceDeliveryPoint [0..*] opposite ServiceSupplier
        unique ordered reference BankAccounts : cimInfCommon.BankAccount [0..*] opposite ServiceSupplier
        unique ordered reference CustomerAgreements : cimCustomers.CustomerAgreement [0..*] opposite ServiceSupplier
      }
      class AccountMovement : Element
      {
        unique ordered reason : nmeta.String [1 ]
        unique ordered amount : nmeta.Float [1 ]
        unique ordered dateTime : nmeta.DateTime [1 ]
      }
      class PointOfSale : cimCore.IdentifiedObject
      {
        unique ordered location : nmeta.String [1 ]
        unique ordered reference Tokens : cimInfPaymentMetering.Token [0..*] opposite PointOfSale
        unique ordered reference CashierShifts : CashierShift [0..*] opposite PointOfSale
        unique ordered reference Vendor : Vendor [0..1] opposite PointOfSales
      }
      class AuxiliaryAccount : cimCommon.Document
      {
        unique ordered principleAmount : nmeta.Float [1 ]
        unique ordered balance : nmeta.Float [1 ]
        unique ordered reference PaymentTransactions : Transaction [0..*] opposite AuxiliaryAccount
        unique ordered reference due : Due [0..1]
        unique ordered reference lastCredit : AccountMovement [0..1]
        unique ordered reference AuxiliaryAgreement : AuxiliaryAgreement [0..1] opposite AuxiliaryAccounts
        unique ordered reference Charges : Charge [0..*] opposite AuxiliaryAccounts
        unique ordered reference lastDebit : AccountMovement [0..1]
      }
      class Charge : cimCore.IdentifiedObject
      {
        unique ordered kind : ChargeKind [0..1]
        unique ordered variablePortion : nmeta.Float [1 ]
        unique ordered reference AuxiliaryAccounts : AuxiliaryAccount [0..*] opposite Charges
        unique ordered reference ParentCharge : Charge [0..1] opposite ChildCharges
        unique ordered reference ConsumptionTariffIntervals : ConsumptionTariffInterval [0..*] opposite Charges
        unique ordered reference ChildCharges : Charge [0..*] opposite ParentCharge
        unique ordered reference TimeTariffIntervals : TimeTariffInterval [0..*] opposite Charges
        unique ordered reference fixedPortion : AccountingUnit [0..1]
      }
      class AccountingUnit : Element
      {
        unique ordered monetaryUnit : cimDomain.Currency [0..1]
        unique ordered energyUnit : nmeta.Float [1 ]
        unique ordered value : nmeta.Float [1 ]
        unique ordered multiplier : cimDomain.UnitMultiplier [0..1]
      }
      class TimeTariffInterval : Element
      {
        unique ordered startDateTime : nmeta.DateTime [1 ]
        unique ordered sequenceNumber : nmeta.Integer [1 ]
        unique ordered reference TariffProfiles : TariffProfile [0..*] opposite TimeTariffIntervals
        unique ordered reference Charges : Charge [0..*] opposite TimeTariffIntervals
      }
      class CashierShift : Shift
      {
        unique ordered cashFloat : nmeta.Float [1 ]
        unique ordered reference Cashier : Cashier [0..1] opposite CashierShifts
        unique ordered reference PointOfSale : PointOfSale [0..1] opposite CashierShifts
        unique ordered reference Receipts : Receipt [0..*] opposite CashierShift
        unique ordered reference Transactions : Transaction [0..*] opposite CashierShift
      }
      enum ChequeKind
      {
        bankOrder
        postalOrder = 1
        other = 2
      }
      class MerchantAccount : cimCommon.Document
      {
        unique ordered provisionalBalance : nmeta.Float [1 ]
        unique ordered currentBalance : nmeta.Float [1 ]
        unique ordered reference BankStatements : cimInfPaymentMetering.BankStatement [0..*] opposite MerchantAccount
        unique ordered reference MerchantAgreement : MerchantAgreement [0..1] opposite MerchantAccounts
        unique ordered reference Transactors : Transactor [0..*] opposite MerchantAccounts
        unique ordered reference Vendors : Vendor [0..*] opposite MerchantAccount
        unique ordered reference VendorShifts : VendorShift [0..*] opposite MerchantAccount
      }
      class Tender : cimCore.IdentifiedObject
      {
        unique ordered amount : nmeta.Float [1 ]
        unique ordered change : nmeta.Float [1 ]
        unique ordered kind : TenderKind [0..1]
        unique ordered reference Receipt : Receipt [0..1] opposite Tenders
        unique ordered reference Cheque : Cheque [0..1] opposite Tender
        unique ordered reference Card : Card [0..1] opposite Tender
      }
      class Vendor : cimCore.IdentifiedObject
      {
        unique ordered reference PointOfSales : PointOfSale [0..*] opposite Vendor
        unique ordered reference Cashiers : Cashier [0..*] opposite Vendor
        unique ordered reference MerchantAccount : MerchantAccount [0..1] opposite Vendors
        unique ordered reference BankStatements : cimInfPaymentMetering.BankStatement [0..*] opposite Vendor
        unique ordered reference VendorShifts : VendorShift [0..*] opposite Vendor
      }
      class Card : Element
      {
        unique ordered cvNumber : nmeta.String [1 ]
        unique ordered expiryDate : nmeta.String [1 ]
        unique ordered pan : nmeta.String [1 ]
        unique ordered accountHolderName : nmeta.String [1 ]
        unique ordered reference Tender : Tender [0..1] opposite Card
      }

    }

    namespace Customers ( cimCustomers ) = http://iec.ch/TC57/2009/CIM-schema-cim14#Customers
    {
      class Customer : cimCommon.Organisation
      {
        unique ordered kind : CustomerKind [0..1]
        unique ordered specialNeed : nmeta.String [1 ]
        unique ordered pucNumber : nmeta.String [1 ]
        unique ordered vip : nmeta.Boolean [1 ]
        unique ordered reference PlannedOutage : cimInfOperations.PlannedOutage [0..1] opposite CustomerDatas
        unique ordered reference EndDeviceAssets : cimMetering.EndDeviceAsset [0..*] opposite Customer
        unique ordered reference status : cimCommon.Status [0..1]
        unique ordered reference TroubleTickets : cimInfOperations.TroubleTicket [0..*] opposite CustomerData
        unique ordered reference ErpPersons : cimInfERPSupport.ErpPerson [0..*] opposite CustomerData
        unique ordered reference OutageNotifications : cimInfOperations.OutageNotification [0..*] opposite CustomerDatas
        unique ordered reference Works : cimWork.Work [0..*] opposite Customers
        unique ordered reference CustomerAgreements : CustomerAgreement [0..*] opposite Customer
      }
      enum CustomerKind
      {
        residential
        internalUse = 1
        windMachine = 2
        commercialIndustrial = 3
        energyServiceScheduler = 4
        residentialStreetlightOthers = 5
        energyServiceSupplier = 6
        residentialAndStreetlight = 7
        residentialFarmService = 8
        pumpingLoad = 9
        residentialAndCommercial = 10
        other = 11
      }
      class ServiceCategory : cimCore.IdentifiedObject
      {
        unique ordered kind : ServiceKind [0..1]
        unique ordered reference SPAccountingFunctions : cimInfPaymentMetering.SDPAccountingFunction [0..*] opposite ServiceKind
        unique ordered reference ServiceDeliveryPoints : cimMetering.ServiceDeliveryPoint [0..*] opposite ServiceCategory
        unique ordered reference CustomerAgreements : CustomerAgreement [0..*] opposite ServiceCategory
        unique ordered reference PricingStructures : PricingStructure [0..*] opposite ServiceCategory
      }
      class PricingStructure : cimCommon.Document
      {
        unique ordered code : nmeta.String [1 ]
        unique ordered taxExemption : nmeta.Boolean [1 ]
        unique ordered dailyFloorUsage : nmeta.Integer [1 ]
        unique ordered revenueKind : RevenueKind [0..1]
        unique ordered dailyCeilingUsage : nmeta.Integer [1 ]
        unique ordered dailyEstimatedUsage : nmeta.Integer [1 ]
        unique ordered reference ServiceCategory : ServiceCategory [0..1] opposite PricingStructures
        unique ordered reference CustomerAgreements : CustomerAgreement [0..*] opposite PricingStructures
        unique ordered reference PowerQualityPricings : cimInfCustomers.PowerQualityPricing [0..*] opposite PricingStructure
        unique ordered reference Tariffs : Tariff [0..*] opposite PricingStructures
        unique ordered reference ServiceDeliveryPoints : cimMetering.ServiceDeliveryPoint [0..*] opposite PricingStructures
        unique ordered reference SubscribePowerCurve : cimInfCustomers.SubscribePowerCurve [0..1] opposite PricingStructure
        unique ordered reference Transactions : cimPaymentMetering.Transaction [0..*] opposite PricingStructure
      }
      class ServiceLocation : cimCommon.Location
      {
        unique ordered needsInspection : nmeta.Boolean [1 ]
        unique ordered accessMethod : nmeta.String [1 ]
        unique ordered siteAccessProblem : nmeta.String [1 ]
        unique ordered reference ServiceDeliveryPoints : cimMetering.ServiceDeliveryPoint [0..*] opposite ServiceLocation
        unique ordered reference ErpPersons : cimInfERPSupport.ErpPerson [0..*] opposite ServiceLocation
        unique ordered reference CustomerAgreements : CustomerAgreement [0..*] opposite ServiceLocations
        unique ordered reference EndDeviceAssets : cimMetering.EndDeviceAsset [0..*] opposite ServiceLocation
      }
      enum ServiceKind
      {
        time
        gas = 1
        sewerage = 2
        rates = 3
        electricity = 4
        tvLicence = 5
        other = 6
        refuse = 7
        water = 8
        internet = 9
        heat = 10
      }
      class CustomerAccount : cimCommon.Document
      {
        unique ordered reference WorkBillingInfos : cimInfCustomers.WorkBillingInfo [0..*] opposite CustomerAccount
        unique ordered reference PaymentTransactions : cimPaymentMetering.Transaction [0..*] opposite CustomerAccount
        unique ordered reference CustomerAgreements : CustomerAgreement [0..*] opposite CustomerAccount
        unique ordered reference ErpInvoicees : cimInfERPSupport.ErpInvoice [0..*] opposite CustomerAccount
        unique ordered reference CustomerBillingInfos : cimInfCustomers.CustomerBillingInfo [0..*] opposite CustomerAccount
      }
      class CustomerAgreement : cimCommon.Agreement
      {
        unique ordered billingCycle : nmeta.String [1 ]
        unique ordered loadMgmt : nmeta.String [1 ]
        unique ordered budgetBill : nmeta.String [1 ]
        unique ordered reference ServiceSupplier : cimPaymentMetering.ServiceSupplier [0..1] opposite CustomerAgreements
        unique ordered reference StandardIndustryCode : cimInfCustomers.StandardIndustryCode [0..1] opposite CustomerAgreements
        unique ordered reference ServiceDeliveryPoints : cimMetering.ServiceDeliveryPoint [0..*] opposite CustomerAgreement
        unique ordered reference MeterReadings : cimMetering.MeterReading [0..*] opposite CustomerAgreement
        unique ordered reference ServiceLocations : ServiceLocation [0..*] opposite CustomerAgreements
        unique ordered reference PricingStructures : PricingStructure [0..*] opposite CustomerAgreements
        unique ordered reference AuxiliaryAgreements : cimPaymentMetering.AuxiliaryAgreement [0..*] opposite CustomerAgreement
        unique ordered reference EndDeviceControls : cimMetering.EndDeviceControl [0..*] opposite CustomerAgreement
        unique ordered reference Customer : Customer [0..1] opposite CustomerAgreements
        unique ordered reference ServiceCategory : ServiceCategory [0..1] opposite CustomerAgreements
        unique ordered reference CustomerAccount : CustomerAccount [0..1] opposite CustomerAgreements
        unique ordered reference DemandResponseProgram : cimMetering.DemandResponseProgram [0..1] opposite CustomerAgreements
        unique ordered reference Equipments : cimCore.Equipment [0..*] opposite CustomerAgreements
      }
      class Tariff : cimCommon.Document
      {
        unique ordered endDate : nmeta.String [1 ]
        unique ordered startDate : nmeta.String [1 ]
        unique ordered reference TariffProfiles : cimPaymentMetering.TariffProfile [0..*] opposite Tariffs
        unique ordered reference PricingStructures : PricingStructure [0..*] opposite Tariffs
      }
      enum RevenueKind
      {
        commercial
        other = 1
        residential = 2
        nonResidential = 3
        streetLight = 4
        industrial = 5
        irrigation = 6
      }

    }

    namespace LoadControl ( cimLoadControl ) = http://iec.ch/TC57/2009/CIM-schema-cim14#LoadControl
    {
      class RemoteConnectDisconnectInfo : Element
      {
        unique ordered powerLimit : nmeta.Float [1 ]
        unique ordered customerVoltageLimit : nmeta.Float [1 ]
        unique ordered energyLimit : nmeta.Float [1 ]
        unique ordered isEnergyLimiting : nmeta.Boolean [1 ]
        unique ordered energyUsageWarning : nmeta.Float [1 ]
        unique ordered needsVoltageLimitCheck : nmeta.Boolean [1 ]
        unique ordered energyUsageStartDateTime : nmeta.DateTime [1 ]
        unique ordered usePushbutton : nmeta.Boolean [1 ]
        unique ordered isArmDisconnect : nmeta.Boolean [1 ]
        unique ordered isArmConnect : nmeta.Boolean [1 ]
        unique ordered needsPowerLimitCheck : nmeta.Boolean [1 ]
        unique ordered armedTimeout : nmeta.Float [1 ]
      }
      class ConnectDisconnectFunction : cimMetering.DeviceFunction
      {
        unique ordered isDelayedDiscon : nmeta.Boolean [1 ]
        unique ordered isLocalAutoReconOp : nmeta.Boolean [1 ]
        unique ordered isLocalAutoDisconOp : nmeta.Boolean [1 ]
        unique ordered isConnected : nmeta.Boolean [1 ]
        unique ordered isRemoteAutoDisconOp : nmeta.Boolean [1 ]
        unique ordered eventCount : nmeta.Integer [1 ]
        unique ordered isRemoteAutoReconOp : nmeta.Boolean [1 ]
        unique ordered reference Switches : cimWires.Switch [0..*] opposite ConnectDisconnectFunctions
        unique ordered reference rcdInfo : RemoteConnectDisconnectInfo [0..1]
      }

    }

    namespace Assets ( cimAssets ) = http://iec.ch/TC57/2009/CIM-schema-cim14#Assets
    {
      class AcceptanceTest : Element
      {
        unique ordered dateTime : nmeta.DateTime [1 ]
        unique ordered success : nmeta.Boolean [1 ]
        unique ordered type : nmeta.String [1 ]
      }
      enum SealConditionKind
      {
        missing
        open = 1
        broken = 2
        other = 3
        locked = 4
      }
      class Seal : cimCore.IdentifiedObject
      {
        unique ordered condition : SealConditionKind [0..1]
        unique ordered sealNumber : nmeta.String [1 ]
        unique ordered appliedDateTime : nmeta.DateTime [1 ]
        unique ordered kind : SealKind [0..1]
        unique ordered reference AssetContainer : AssetContainer [0..1] opposite Seals
      }
      enum SealKind
      {
        lead
        other = 1
        steel = 2
        lock = 3
      }
      class ComMediaAsset : Asset
      {
      }
      class AssetFunction : cimCore.IdentifiedObject
      {
        unique ordered hardwareID : nmeta.String [1 ]
        unique ordered programID : nmeta.String [1 ]
        unique ordered firmwareID : nmeta.String [1 ]
        unique ordered password : nmeta.String [1 ]
        unique ordered configID : nmeta.String [1 ]
        unique ordered reference Asset : Asset [0..1] opposite AssetFunctions
      }
      class Asset : cimCore.IdentifiedObject
      {
        unique ordered serialNumber : nmeta.String [1 ]
        unique ordered critical : nmeta.Boolean [1 ]
        unique ordered manufacturedDate : nmeta.String [1 ]
        unique ordered lotNumber : nmeta.String [1 ]
        unique ordered initialLossOfLife : nmeta.Float [1 ]
        unique ordered initialCondition : nmeta.String [1 ]
        unique ordered utcNumber : nmeta.String [1 ]
        unique ordered installationDate : nmeta.String [1 ]
        unique ordered corporateCode : nmeta.String [1 ]
        unique ordered purchasePrice : nmeta.Float [1 ]
        unique ordered application : nmeta.String [1 ]
        unique ordered category : nmeta.String [1 ]
        unique ordered reference AssetPropertyCurves : cimInfAssets.AssetPropertyCurve [0..*] opposite Assets
        unique ordered reference Measurements : cimMeas.Measurement [0..*] opposite Asset
        unique ordered reference FinancialInfo : cimInfAssets.FinancialInfo [0..1] opposite Asset
        unique ordered reference FromAssetRoles : cimInfAssets.AssetAssetRole [0..*] opposite ToAsset
        unique ordered reference ActivityRecords : cimCommon.ActivityRecord [0..*] opposite Assets
        unique ordered reference DocumentRoles : cimInfAssets.DocAssetRole [0..*] opposite Asset
        unique ordered reference AssetContainer : AssetContainer [0..1] opposite Assets
        unique ordered reference ErpInventory : cimInfERPSupport.ErpInventory [0..1] opposite Asset
        unique ordered reference ReliabilityInfos : cimInfAssets.ReliabilityInfo [0..*] opposite Assets
        unique ordered reference WorkTask : cimInfWork.WorkTask [0..1] opposite Assets
        unique ordered reference electronicAddress : cimCommon.ElectronicAddress [0..1]
        unique ordered reference ScheduledEvents : cimInfCommon.ScheduledEvent [0..*] opposite Assets
        unique ordered reference ChangeItems : cimInfOperations.ChangeItem [0..*] opposite Asset
        unique ordered reference AssetFunctions : AssetFunction [0..*] opposite Asset
        unique ordered reference status : cimCommon.Status [0..1]
        unique ordered reference ErpOrganisationRoles : cimInfAssets.OrgAssetRole [0..*] opposite Asset
        unique ordered reference Ratings : cimCommon.UserAttribute [0..*] opposite RatingAssets
        unique ordered reference Mediums : cimInfAssets.Medium [0..*] opposite Assets
        unique ordered reference Properties : cimCommon.UserAttribute [0..*] opposite PropertyAssets
        unique ordered reference AssetInfo : cimInfAssets.AssetInfo [0..1] opposite Asset
        unique ordered reference ToAssetRoles : cimInfAssets.AssetAssetRole [0..*] opposite FromAsset
        unique ordered reference Location : cimCommon.Location [0..1] opposite Assets
        unique ordered reference PowerSystemResources : cimCore.PowerSystemResource [0..*] opposite Assets
        unique ordered reference ErpItemMaster : cimInfERPSupport.ErpItemMaster [0..1] opposite Asset
        unique ordered reference acceptanceTest : AcceptanceTest [0..1]
        unique ordered reference ErpRecDeliveryItems : cimInfERPSupport.ErpRecDelvLineItem [0..*] opposite Assets
      }
      class AssetContainer : Asset
      {
        unique ordered reference LandProperties : cimInfLocations.LandProperty [0..*] opposite AssetContainers
        unique ordered reference Assets : Asset [0..*] opposite AssetContainer
        unique ordered reference Seals : Seal [0..*] opposite AssetContainer
      }

    }

    namespace Work ( cimWork ) = http://iec.ch/TC57/2009/CIM-schema-cim14#Work
    {
      enum WorkKind
      {
        maintenance
        inspection = 1
        other = 2
        construction = 3
        service = 4
        meter = 5
        reconnect = 6
        disconnect = 7
      }
      class Work : cimCommon.Document
      {
        unique ordered priority : nmeta.String [1 ]
        unique ordered requestDateTime : nmeta.DateTime [1 ]
        unique ordered kind : WorkKind [0..1]
        unique ordered reference WorkTasks : cimInfWork.WorkTask [0..*] opposite Work
        unique ordered reference Designs : cimInfWork.Design [0..*] opposite Work
        unique ordered reference BusinessCase : cimInfWork.BusinessCase [0..1] opposite Works
        unique ordered reference WorkFlowSteps : cimInfWork.WorkFlowStep [0..*] opposite Work
        unique ordered reference WorkCostDetails : cimInfWork.WorkCostDetail [0..*] opposite Works
        unique ordered reference ErpProjectAccounting : cimInfERPSupport.ErpProjectAccounting [0..1] opposite Works
        unique ordered reference Project : cimInfWork.Project [0..1] opposite Works
        unique ordered reference Request : cimInfWork.Request [0..1] opposite Works
        unique ordered reference WorkBillingInfo : cimInfCustomers.WorkBillingInfo [0..1] opposite Works
        unique ordered reference Customers : cimCustomers.Customer [0..*] opposite Works
      }

    }
    class IEC61968CIMVersion : Element
    {
      unique ordered version : nmeta.String [1 ]
      unique ordered date : nmeta.DateTime [1 ]
    }

  }
  abstract class Element
  {
    unique ordered UUID : nmeta.String [0..1]
  }
  class CIM
  {
    composite unique ordered reference IDobject : Element [0..*]
  }
  class Stereotype : Element
  {
  }
  class CombinedVersion : Element
  {
    unique ordered version : nmeta.String [1 ]
    unique ordered date : nmeta.DateTime [1 ]
  }
  class Package : Element
  {
  }

}